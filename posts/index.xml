<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 肉蛋葱鸡肉粥🍛的博客☕</title>
        <link>http://example.org/posts/</link>
        <description>所有文章 | 肉蛋葱鸡肉粥🍛的博客☕</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1336352883@qq.com (yzuxqz)</managingEditor>
            <webMaster>1336352883@qq.com (yzuxqz)</webMaster><lastBuildDate>Tue, 09 Nov 2021 17:01:53 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>想要和我一样吗？</title>
    <link>http://example.org/posts/first_post/</link>
    <pubDate>Tue, 09 Nov 2021 17:01:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/first_post/</guid>
    <description><![CDATA[<p>##彭于晏是怎样练成的，请看下回分解##</p>
]]></description>
</item><item>
    <title>react扩展</title>
    <link>http://example.org/posts/react%E6%89%A9%E5%B1%95/</link>
    <pubDate>Thu, 02 Sep 2021 10:42:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/react%E6%89%A9%E5%B1%95/</guid>
    <description><![CDATA[<h2 id="1-setstate">1. setState</h2>
<h3 id="setstate更新状态的2种写法">setState更新状态的2种写法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">	(1). setState(stateChange, [callback])------对象式的setState
            1.stateChange为状态改变对象(该对象可以体现出状态的更改)
            2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用
					
	(2). setState(updater, [callback])------函数式的setState
            1.updater为返回stateChange对象的函数。
            2.updater可以接收到state和props。
            4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。
总结:
		1.对象式的setState是函数式的setState的简写方式(语法糖)
		2.使用原则：
				(1).如果新状态不依赖于原状态 ===&gt; 使用对象方式
				(2).如果新状态依赖于原状态 ===&gt; 使用函数方式
				(3).如果需要在setState()执行后获取最新的状态数据, 
					要在第二个callback函数中读取
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//第二种 , 有两种写法 区别在于括号
</span><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">((</span><span class="nx">preState</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">{</span><span class="nx">isAuthenticated</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">isAuthen</span><span class="p">}</span>
                <span class="p">});</span>
                
<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">((</span><span class="nx">preState</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">({</span>
                    <span class="nx">isAuthenticated</span><span class="o">:</span> <span class="o">!</span><span class="nx">preState</span><span class="p">.</span><span class="nx">isAuthenticated</span>
                <span class="p">}));</span>

</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="2-lazyload">2. lazyLoad</h2>
<h3 id="路由组件的lazyload">路由组件的lazyLoad</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js">	<span class="c1">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包
</span><span class="c1"></span>	<span class="kr">const</span> <span class="nx">Login</span> <span class="o">=</span> <span class="nx">lazy</span><span class="p">(()=&gt;</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;@/pages/Login&#39;</span><span class="p">))</span>
	
	<span class="c1">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面
</span><span class="c1"></span>	<span class="o">&lt;</span><span class="nx">Suspense</span> <span class="nx">fallback</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">loading</span><span class="p">.....</span><span class="o">&lt;</span><span class="err">/h1&gt;}&gt;</span>
        <span class="o">&lt;</span><span class="nx">Switch</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&#34;/xxx&#34;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Xxxx</span><span class="p">}</span><span class="o">/&gt;</span>
            <span class="o">&lt;</span><span class="nx">Redirect</span> <span class="nx">to</span><span class="o">=</span><span class="s2">&#34;/login&#34;</span><span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="err">/Switch&gt;</span>
    <span class="o">&lt;</span><span class="err">/Suspense&gt;</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="3-hooks">3. Hooks</h2>
<h4 id="1-react-hookhooks是什么">1. React Hook/Hooks是什么?</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(1). Hook是React 16.8.0版本增加的新特性/新语法
(2). 可以让你在函数组件中使用 state 以及其他的 React 特性
</code></pre></td></tr></table>
</div>
</div><h4 id="2-三个常用的hook">2. 三个常用的Hook</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(1). State Hook: React.useState()
(2). Effect Hook: React.useEffect()
(3). Ref Hook: React.useRef()
</code></pre></td></tr></table>
</div>
</div><h4 id="3-state-hook">3. State Hook</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作
(2). 语法: const [xxx, setXxx] = React.useState(initValue)  
(3). useState()说明:
        参数: 第一次初始化指定的值在内部作缓存
        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数
(4). setXxx()2种写法:
        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值
        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值
</code></pre></td></tr></table>
</div>
</div><h4 id="4-effect-hook">4. Effect Hook</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)
(2). React中的副作用操作:
        发ajax请求数据获取
        设置订阅 / 启动定时器
        手动更改真实DOM
(3). 语法和说明: 
        useEffect(() =&gt; { 
          // 在此可以执行任何带副作用操作
          return () =&gt; { // 在组件卸载前执行
            // 在此做一些收尾工作, 比如清除定时器/取消订阅等
          }
        }, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行
    
(4). 可以把 useEffect Hook 看做如下三个函数的组合
        componentDidMount()
        componentDidUpdate()
    	componentWillUnmount() 
</code></pre></td></tr></table>
</div>
</div><h4 id="5-ref-hook">5. Ref Hook</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据
(2). 语法: const refContainer = useRef()
(3). 作用:保存标签对象,功能与React.createRef()一样
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="4-fragment">4. Fragment</h2>
<h3 id="使用">使用</h3>
<pre><code>&lt;Fragment&gt;&lt;Fragment&gt;
&lt;&gt;&lt;/&gt;
</code></pre>
<h3 id="作用">作用</h3>
<blockquote>
<p>可以不用必须有一个真实的DOM根标签了</p>
</blockquote>
<hr/>
<h2 id="5-context">5. Context</h2>
<h3 id="理解">理解</h3>
<blockquote>
<p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p>
</blockquote>
<h3 id="使用-1">使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="mi">1</span><span class="p">)</span> <span class="nx">创建Context容器对象</span><span class="err">：</span>
	<span class="kr">const</span> <span class="nx">XxxContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="p">()</span>  
	
<span class="mi">2</span><span class="p">)</span> <span class="nx">渲染子组时</span><span class="err">，</span><span class="nx">外面包裹xxxContext</span><span class="p">.</span><span class="nx">Provider</span><span class="p">,</span> <span class="nx">通过value属性给后代组件传递数据</span><span class="err">：</span>
	<span class="o">&lt;</span><span class="nx">xxxContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">数据</span><span class="p">}</span><span class="o">&gt;</span>
		<span class="nx">子组件</span>
    <span class="o">&lt;</span><span class="err">/xxxContext.Provider&gt;</span>
    
<span class="mi">3</span><span class="p">)</span> <span class="nx">后代组件读取数据</span><span class="err">：</span>

	<span class="c1">//第一种方式:仅适用于类组件 
</span><span class="c1"></span>	  <span class="kr">static</span> <span class="nx">contextType</span> <span class="o">=</span> <span class="nx">xxxContext</span>  <span class="c1">// 声明接收context
</span><span class="c1"></span>	  <span class="k">this</span><span class="p">.</span><span class="nx">context</span> <span class="c1">// 读取context中的value数据
</span><span class="c1"></span>	  
	<span class="c1">//第二种方式: 函数组件与类组件都可以
</span><span class="c1"></span>	  <span class="o">&lt;</span><span class="nx">xxxContext</span><span class="p">.</span><span class="nx">Consumer</span><span class="o">&gt;</span>
	    <span class="p">{</span>
	      <span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">(</span> <span class="c1">// value就是context中的value数据
</span><span class="c1"></span>	        <span class="nx">要显示的内容</span>
	      <span class="p">)</span>
	    <span class="p">}</span>
	  <span class="o">&lt;</span><span class="err">/xxxContext.Consumer&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="注意">注意</h3>
<pre><code>在应用开发中一般不用context, 一般都用它的封装react插件
</code></pre>
<hr/>
<h2 id="6-组件优化">6. 组件优化</h2>
<h3 id="component的2个问题">Component的2个问题</h3>
<blockquote>
<ol>
<li>
<p>只要执行setState(),即使不改变状态数据, 组件也会重新render() ==&gt; 效率低</p>
</li>
<li>
<p>只当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p>
</li>
</ol>
</blockquote>
<h3 id="效率高的做法">效率高的做法</h3>
<blockquote>
<p>只有当组件的state或props数据发生改变时才重新render()</p>
</blockquote>
<h3 id="原因">原因</h3>
<blockquote>
<p>Component中的shouldComponentUpdate()总是返回true</p>
</blockquote>
<h3 id="解决">解决</h3>
<pre><code>办法1: 
	重写shouldComponentUpdate()方法
	比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false
办法2:  
	使用PureComponent
	PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true
	注意: 
		只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  
		不要直接修改state数据, 而是要产生新数据
项目中一般使用PureComponent来优化
</code></pre>
<hr/>
<h2 id="7-render-props">7. render props</h2>
<p></p>
<h3 id="如何向组件内部动态传入带内容的结构标签">如何向组件内部动态传入带内容的结构(标签)?</h3>
<pre><code>Vue中: 
	使用slot技术, 也就是通过组件标签体传入结构  &lt;A&gt;&lt;B/&gt;&lt;/A&gt;
React中:
	使用children props: 通过组件标签体传入结构
	使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性
</code></pre>
<h3 id="children-props">children props</h3>
<pre><code>&lt;A&gt;
  &lt;B&gt;xxxx&lt;/B&gt;
&lt;/A&gt;
{this.props.children}
问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 
</code></pre>
<h3 id="render-props">render props</h3>
<pre><code>&lt;A render={(data) =&gt; &lt;C data={data}&gt;&lt;/C&gt;}&gt;&lt;/A&gt;
A组件: {this.props.render(内部state数据)}
C组件: 读取A组件传入的数据显示 {this.props.data} 
</code></pre>
<hr/>
<h2 id="8-错误边界">8. 错误边界</h2>
<h4 id="理解-1">理解：</h4>
<p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p>
<h4 id="特点">特点：</h4>
<p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<h5 id="使用方式">使用方式：</h5>
<p>getDerivedStateFromError配合componentDidCatch</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// 生命周期函数，一旦后台组件报错，就会触发
</span><span class="c1"></span><span class="kr">static</span> <span class="nx">getDerivedStateFromError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="c1">// 在render之前触发
</span><span class="c1"></span>    <span class="c1">// 返回新的state
</span><span class="c1"></span>    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">hasError</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="nx">componentDidCatch</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 统计页面的错误。发送请求发送到后台去
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">info</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="9-组件通信方式总结">9. 组件通信方式总结</h2>
<h4 id="组件间的关系">组件间的关系：</h4>
<ul>
<li>父子组件</li>
<li>兄弟组件（非嵌套组件）</li>
<li>祖孙组件（跨级组件）</li>
</ul>
<h4 id="几种通信方式">几种通信方式：</h4>
<pre><code>	1.props：
		(1).children props
		(2).render props
	2.消息订阅-发布：
		pubs-sub、event等等
	3.集中式管理：
		redux、dva等等
	4.conText:
		生产者-消费者模式
</code></pre>
<h4 id="比较好的搭配方式">比较好的搭配方式：</h4>
<pre><code>	父子组件：props
	兄弟组件：消息订阅-发布、集中式管理
	祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)
</code></pre>
]]></description>
</item><item>
    <title>hooks</title>
    <link>http://example.org/posts/reacthooks/</link>
    <pubDate>Fri, 27 Aug 2021 10:45:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/reacthooks/</guid>
    <description><![CDATA[<h2 id="usestate">useState</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Example</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 声明一个叫 &#34;count&#34; 的 state 变量
</span><span class="c1"></span>  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="nx">You</span> <span class="nx">clicked</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span> <span class="nx">times</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="p">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}&gt;</span>
        <span class="nx">Click</span> <span class="nx">me</span>
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="useeffect">useEffect</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Example</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="sb">`You clicked </span><span class="si">${</span><span class="nx">count</span><span class="si">}</span><span class="sb"> times`</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="nx">You</span> <span class="nx">clicked</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span> <span class="nx">times</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="p">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}&gt;</span>
        <span class="nx">Click</span> <span class="nx">me</span>
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>useEffect如果第二个参数不写，相当于class中的componentDidMounted和componentDidUpdate</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="sb">`You clicked </span><span class="si">${</span><span class="nx">count</span><span class="si">}</span><span class="sb"> times`</span><span class="p">;</span>
  <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>返回一个函数，相当于componentWillUnMounted</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">()=&gt;{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;离开&#39;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第二个参数表示要根据哪些状态的改变而去重新渲染，如果为空数组，则无论什么状态改变都不会调用effect</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">()=&gt;{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;离开&#39;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span><span class="err">，</span><span class="p">[])</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>数组中有哪些值，就会随着这些状态的改变而重新执行副作用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">()=&gt;{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;离开&#39;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">},[</span><span class="nx">count</span><span class="p">])</span><span class="c1">//只有count变化了才会调用effect中的函数
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="usecontext">useContext</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span> <span class="p">,{</span><span class="nx">useState</span><span class="p">,</span><span class="nx">createContext</span><span class="p">,</span><span class="nx">useContext</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">const</span> <span class="nx">CountContext</span> <span class="o">=</span> <span class="nx">createContext</span><span class="p">({})</span><span class="c1">//1
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span> <span class="o">=</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">CountContext</span><span class="p">)</span><span class="c1">//3
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;{</span><span class="nx">count</span><span class="p">}&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Context</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span><span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="k">return</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;{</span><span class="nx">count</span><span class="p">}&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()=&gt;{</span><span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span><span class="o">+</span><span class="mi">1</span><span class="p">)}}&gt;</span><span class="nx">点击</span>	<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">CountContext.Provider</span> <span class="na">value</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}&gt;</span><span class="c1">//2如果初始值为对象，这里要写成对象的形式
</span><span class="c1"></span>        <span class="p">&lt;</span><span class="nt">Counter</span><span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nt">CountContext.Provider</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
<span class="kr">export</span>  <span class="k">default</span> <span class="nx">Context</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>父组件创建context</p>
</li>
<li>
<p>在父组件中包裹子组件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">      <span class="p">&lt;</span><span class="nt">CountContext.Provider</span> <span class="na">value</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}&gt;</span>
        <span class="p">&lt;</span><span class="nt">Counter</span><span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nt">CountContext.Provider</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>子组件中使用useContext获取父组件中传递的数据</p>
</li>
</ul>
<h2 id="memo">memo</h2>
<h2 id="usememo">useMemo</h2>
<h2 id="usecallback">useCallback</h2>
<p><a href="https://blog.csdn.net/fedlover/article/details/103347989?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener noreffer">https://blog.csdn.net/fedlover/article/details/103347989?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p>
<p>记忆函数</p>
<h2 id="usereducer">useReducer</h2>
<p>和useContxt结合可以实现redux的效果，但是不建议使用，使用useDispatch和useSlelector来使用redux</p>
<h2 id="useref">useRef</h2>
<ul>
<li>相当于class中的createRef()</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span> <span class="p">,{</span><span class="nx">useRef</span><span class="p">}</span><span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kd">function</span> <span class="nx">Ref</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">textRef</span><span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>

  <span class="k">return</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">textRef</span><span class="p">}/&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()=&gt;{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">textRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">value</span><span class="p">)}}&gt;</span><span class="nx">点击</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
<span class="kr">export</span> <span class="k">default</span> <span class="nx">Ref</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="usedispatch">useDispatch</h2>
<ul>
<li>
<p>用于结合redux使用</p>
</li>
<li>
<p>首先创建redux的store，action，reducer。并在外层容器包裹provider传递store</p>
</li>
<li>
<p>在需要使用dispatch发布action时</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">useDispatch</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-redux&#39;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">createChangeColorAction</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./redux/action&#34;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">ChangeColor</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nx">useDispatch</span><span class="p">()</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()=&gt;{</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">createChangeColorAction</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">))}}&gt;</span><span class="nx">红色</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="o">=</span><span class="p">{()=&gt;{</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">createChangeColorAction</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">))}}&gt;</span><span class="nx">蓝色</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">ChangeColor</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="useselector">useSelector</h2>
<ul>
<li>
<p>需要使用store中的state时</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">createContext</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">useSelector</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react-redux&#34;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">const</span> <span class="nx">ColorContext</span> <span class="o">=</span> <span class="nx">createContext</span><span class="p">({})</span>
<span class="kr">export</span> <span class="kr">const</span> <span class="nx">Color</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">state</span><span class="p">=&gt;</span><span class="nx">state</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">ColorContext.Provider</span> <span class="na">value</span><span class="o">=</span><span class="p">{{</span><span class="nx">color</span><span class="p">}}&gt;</span>
      <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">ColorContext.Provider</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="自定义hooks">自定义hooks</h2>
<ul>
<li>动态获取浏览器窗口大小的hooks</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,{</span><span class="nx">useState</span><span class="p">,</span><span class="nx">useEffect</span><span class="p">,</span><span class="nx">useCallback</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>


<span class="kd">function</span> <span class="nx">useWinSize</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">width</span><span class="p">,</span><span class="nx">setWidth</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientWidth</span><span class="p">)</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">height</span><span class="p">,</span><span class="nx">setHeight</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientWidth</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">reSize</span><span class="o">=</span><span class="nx">useCallback</span><span class="p">(()=&gt;</span> <span class="p">{</span>
    <span class="nx">setWidth</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientWidth</span><span class="p">)</span>
    <span class="nx">setHeight</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">clientHeight</span><span class="p">)</span>
  <span class="p">},[])</span>

  <span class="nx">useEffect</span><span class="p">(()=&gt;{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span><span class="nx">reSize</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">()=&gt;{</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span><span class="nx">reSize</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">},[])</span>

  <span class="k">return</span> <span class="p">({</span><span class="nx">width</span><span class="p">,</span><span class="nx">height</span><span class="p">})</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">UseWinSize</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">{</span><span class="nx">width</span><span class="p">,</span><span class="nx">height</span><span class="p">}</span> <span class="o">=</span> <span class="nx">useWinSize</span><span class="p">()</span>
  <span class="k">return</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;{</span><span class="nx">width</span><span class="p">}&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;{</span><span class="nx">height</span><span class="p">}&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

  <span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>useDebounce：修改value的更新频率</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">useDebounce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">setNewValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">//每次在value变化以后，设置一个定时器
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">setNewValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
      <span class="p">},</span>
      <span class="mi">2000</span><span class="p">)</span>
    <span class="c1">//每次在上一个useEffect处理完以后再运行，第一个effect的timer被第二个effect清理，最后一个无人清理
</span><span class="c1"></span>    <span class="k">return</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">delay</span><span class="p">])</span>
  <span class="k">return</span> <span class="nx">newValue</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"> <span class="kr">const</span> <span class="nx">debounceParam</span><span class="o">=</span> <span class="nx">useDebounce</span><span class="p">(</span><span class="nx">param</span><span class="p">,</span><span class="mi">1000</span><span class="p">)</span>
<span class="c1">//当用户输入关键词或选择select框，param变化
</span><span class="c1"></span>  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://localhost:3000/projects?</span><span class="si">${</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">cleanObject</span><span class="p">(</span><span class="nx">debounceParam</span><span class="p">))</span><span class="si">}</span><span class="sb">`</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kr">async</span> <span class="nx">response</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">setList</span><span class="p">(</span><span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">debounceParam</span><span class="p">])</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item><item>
    <title>react&#43;ts</title>
    <link>http://example.org/posts/react&#43;ts/</link>
    <pubDate>Sat, 21 Aug 2021 10:42:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/react&#43;ts/</guid>
    <description><![CDATA[<h1 id="初始化与配置">初始化与配置</h1>
<h2 id="初始化reactts项目">初始化react+ts项目</h2>
<p>create-react-app xxx &ndash;template typescript</p>
<h2 id="规范配置">规范配置</h2>
<ol>
<li>
<p>在引入文件时直接使用根路径：在tsconfig.json中配置baseUrl为'./src'</p>
</li>
<li>
<p>prettier配置代码自动格式化：https://prettier.io/</p>
<ul>
<li>
<p>npm install &ndash;save-dev &ndash;save-exact prettier</p>
</li>
<li>
<p>新建.prettierrc.json</p>
</li>
<li>
<p>新建.prettierignore，忽略build，coverage</p>
</li>
<li>
<p>为了在commit之前自动格式化：npx mrm lint-staged，package.json中配置扩展名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;husky&#34;</span><span class="err">:</span> <span class="p">{</span>
  <span class="nt">&#34;hooks&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;pre-commit&#34;</span><span class="p">:</span> <span class="s2">&#34;lint-staged&#34;</span>
  <span class="p">}</span>
<span class="p">}</span><span class="err">,</span>
<span class="s2">&#34;lint-staged&#34;</span><span class="err">:</span> <span class="p">{</span>
  <span class="nt">&#34;*.{js,css,md,ts,tsx}&#34;</span><span class="p">:</span> <span class="s2">&#34;prettier --write&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>为了避免和eslint冲突</p>
<p>npm install eslint-config-prettier -D</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json">  <span class="s2">&#34;eslintConfig&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;extends&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">&#34;react-app&#34;</span><span class="p">,</span>
      <span class="s2">&#34;react-app/jest&#34;</span><span class="p">,</span>
      <span class="s2">&#34;prettier&#34;</span>
    <span class="p">]</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>commit提交规范：commitlint</p>
</li>
</ol>
<h2 id="mock方案配置">MOCK方案配置</h2>
<ul>
<li>
<p>npm install json-server -g</p>
</li>
<li>
<p>npm install json-server -D</p>
</li>
<li>
<p>script中配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"> <span class="s2">&#34;json-server&#34;</span><span class="err">:</span><span class="s2">&#34;json-server __json_server_mock__/db.json --watch&#34;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="project-list">project-list</h1>
<ul>
<li>
<p>状态提升</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">qs</span> <span class="nx">from</span> <span class="s1">&#39;qs&#39;</span>

<span class="kr">import</span> <span class="p">{</span><span class="nx">SearchPanel</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./search-panel&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">List</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./list&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;react&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">cleanObject</span><span class="p">,</span><span class="nx">useDebounce</span><span class="p">,</span><span class="nx">useMount</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;../../utils&#34;</span><span class="p">;</span>

<span class="kr">export</span> <span class="kr">const</span> <span class="nx">ProjectListScreen</span><span class="o">=</span><span class="p">()=&gt;{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">users</span><span class="p">,</span> <span class="nx">setUsers</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([])</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">param</span><span class="p">,</span> <span class="nx">setParam</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">({</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
    <span class="nx">personId</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
  <span class="p">})</span>
  <span class="kr">const</span> <span class="nx">debounceParam</span><span class="o">=</span> <span class="nx">useDebounce</span><span class="p">(</span><span class="nx">param</span><span class="p">,</span><span class="mi">1000</span><span class="p">)</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">list</span><span class="p">,</span> <span class="nx">setList</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([])</span>
  <span class="c1">//当用户输入关键词或选择select框，param变化
</span><span class="c1"></span>  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://localhost:3000/projects?</span><span class="si">${</span><span class="nx">qs</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">cleanObject</span><span class="p">(</span><span class="nx">debounceParam</span><span class="p">))</span><span class="si">}</span><span class="sb">`</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kr">async</span> <span class="nx">response</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">setList</span><span class="p">(</span><span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">debounceParam</span><span class="p">])</span>

  <span class="nx">useMount</span><span class="p">(()=&gt;{</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/users&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kr">async</span> <span class="nx">response</span><span class="p">=&gt;{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">){</span>
        <span class="nx">setUsers</span><span class="p">(</span><span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">SearchPanel</span> <span class="na">param</span><span class="o">=</span><span class="p">{</span><span class="nx">param</span><span class="p">}</span> <span class="na">users</span><span class="o">=</span><span class="p">{</span><span class="nx">users</span><span class="p">}</span> <span class="na">setParam</span><span class="o">=</span><span class="p">{</span><span class="nx">setParam</span><span class="p">}/&gt;</span>
    <span class="p">&lt;</span><span class="nt">List</span> <span class="na">list</span><span class="o">=</span><span class="p">{</span><span class="nx">list</span><span class="p">}</span> <span class="na">users</span><span class="o">=</span><span class="p">{</span><span class="nx">users</span><span class="p">}/&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>hooks</p>
</li>
<li>
<p>clearObject</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">isFalsy</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="o">!</span><span class="nx">value</span><span class="p">);</span>
<span class="c1">//在一个函数中，改变传入的对象本身是不好的
</span><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">cleanObject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">object</span> <span class="p">};</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">key</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isFalsy</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">delete</span> <span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="customhooks">customhooks</h1>
<ul>
<li>
<p>useMount</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">export const useMount = (callback) =&gt; {
  useEffect(() =&gt; {
    callback();
  }, []);
};
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>useDebounce</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">useDebounce</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="p">[</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">setNewValue</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">//每次在value变化以后，设置一个定时器
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">setNewValue</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
    <span class="c1">//每次在上一个useEffect处理完以后再运行，第一个effect的timer被第二个effect清理，最后一个无人清理
</span><span class="c1"></span>    <span class="k">return</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">delay</span><span class="p">]);</span>
  <span class="k">return</span> <span class="nx">newValue</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>more in reacthooks_learn</p>
</li>
</ul>
<h1 id="ts">ts</h1>
<ul>
<li>more in typescript_learn</li>
</ul>
]]></description>
</item><item>
    <title>react</title>
    <link>http://example.org/posts/react/</link>
    <pubDate>Sun, 15 Aug 2021 10:42:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/react/</guid>
    <description><![CDATA[<h1 id="react入门">React入门</h1>
<h2 id="相关js库">相关js库</h2>
<p>1.react.js：React核心库</p>
<p>2.react-dom.js：提供操作DOM的react扩展库</p>
<p>3.babel.min.js：解析JSX语法代码转为JS代码库</p>
<p>4.prop-types.js：用于对组件标签属性进行限制</p>
<h2 id="创建虚拟dom的两种方式">创建虚拟DOM的两种方式</h2>
<h3 id="使用jsx创建虚拟dom">使用jsx创建虚拟DOM</h3>
<ul>
<li>不写引号，直接写标签</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/babel&#34;</span><span class="p">&gt;</span>
  <span class="c1">//1. 创建虚拟dom
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">VDOM</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;title&#34;</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span><span class="nx">React</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
  <span class="c1">//2. 渲染虚拟dom到页面
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">VDOM</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="使用js创建虚拟dom">使用js创建虚拟DOM</h3>
<ul>
<li>React.createElement（标签名，标签属性，标签内容），==一般不用====，因为嵌套过于麻烦==</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
  <span class="c1">//1. 创建虚拟dom
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">VDOM</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">,{</span><span class="nx">id</span><span class="o">:</span><span class="s1">&#39;title&#39;</span><span class="p">},</span><span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">,{},</span><span class="s1">&#39;内容&#39;</span><span class="p">))</span>
  <span class="c1">//2. 渲染虚拟dom到页面
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">VDOM</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="关于虚拟dom">关于虚拟DOM</h2>
<ol>
<li>本质是Object类型的对象</li>
<li>虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上的那么多属性</li>
<li>虚拟DOM最终会被React转为真实DOM，呈现在页面上</li>
</ol>
<h2 id="jsx语法规则">JSX语法规则</h2>
<ol>
<li>定于虚拟DOM，不用写引号</li>
<li>标签中混入JS表达式时要用{}</li>
<li>样式的类名指定不要用class，要用className</li>
<li>内联样式要用style={{key:value}}的形式去写</li>
<li>只有一个根标签</li>
<li>标签必须闭合</li>
<li>标签首字符
<ul>
<li>若小写字母开头，则将标签改为html中同名的元素，若html中没有改标签对应的同名元素，则报错</li>
<li>若大写字母开头，react会去渲染对应的组件，若组件没有定义，则报错</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Angular&#39;</span><span class="p">,</span> <span class="s1">&#39;React&#39;</span><span class="p">,</span> <span class="s1">&#39;Vue&#39;</span><span class="p">]</span>
  <span class="c1">//1. 创建虚拟dom
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">VDOM</span> <span class="o">=</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span><span class="nx">React</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="p">{</span>
            <span class="c1">// map会有返回值，foreach会修改原来的数组
</span><span class="c1"></span>          <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
          <span class="p">})</span>
        <span class="p">}</span>
      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
    <span class="o">&lt;</span><span class="err">/div&gt;</span>
  <span class="p">)</span>
  <span class="c1">//2. 渲染虚拟dom到页面
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">VDOM</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="js表达式与js语句">JS表达式与JS语句</h2>
<h3 id="表达式">表达式</h3>
<p>一个表达式会产生一个值，可以放在任何一个需要值得地方</p>
<ul>
<li>a</li>
<li>a+b</li>
<li>demo(1)</li>
<li>arr.map()</li>
<li>function test(){}</li>
</ul>
<h3 id="语句代码">语句(代码)</h3>
<ul>
<li>if(){}</li>
<li>for(){}</li>
<li>switch(){case:xxxx}</li>
</ul>
<h1 id="react面向组件编程">React面向组件编程</h1>
<h2 id="模块与组件">模块与组件</h2>
<h3 id="模块">模块</h3>
<ol>
<li>
<p>理解：向外提供特定功能的js程序, 一般就是一个js文件</p>
</li>
<li>
<p>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p>
</li>
<li>
<p>作用：复用js, 简化js的编写, 提高js运行效率</p>
</li>
</ol>
<h3 id="组件">组件</h3>
<ol>
<li>
<p>理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</p>
</li>
<li>
<p>为什么要用组件： 一个界面的功能更复杂</p>
</li>
<li>
<p>作用：复用编码, 简化项目编码, 提高运行效率</p>
</li>
</ol>
<h2 id="模块化与组件化">模块化与组件化</h2>
<h3 id="模块化">模块化</h3>
<p>当应用的js都以模块来编写，这个应用就是一个模块化的应用</p>
<h3 id="组件化">组件化</h3>
<p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p>
<h2 id="react中定义组件">React中定义组件</h2>
<h3 id="函数式组件">函数式组件</h3>
<ol>
<li>声名函数，函数名首字母大写</li>
<li>返回JSX</li>
<li>render中渲染组件<Demo/></li>
</ol>
<p>==注意==：函数组件中的this为undefined，因为babel编译后开启了严格模式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">//1.声名函数式组件
</span><span class="c1"></span>  <span class="kd">function</span> <span class="nx">Demo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="c1">//undefined(babel编译后开启了严格模式)
</span><span class="c1"></span>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">我是用函数定义的组件</span><span class="err">（</span><span class="nx">适用于简单组件的定义</span><span class="err">）</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
      <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
    <span class="o">&lt;</span><span class="err">/div&gt;</span>
  <span class="p">}</span>

  <span class="c1">//2.渲染组件
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
  <span class="c1">// 执行了ReactDOM.render()
</span><span class="c1"></span>  <span class="c1">//   1.React解析组件标签，找到了MyComponent组件
</span><span class="c1"></span>  <span class="c1">//   2.发现组件是使用函数定义的，随后调用了函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="类式组件">类式组件</h3>
<ol>
<li>继承自React.Component</li>
<li>render中的this执向组件实例对象,不再是babel解析后的undefined</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="c1">//创建类式组件
</span><span class="c1"></span>  <span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="c1">//render中的this？--MyComponent的实例对象
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
      <span class="c1">//render是放在哪里的？--MyComponent的原型对象上，供实例使用
</span><span class="c1"></span>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">我是用类定义的组件</span><span class="err">（</span><span class="nx">适用于复杂组件的定义</span><span class="err">）</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
  <span class="cm">/*
</span><span class="cm">  * 执行了ReactDOM.render(&lt;MyComponent/&gt;)之后，发生了什么
</span><span class="cm">  * 1.React解析组件标签，找到Component组件
</span><span class="cm">  * 2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法
</span><span class="cm">  * 3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中
</span><span class="cm">  * */</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="组件实例的三大属性">组件实例的三大属性</h2>
<h3 id="state">state</h3>
<ol>
<li>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</li>
<li>组件被称为&quot;状态机&quot;, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li>
<li>在state被修改时会调用render</li>
</ol>
<p>==注意==：</p>
<ol>
<li>
<p>组件中render方法中的this为组件实例对象</p>
</li>
<li>
<p>组件自定义的方法中this为undefined，如何解决？</p>
<ul>
<li>
<p>强制绑定this: 通过函数对象的bind()</p>
</li>
<li>
<p>赋值语句+箭头函数（开发常用）</p>
</li>
</ul>
</li>
<li>
<p>状态数据，不能直接修改或更新</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
      <span class="c1">// 初始化状态
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="c1">// 使用
</span><span class="c1"></span>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="获取state中的值">获取state中的值</h4>
<h5 id="类中方法中的this">类中方法中的this</h5>
<ol>
<li>类中定义的方法会自动开启==局部严格模式==</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Student</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span>
    <span class="p">}</span>
    <span class="nx">say</span><span class="p">(){</span>
      <span class="c1">// 默认use strict
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s1">&#39;xqz&#39;</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
  <span class="nx">s1</span><span class="p">.</span><span class="nx">say</span><span class="p">()</span> <span class="c1">//this指向Student实例
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">say</span> <span class="o">=</span> <span class="nx">s1</span><span class="p">.</span><span class="nx">say</span>
  <span class="nx">say</span><span class="p">()</span> <span class="c1">//this为undefined
</span><span class="c1"></span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="react组件类中的this">React组件类中的this</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
    <span class="p">}</span>

    <span class="nx">changeWeather</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 只要通过weather的实例对象去调用了changeWeather，那么this就是实例对象
</span><span class="c1"></span>      <span class="c1">// 由于changeWeather是作为onClick的回调， 不是通过实例调用的，是直接调用
</span><span class="c1"></span>      <span class="c1">// 类中的方法开启了局部的严格模式，所以this为undefined
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>

<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="如何解决">如何解决</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
        <span class="c1">// this.changeWeather是原型上的方法，通过bind，将this指向实例
</span><span class="c1"></span>        <span class="c1">// demo为实例上的方法，就是把原型上的changeWeather方法复刻一份，修改this后添加到实例身上,相当于重写
</span><span class="c1"></span>      	<span class="c1">// 在render方法中调用的是实例身上的方法
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
    <span class="p">}</span>

    <span class="nx">changeWeather</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>

<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="修改state中的值">修改state中的值</h4>
<p>React.Component.prototype中有setState方法，通过组件实例.proto-&gt;组件类.prototype-&gt;React.Component父类的prototype中寻找到</p>
<ol>
<li>constructor调用一次</li>
<li>render调用多次</li>
<li>changeWeather点几次调用几次</li>
</ol>
<p>==注意==：</p>
<ol>
<li>this必须在调用了super之后才有</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
    <span class="p">}</span>

    <span class="nx">changeWeather</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="c1">//注意：状态不可直接更改，要借助内置API
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">isHot</span><span class="o">:!</span><span class="nx">isHot</span><span class="p">})</span>
      <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="state的简写形式">state的简写形式</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="c1">// 此时state在每一个实例自身
</span><span class="c1"></span>    <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">isHot</span><span class="o">:</span> <span class="kc">false</span><span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span> <span class="o">?</span> <span class="s1">&#39;炎热&#39;</span> <span class="o">:</span> <span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
    <span class="p">}</span>

    <span class="c1">// 此时方法和state一样，用赋值语句，成了实例自身的一个属性，用箭头函数，this指向Weather实例，否则普通函数this为undefined。如果不用赋值语句，那么函数是在原型上的
</span><span class="c1"></span>    <span class="nx">changeWeather</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">isHot</span><span class="o">:</span> <span class="o">!</span><span class="nx">isHot</span><span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>

<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="props">props</h3>
<h4 id="props的基本使用">props的基本使用</h4>
<p>组件实例上有props属性</p>
<p>==注意==：</p>
<ol>
<li>props是只读的，修改会报错</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">render</span><span class="p">(){</span>
        <span class="c1">//获取值
</span><span class="c1"></span>      <span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">,</span><span class="nx">sex</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">姓名</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">性别</span><span class="o">:</span><span class="p">{</span><span class="nx">age</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">年龄</span><span class="o">:</span><span class="p">{</span><span class="nx">sex</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">//传值
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Person</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;xqz&#34;</span> <span class="nx">age</span><span class="o">=</span><span class="s2">&#34;20&#34;</span> <span class="nx">sex</span><span class="o">=</span><span class="s2">&#34;man&#34;</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="props批量传递">props批量传递</h4>
<p>使用扩展运算符传递</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">,</span><span class="nx">sex</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">姓名</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">性别</span><span class="o">:</span><span class="p">{</span><span class="nx">age</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">年龄</span><span class="o">:</span><span class="p">{</span><span class="nx">sex</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kr">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;老刘&#39;</span><span class="p">,</span><span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span><span class="nx">sex</span><span class="o">:</span><span class="s1">&#39;女&#39;</span><span class="p">}</span>
  <span class="c1">//这里的...p并不是复制对象，原生中不能用展开运算符操作对象，但是这里有react.development.js和babel所以可以，但是不能随意使用，仅仅适用于标签属性的传递，这里的{}只是代表里面要写js表达式
</span><span class="c1"></span>  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Person</span> <span class="p">{...</span><span class="nx">p</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="对props进行限制">对props进行限制</h4>
<ol>
<li>
<p>组件类的proTypes属性（react模块里的要求）：对标签属性进行类型，必要性的限制</p>
</li>
<li>
<p>PropTypes是因为引入了prop-types.js模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 对标签属性进行类型，必要性的限制
</span><span class="c1"></span><span class="nx">Person</span><span class="p">.</span><span class="nx">propTypes</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span> <span class="c1">//限制name必传，且为字符串
</span><span class="c1"></span>  <span class="nx">sex</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
  <span class="nx">speak</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span> <span class="c1">//限制speak为function
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>组件类的defaultProps属性：指定默认标签属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 指定默认标签属性
</span><span class="c1"></span><span class="nx">Person</span><span class="p">.</span><span class="nx">defaultProps</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">sex</span><span class="o">:</span><span class="s1">&#39;不男不女&#39;</span><span class="p">,</span>
  <span class="nx">age</span><span class="o">:</span><span class="mi">18</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用组件时传递</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;老刘&#39;</span><span class="p">,</span><span class="nx">age</span><span class="o">:</span><span class="mi">18</span><span class="p">}</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Person</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;xqz&#34;</span> <span class="nx">age</span><span class="o">=</span><span class="p">{</span><span class="mi">19</span><span class="p">}</span> <span class="nx">sex</span><span class="o">=</span><span class="s2">&#34;man&#34;</span> <span class="nx">speak</span><span class="o">=</span><span class="p">{</span><span class="nx">speak</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test2&#39;</span><span class="p">))</span>
<span class="kd">function</span> <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="props简写">props简写</h4>
<p>将propTypes和defaultProps设置为组件类的静态属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
  <span class="c1">// 对标签属性进行类型，必要性的限制
</span><span class="c1"></span>  <span class="kr">static</span> <span class="nx">propTypes</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span> 
    <span class="nx">sex</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
    <span class="nx">speak</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span> 
  <span class="p">}</span>
  <span class="c1">// 指定默认标签属性
</span><span class="c1"></span>  <span class="kr">static</span> <span class="nx">defaultProps</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">sex</span><span class="o">:</span><span class="s1">&#39;不男不女&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span><span class="mi">18</span>
  <span class="p">}</span>
  <span class="nx">render</span><span class="p">(){</span>
    <span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">,</span><span class="nx">sex</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span>
    <span class="c1">// this.props.name = &#39;xqz&#39; //报错，因为props是只读的
</span><span class="c1"></span>    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">姓名</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">性别</span><span class="o">:</span><span class="p">{</span><span class="nx">age</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">年龄</span><span class="o">:</span><span class="p">{</span><span class="nx">sex</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="函数式组件使用props">函数式组件使用props</h4>
<ol>
<li>组件传递方式不变，通过参数接收</li>
<li>对props的限制和默认值只能写在函数外面</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
  <span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span><span class="nx">age</span><span class="p">,</span><span class="nx">sex</span><span class="p">}</span> <span class="o">=</span> <span class="nx">props</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">姓名</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">性别</span><span class="o">:</span><span class="p">{</span><span class="nx">age</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">年龄</span><span class="o">:</span><span class="p">{</span><span class="nx">sex</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
    <span class="o">&lt;</span><span class="err">/ul&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
  <span class="c1">// 对标签属性进行类型，必要性的限制
</span><span class="c1"></span>  <span class="nx">Person</span><span class="p">.</span><span class="nx">propTypes</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
    <span class="nx">sex</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
  <span class="p">}</span>
  <span class="c1">// 指定默认标签属性
</span><span class="c1"></span>  <span class="nx">Person</span><span class="p">.</span><span class="nx">defaultProps</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">sex</span><span class="o">:</span><span class="s1">&#39;不男不女&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span><span class="mi">18</span>
  <span class="p">}</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Person</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&#34;xqz&#34;</span> <span class="nx">age</span><span class="o">=</span><span class="p">{</span><span class="mi">19</span><span class="p">}</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test2&#39;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="refs与事件处理">refs与事件处理</h3>
<h4 id="string类型的ref已过时">string类型的ref（已过时）</h4>
<ol>
<li>直接在标签上定义ref，通过this.refs使用</li>
<li>会有效率问题，已经过时</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">showData</span><span class="o">=</span><span class="p">()=&gt;{</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">input1</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input1</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">showData2</span><span class="o">=</span><span class="p">()=&gt;{</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">input2</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">refs</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input2</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&#34;input1&#34;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&#34;点击提示&#34;</span><span class="o">/&gt;</span>
          <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">点击</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
          <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&#34;input2&#34;</span> <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData2</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&#34;失去焦点提示&#34;</span><span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="err">/div&gt;</span>
      <span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="回调函数形式的refs">回调函数形式的refs</h4>
<h5 id="内联的写法开发常用">内联的写法（开发常用）</h5>
<p>在更新时，ref的回调会调用两次，但是其实并没有什么影响</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">showData</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">input1</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input1</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">showData2</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">input2</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input2</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                    <span class="c1">// 这里的回调函数会传一个参数，参数为dom节点，this执向实例，在实例中添加属性input1，值为它的dom节点
</span><span class="c1"></span>                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">c</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">input1</span> <span class="o">=</span> <span class="nx">c</span><span class="p">}</span>  <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">点击</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">c</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">input2</span> <span class="o">=</span> <span class="nx">c</span><span class="p">}</span> <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData2</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="class绑定的函数形式">class绑定的函数形式</h5>
<p>在更新时，ref的函数不会回调</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>

            <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">true</span><span class="p">}</span>
            <span class="nx">showData</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">input</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">changeWeather</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">isHot</span><span class="o">:!</span><span class="nx">isHot</span><span class="p">})</span>
            <span class="p">}</span>
            <span class="c1">//回调的函数
</span><span class="c1"></span>            <span class="nx">saveInput</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">)=&gt;{</span>
                  <span class="c1">//这里其实用onChange事件然后e.target也可以获取，然后存入state中，就是受控组件了
</span><span class="c1"></span>                <span class="k">this</span><span class="p">.</span><span class="nx">input</span> <span class="o">=</span> <span class="nx">c</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">今天天气</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
                        <span class="c1">// 这里更新时不会回调两次
</span><span class="c1"></span>                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">saveInput</span> <span class="p">}</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">showData</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">显示</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeWeather</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">改变天气</span><span class="o">&lt;</span><span class="err">/button&gt;    </span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="createref的使用">createRef的使用</h4>
<ol>
<li>React.createRef()创建容器，每个容器只能存放一个节点</li>
<li>通过this.容器名.current获得dom节点</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">myRef</span><span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createRef</span><span class="p">()</span>
            <span class="nx">show</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">myRef</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">show</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">按钮</span><span class="o">&lt;</span><span class="err">/button&gt;    </span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>不能滥用ref，如果需要获取的dom节点上绑定了事件处理函数，那么可以从函数中获取event.target</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">show</span><span class="o">=</span><span class="p">(</span><span class="nx">event</span><span class="p">)=&gt;{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">show</span><span class="p">}</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;失去焦点提示&#39;</span><span class="o">/&gt;</span>    
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="组件通信">组件通信</h2>
<p>==注意==：状态在哪里，操作状态的方法就在哪里</p>
<h3 id="父传子">父传子</h3>
<p></p>
<h3 id="子传父">子传父</h3>
<ol>
<li>
<p>父组件向子组件传递一个函数</p>
<p></p>
</li>
<li>
<p>子组件调用该函数并传参，父组件将该函数的参数保存到state中</p>
<p></p>
</li>
</ol>
<h3 id="爷孙传值">爷孙传值</h3>
<ol>
<li>爷爷组件向父组件传递函数</li>
<li>父组件将函数继续传递给子组件</li>
<li>子组件调用函数，传参，爷爷组件通过参数接收值</li>
</ol>
<h3 id="兄弟传值">兄弟传值</h3>
<h4 id="消息订阅-发布机制">消息订阅-发布机制</h4>
<ol>
<li>
<p>工具库: PubSubJS</p>
</li>
<li>
<p>下载: npm install pubsub-js &ndash;save</p>
</li>
<li>
<p>使用:</p>
<ol>
<li>
<p>import PubSub from &lsquo;pubsub-js&rsquo; //引入</p>
</li>
<li>
<p>PubSub.subscribe(&lsquo;delete&rsquo;, function(data){ }); //订阅</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//订阅消息
</span><span class="c1"></span>        <span class="nx">PubSub</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;changeState&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">stateObj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">stateObj</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>PubSub.publish(&lsquo;delete&rsquo;, data) //发布消息</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">search</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="p">{</span> <span class="nx">input1</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">keyword</span> <span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
        <span class="c1">//发布消息
</span><span class="c1"></span>        <span class="nx">PubSub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;changeState&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">isFirst</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="sb">`https://api.github.com/search/users?q=</span><span class="si">${</span><span class="nx">keyword</span><span class="si">}</span><span class="sb">`</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">PubSub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;changeState&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span><span class="nx">users</span><span class="o">:</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">items</span> <span class="p">})</span>
        <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">PubSub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;changeState&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">err</span> <span class="p">})</span>
        <span class="p">})</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="react中的构造器">React中的构造器</h2>
<ol>
<li>第一个用处，通过this.state赋值对象来初始化内部state，但是一般直接在类中使用赋值语句</li>
<li>第二个用处，为事件绑定实例的this，但是一般用赋值语句+箭头函数解决</li>
<li>第三个用处，需要在constructor中获取props。所以，constructor基本不用，如果用了必须写super(props)，且必须传props，不传就不能在构造器中使用this.props获取值</li>
</ol>
<h2 id="react中的事件绑定">React中的事件绑定</h2>
<ol>
<li>驼峰命名</li>
<li>{}中写函数名，不需要调用</li>
<li>可以将事件函数写在组件类中，通过赋值语句+箭头函数，箭头函数中的this指向实例，可以获取state中的值</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Weather</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span><span class="nx">isHot</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span>
    <span class="p">}</span>
      <span class="c1">// 事件函数
</span><span class="c1"></span>    <span class="nx">demo2</span><span class="o">=</span><span class="p">()=&gt;{</span>
        <span class="nx">log</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
      <span class="kr">const</span> <span class="p">{</span><span class="nx">isHot</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
      
      <span class="k">return</span> 
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
            <span class="c1">// 绑定事件
</span><span class="c1"></span>        <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">demo</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
        	<span class="c1">// 绑定事件
</span><span class="c1"></span>        <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">demo2</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">今天天气很</span><span class="p">{</span><span class="nx">isHot</span><span class="o">?</span><span class="s1">&#39;炎热&#39;</span><span class="o">:</span><span class="s1">&#39;凉爽&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
        <span class="o">&lt;</span><span class="err">/div&gt;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Weather</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
  <span class="c1">// 事件函数
</span><span class="c1"></span>  <span class="kd">function</span> <span class="nx">demo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;标题被点击了&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="react中的事件处理">React中的事件处理</h2>
<ol>
<li>
<p>可以通过参数拿到当前的dom节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Demo</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">show</span><span class="o">=</span><span class="p">(</span><span class="nx">event</span><span class="p">)=&gt;{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span> <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">show</span><span class="p">}</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;失去焦点提示&#39;</span><span class="o">/&gt;</span>    
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="非受控组件">非受控组件</h2>
<ol>
<li>表单中所有输入类的值是现用现取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Login</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">handleSubmit</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
                <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">username</span><span class="p">,</span><span class="nx">password</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">username</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">password</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="c1">// 在点击提交时才获取到表单中的值
</span><span class="c1"></span>                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="nx">用户名</span><span class="err">：</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">c</span><span class="p">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">username</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="nx">密码</span><span class="err">：</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">c</span><span class="p">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">password</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">提交</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                    <span class="o">&lt;</span><span class="err">/form&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Login</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="受控组件推荐">受控组件（推荐）</h2>
<ol>
<li>输入类的表单，在输入时就将值存入state中，等哪里需要使用时直接从state中去获取，相当于vue的双向数据绑定</li>
<li>可以避免ref的滥用</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Login</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                <span class="nx">username</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
                <span class="nx">password</span><span class="o">:</span><span class="s1">&#39;&#39;</span>
            <span class="p">}</span>
        <span class="c1">// 将获取的数据保存到state中
</span><span class="c1"></span>            <span class="nx">savePassword</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">username</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">})</span>
            <span class="p">}</span>
            <span class="nx">saveUsername</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">password</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">})</span>
            <span class="p">}</span>
            <span class="nx">submit</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="p">)=&gt;{</span>
                <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
                <span class="c1">// 在需要使用时从state中去获取数据
</span><span class="c1"></span>                <span class="kr">const</span> <span class="p">{</span><span class="nx">username</span><span class="p">,</span><span class="nx">password</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`用户名</span><span class="si">${</span><span class="nx">username</span><span class="si">}</span><span class="sb">,密码</span><span class="si">${</span><span class="nx">password</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="k">return</span> <span class="p">(</span>
                   <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">submit</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="c1">// 输入的数据通过当前的event.target获取
</span><span class="c1"></span>                        <span class="nx">用户名</span><span class="err">：</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">saveUsername</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="nx">密码</span><span class="err">：</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">savePassword</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&#34;text&#34;</span><span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">登录</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                    <span class="o">&lt;</span><span class="err">/form&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Login</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="柯里化">柯里化</h2>
<p></p>
<h2 id="生命周期">生命周期</h2>
<p>引出生命周期</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Life</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                <span class="nx">opacity</span><span class="o">:</span><span class="p">.</span><span class="mi">5</span>
            <span class="p">}</span>
            <span class="c1">// 卸载组件
</span><span class="c1"></span>            <span class="nx">death</span><span class="o">=</span><span class="p">()=&gt;{</span>
                    <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unmountComponentAtNode</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
            <span class="p">}</span>
            <span class="c1">//挂载组件
</span><span class="c1"></span>            <span class="nx">componentDidMount</span><span class="p">(){</span>
                <span class="kd">let</span> <span class="p">{</span><span class="nx">opacity</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">timer</span><span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()=&gt;{</span>
                    <span class="nx">opacity</span> <span class="o">-=</span> <span class="mf">0.1</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">opacity</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span>
                        <span class="nx">opacity</span><span class="o">=</span><span class="mi">1</span>
                    <span class="p">}</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">opacity</span><span class="p">})</span>
                <span class="p">},</span><span class="mi">200</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="c1">//卸载组件前
</span><span class="c1"></span>            <span class="nx">componentWillUnmount</span><span class="p">(){</span>
                <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">timer</span><span class="p">)</span>
            <span class="p">}</span>
        	<span class="c1">//初始化渲染，页面更新之后
</span><span class="c1"></span>            <span class="nx">render</span><span class="p">(){</span>
                
                <span class="kr">const</span> <span class="p">{</span><span class="nx">opacity</span><span class="p">}</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">style</span><span class="o">=</span><span class="p">{{</span><span class="nx">opacity</span><span class="p">}}</span><span class="o">&gt;</span><span class="nx">生命周期</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">death</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">卸载组件</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Life</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="生命周期旧">生命周期（旧）</h3>
<ol>
<li>初始化阶段：由ReactDOM.render()触发&mdash;-初次渲染
<ul>
<li>constructor()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDIdMount()
<ul>
<li>一般做一些初始化的事，如：开启定时器，发送网络请求，订阅消息</li>
</ul>
</li>
</ul>
</li>
<li>更新阶段：由组件内部的this.setState()或父组件重新render()触发
<ul>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
</li>
<li>卸载组件：由ReactDOM.unmountComponentAtNode()触发
<ul>
<li>componentWillUnmount()
<ul>
<li>一般做一些收尾的事，如：关闭定时器，取消订阅消息</li>
</ul>
</li>
</ul>
</li>
</ol>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Life</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="c1">//1 构造器
</span><span class="c1"></span>            <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
                <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---constructor&#39;</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                    <span class="nx">count</span><span class="o">:</span><span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">//2 挂载前
</span><span class="c1"></span>            <span class="nx">componentWillMount</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---componentWillMount&#39;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">add</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="c1">// 这里会走5-6-7
</span><span class="c1"></span>                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span><span class="nx">count</span><span class="o">+</span><span class="mi">1</span><span class="p">})</span>
            <span class="p">}</span>
            <span class="nx">update</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="c1">// 这里会走6-7
</span><span class="c1"></span>                <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="nx">death</span><span class="o">=</span><span class="p">()=&gt;{</span>
                <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unmountComponentAtNode</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
            <span class="p">}</span>
            <span class="c1">//5 在setState后掉用，如果返回true则继续执行render，否则不更新页面，相当于一个阀门，用forceUpdate能直接绕过这个阀门
</span><span class="c1"></span>            <span class="nx">shouldComponentUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---shouldComponentUpdate&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
            <span class="c1">//6 将要更新
</span><span class="c1"></span>            <span class="nx">componentWillUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---componentWillUpdate&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c1">//3 初始化 7 更新
</span><span class="c1"></span>            <span class="nx">render</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---render&#39;</span><span class="p">);</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">数字</span><span class="err">：</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">加1</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
        			   <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">强制更新</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">death</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">卸载</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
            <span class="c1">//4 挂载完
</span><span class="c1"></span>            <span class="nx">componentDidMount</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---componentDidMount&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c1">//8 更新完
</span><span class="c1"></span>            <span class="nx">componentDidUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---componentDidUpdate&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c1">//9 卸载前
</span><span class="c1"></span>            <span class="nx">componentWillUnmount</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Life---componentWillUnmount&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Life</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="父组件的生命周期旧">父组件的生命周期(旧)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                    <span class="nx">carName</span><span class="o">:</span><span class="s1">&#39;奥迪&#39;</span>
                <span class="p">}</span>
                <span class="nx">changeCar</span><span class="o">=</span><span class="p">()=&gt;{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">carName</span><span class="o">:</span><span class="s1">&#39;宝马&#39;</span><span class="p">})</span>
                <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">carName</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Son</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeCar</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">换车</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
        			<span class="c1">// 给父组件传属性
</span><span class="c1"></span>                        <span class="o">&lt;</span><span class="nx">Father</span> <span class="nx">carName</span><span class="o">=</span><span class="p">{</span><span class="nx">carName</span><span class="p">}</span><span class="o">/&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kr">class</span> <span class="nx">Father</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="c1">//接收newProps时调用，第一次发送来的属性不会调用该钩子
</span><span class="c1"></span>            <span class="nx">componentWillReceiveProps</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;componentWillReceiveProps&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">shouldComponentUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shouldComponentUpdate&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
            <span class="nx">componentWillUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;componentWillUpdate&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;render&#39;</span><span class="p">);</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Father</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">carName</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">componentDidUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;componentDidUpdate&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Son</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="生命周期新">生命周期（新）</h3>
<ol>
<li>即将废弃3个will的生命周期钩子</li>
<li>增加两个get生命周期钩子</li>
</ol>
<p></p>
<ul>
<li>getDerivedStateFormProps(props,state)
<ol>
<li>props：传入的属性</li>
<li>state：当前的state</li>
<li>如果state需要派生自props，则返回props</li>
<li>==注意==：派生的state将无法更新，所以在==state的值完全取决于props时才使用该钩子==，或者在构造器中将props给state也可以</li>
</ol>
</li>
<li>getSnapshotBeforeUpdate(preprops，prestate)
<ol>
<li>preprops：传入新props之前的props</li>
<li>prestate：更新之前的state</li>
<li>返回值为componentDidUpdate的第三个参数</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                    <span class="nx">carName</span><span class="o">:</span><span class="s1">&#39;奥迪&#39;</span>
                <span class="p">}</span>
                <span class="nx">changeCar</span><span class="o">=</span><span class="p">()=&gt;{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">carName</span><span class="o">:</span><span class="s1">&#39;宝马&#39;</span><span class="p">})</span>
                <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">carName</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Son</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeCar</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">换车</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
                        <span class="o">&lt;</span><span class="nx">Father</span> <span class="nx">carName</span><span class="o">=</span><span class="p">{</span><span class="nx">carName</span><span class="p">}</span><span class="o">/&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kr">class</span> <span class="nx">Father</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;xj&#39;</span>
            <span class="p">}</span>
        <span class="c1">//getDerivedStateFromProps是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的Props以及prevState来进行判断，根据新传入的props来映射到state。需要注意的是，如果props传入的内容不需要影响到你的state，那么就需要返回一个null，这个返回值是必须的，所以尽量将其写到函数的末尾。
</span><span class="c1"></span>
            <span class="kr">static</span> <span class="nx">getDerivedStateFromProps</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span><span class="nx">state</span><span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;getDerivedStateFromProps&#39;</span><span class="p">,</span><span class="nx">props</span><span class="p">,</span><span class="nx">state</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">null</span>
            <span class="p">}</span>
  
            <span class="nx">shouldComponentUpdate</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;shouldComponentUpdate&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
            <span class="cm">/* 在最近一次渲染输出（提交到DOM节点）之前调用。
</span><span class="cm">             它使得组件能在发生更改之前从DOM中捕获一些信息，比如列表的高度等。
</span><span class="cm">            此生命周期的任何返回值将作为第三个参数传递给componentDidUpdate()*/</span>
            <span class="nx">getSnapshotBeforeUpdate</span><span class="p">(</span><span class="nx">preProps</span><span class="p">,</span><span class="nx">preState</span><span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;getSnapshotBeforeUpdate&#39;</span><span class="p">,</span><span class="nx">preProps</span><span class="p">,</span><span class="nx">preState</span><span class="p">);</span>
                <span class="k">return</span> <span class="s1">&#39;xqz&#39;</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;render&#39;</span><span class="p">);</span>
                <span class="k">return</span><span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Father</span><span class="o">:</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">carName</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">componentDidUpdate</span><span class="p">(</span><span class="nx">preProps</span><span class="p">,</span><span class="nx">preState</span><span class="p">,</span><span class="nx">snapshotValue</span><span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">preProps</span><span class="p">,</span><span class="nx">preState</span><span class="p">,</span><span class="nx">snapshotValue</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;componentDidUpdate&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Son</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="getsnapshotbeforeupdate的应用">getSnapshotBeforeUpdate的应用</h4>
<p>实现不断增加列表高度，但是不影响当前的浏览</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">NewsList</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">{</span>
            <span class="nx">state</span><span class="o">=</span><span class="p">{</span>
                <span class="nx">newsList</span><span class="o">:</span><span class="p">[]</span>
            <span class="p">}</span>
            <span class="nx">componentDidMount</span><span class="p">(){</span>
                <span class="nx">setInterval</span><span class="p">(()=&gt;{</span>
                    <span class="kr">const</span> <span class="p">{</span><span class="nx">newsList</span><span class="p">}</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newsList</span><span class="p">);</span>
                    <span class="kr">const</span> <span class="nx">news</span> <span class="o">=</span> <span class="s1">&#39;新闻&#39;</span><span class="o">+</span><span class="p">(</span><span class="nx">newsList</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">news</span><span class="p">);</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">newList</span><span class="o">:</span><span class="nx">newsList</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">news</span><span class="p">)})</span>
                <span class="p">},</span><span class="mi">500</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="c1">//返回每次更新前的list内容高度
</span><span class="c1"></span>            <span class="nx">getSnapshotBeforeUpdate</span><span class="p">(){</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">scrollHeight</span>
            <span class="p">}</span>
            <span class="nx">render</span><span class="p">(){</span>
                <span class="kr">const</span> <span class="p">{</span><span class="nx">newsList</span><span class="p">}</span><span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
                <span class="k">return</span> <span class="p">(</span>
                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&#34;list&#34;</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">c</span><span class="p">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="nx">newsList</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span><span class="nx">i</span><span class="p">)=&gt;{</span>
                                <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">v</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
                            <span class="p">})}</span>
                        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
                    <span class="o">&lt;</span><span class="err">/div&gt;</span>
                <span class="p">)</span>
            <span class="p">}</span>
            <span class="nx">componentDidUpdate</span><span class="p">(</span><span class="nx">prePorps</span><span class="p">,</span><span class="nx">preState</span><span class="p">,</span><span class="nx">snapshotValue</span><span class="p">){</span>
                <span class="c1">// 滚动的高度=已经滚动的高度+（目前的高度-更新前的高度）
</span><span class="c1"></span>                <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">scrollTop</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">scrollHeight</span><span class="o">-</span><span class="nx">snapshotValue</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">NewsList</span><span class="o">/&gt;</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">))</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="dom的diffing算法">DOM的diffing算法</h3>
<p></p>
<h1 id="react脚手架">React脚手架</h1>
<h2 id="项目结构">项目结构</h2>
<p></p>
<h2 id="开发流程">开发流程</h2>
<p></p>
<ol>
<li>
<p>在src目录下新建文件夹定义组件并暴露</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>// React为默认暴露，Component为分别暴露
import React,{Component} from &lsquo;react&rsquo;
import &lsquo;./Hello.css&rsquo;
export default class Hello extends Component{
render(){
return(
<h2 className="title">Hello,React!</h2>
)
}
}</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
2. 在App.js中引入使用并暴露

```javascript
//创建外壳组件
import React,{Component} from &#39;react&#39;
import Hello from &#39;./components/Hello/Hello&#39;
import Welcome from &#39;./components/Welcome/Welcome&#39;
export default class App extends Component{
 render(){
   return(
     &lt;div&gt;
        &lt;Hello/&gt; 
        &lt;Welcome/&gt;
     &lt;/div&gt;
   ) 
 }
}
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>
<p>在index.js中引入App，render到root跟组件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//引入react核心库
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="c1">//引入reactDOM
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
<span class="c1">//引入App组件
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span><span class="p">;</span>
<span class="c1">//用于测试性能
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">reportWebVitals</span> <span class="nx">from</span> <span class="s1">&#39;./reportWebVitals&#39;</span><span class="p">;</span>

<span class="c1">//渲染App到页面
</span><span class="c1"></span><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="err">/React.StrictMode&gt;,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
<span class="p">);</span>

<span class="nx">reportWebVitals</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="样式的模块化">样式的模块化</h2>
<p></p>
<h2 id="todolist案例">todolist案例</h2>
<p></p>
<h2 id="github搜索案例">github搜索案例</h2>
<p></p>
<h2 id="配置代理解决跨域">配置代理解决跨域</h2>
<h3 id="方法一">方法一</h3>
<blockquote>
<p>在package.json中追加如下配置</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;proxy&#34;</span><span class="err">:</span><span class="s2">&#34;http://localhost:5000&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>说明：</p>
<ol>
<li>优点：配置简单，前端请求资源时可以不加任何前缀。</li>
<li>缺点：不能配置多个代理。</li>
<li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</li>
</ol>
<h3 id="方法二">方法二</h3>
<ol>
<li>
<p>第一步：创建代理配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">在src下创建配置文件：src/setupProxy.js
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>编写setupProxy.js配置具体代理规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="p">{</span><span class="nx">createProxyMiddleware</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http-proxy-middleware&#39;</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span>
    <span class="nx">createProxyMiddleware</span> <span class="p">(</span><span class="s1">&#39;/api1&#39;</span><span class="p">,</span> <span class="p">{</span>  <span class="c1">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)
</span><span class="c1"></span>      <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span> <span class="c1">//配置转发目标地址(能返回数据的服务器地址)
</span><span class="c1"></span>      <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">//控制服务器接收到的请求头中host字段的值
</span><span class="c1"></span>      <span class="cm">/*
</span><span class="cm">      	changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000
</span><span class="cm">      	changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000
</span><span class="cm">      	changeOrigin默认值为false，但我们一般将changeOrigin值设为true
</span><span class="cm">      */</span>
      <span class="nx">pathRewrite</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;^/api1&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">}</span> <span class="c1">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)
</span><span class="c1"></span>    <span class="p">}),</span>
    <span class="nx">createProxyMiddleware</span> <span class="p">(</span><span class="s1">&#39;/api2&#39;</span><span class="p">,</span> <span class="p">{</span>
      <span class="nx">target</span><span class="o">:</span> <span class="s1">&#39;http://localhost:5001&#39;</span><span class="p">,</span>
      <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nx">pathRewrite</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;^/api2&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">}</span>
    <span class="p">})</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li>
<li>缺点：配置繁琐，前端请求资源时必须加前缀。</li>
</ol>
<h1 id="react路由">React路由</h1>
<h2 id="react-router-dom基本使用">react-router-dom基本使用</h2>
<p></p>
<ol>
<li>
<p>npm install react-router-dom &ndash;save</p>
</li>
<li>
<p>在index.js中引入BrowserRouter组件（histroy模式），将App组件包裹，即整个应用使用一个路由器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">BrowserRouter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router-dom&#39;</span>
<span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">BrowserRouter</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">App</span><span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">BrowserRouter</span><span class="p">&gt;</span>
    <span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在父组件中添加路由链接Link</p>
<ul>
<li>to：去往的路由（一般小写）</li>
</ul>
</li>
<li>
<p>在父组件中注册路由Route</p>
<ul>
<li>path：对应的路由链接</li>
<li>component：对应渲染的组件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">Link</span><span class="p">,</span><span class="nx">Route</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router-dom&#39;</span>
<span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;./components/About&#39;</span>
<span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;./components/Home&#39;</span>
<span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;row&#34;</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;col-xs-offset-2 col-xs-8&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;page-header&#34;</span><span class="p">&gt;&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="nx">React</span> <span class="nx">Router</span> <span class="nx">Demo</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;row&#34;</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;col-xs-2 col-xs-offset-2&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;list-group&#34;</span><span class="p">&gt;</span>
                <span class="c1">// 路由链接
</span><span class="c1"></span>                  <span class="p">&lt;</span><span class="nt">Link</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;list-group-item active&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span><span class="p">&gt;</span><span class="nx">About</span><span class="p">&lt;/</span><span class="nt">Link</span><span class="p">&gt;</span>
                  <span class="p">&lt;</span><span class="nt">Link</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home&#34;</span><span class="p">&gt;</span><span class="nx">Home</span><span class="p">&lt;/</span><span class="nt">Link</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;col-xs-6&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;panel&#34;</span><span class="p">&gt;</span>
                  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
                  <span class="c1">//注册路由
</span><span class="c1"></span>                    <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/about&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">About</span><span class="p">}&gt;&lt;/</span><span class="nt">Route</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/home&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Home</span><span class="p">}&gt;&lt;/</span><span class="nt">Route</span><span class="p">&gt;</span>
                  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="路由组件与一般组件">路由组件与一般组件</h2>
<p>==注意==：</p>
<ol>
<li>只有路由组件才有histroy</li>
</ol>
<p></p>
<h2 id="withrouter函数">withRouter函数</h2>
<p></p>
<h2 id="navlink的使用">NavLink的使用</h2>
<p></p>
<ol>
<li>默认的activeClassName为active</li>
<li>点击后会自动添加activeClassName</li>
</ol>
<h3 id="navlink的二次封装">NavLink的二次封装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">NavLink</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router-dom&#39;</span>
<span class="kr">class</span> <span class="nx">MyNavLink</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">NavLink</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;list-group-item&#34;</span> <span class="p">{</span><span class="na">...this.props</span><span class="p">}</span> <span class="p">/&gt;</span> <span class="c1">//扩展运算符将key和value都展开，包括children，值就是标签体内容
</span><span class="c1"></span>        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">MyNavLink</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="p">&lt;</span><span class="nt">MyNavLink</span> <span class="na">to</span><span class="o">=</span><span class="s">&#39;/home&#39;</span><span class="p">&gt;</span><span class="nx">Home</span><span class="p">&lt;/</span><span class="nt">MyNavLink</span><span class="p">&gt;</span> <span class="c1">//这里标签体的内容会自动整理为标签的一个属性，key为children
</span></code></pre></td></tr></table>
</div>
</div><h2 id="switch的使用">switch的使用</h2>
<ol>
<li>不用switch组件，会依次匹配路由，效率低下</li>
<li>switch组件中，匹配到了路由后就不会再向下匹配了</li>
<li>注意：相同路径匹配第一个，不用switch会全部显示</li>
</ol>
<p></p>
<h2 id="解决样式丢失">解决样式丢失</h2>
<p></p>
<p>一般在路由前加上项目或者公司名，刷新后请求资源的路径变了导致请求不到css文件</p>
<ol>
<li>
<p>将&lt;link <em>rel</em>=&ldquo;stylesheet&rdquo; <em>href</em>=&quot;./js/bootstrap.css&quot;&gt;中的./改为/</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/js/bootstrap.css&#34;</span><span class="p">&gt;</span> //不带.是指通过localhost端口号相对地址访问
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>改为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;%PUBLIC_URL%/js/bootstrap.css&#34;</span><span class="p">&gt;</span> //绝对路径
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将browserrouter改为hashrouter，因为#后面的不会加入请求地址中，但是不常用</p>
</li>
</ol>
<h2 id="路由的严格匹配与模糊匹配">路由的严格匹配与模糊匹配</h2>
<p></p>
<h2 id="redirect组件的使用">Redirect组件的使用</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx">                  <span class="c1">//注册路由
</span><span class="c1"></span>                  <span class="p">&lt;</span><span class="nt">Switch</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/test/about&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">About</span><span class="p">}&gt;&lt;/</span><span class="nt">Route</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/test/home&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Home</span><span class="p">}&gt;&lt;/</span><span class="nt">Route</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">Redirect</span> <span class="na">to</span><span class="o">=</span><span class="s">&#39;/test/about&#39;</span><span class="p">/&gt;</span> <span class="c1">// 匹配不到时跳转
</span><span class="c1"></span>                  <span class="p">&lt;/</span><span class="nt">Switch</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="嵌套路由">嵌套路由</h2>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Route</span> <span class="p">,</span><span class="nx">Redirect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router-dom&#39;</span>
<span class="kr">import</span> <span class="nx">MyNavLink</span> <span class="nx">from</span> <span class="s1">&#39;../../components/MyNavLink&#39;</span>
<span class="kr">import</span> <span class="nx">News</span> <span class="nx">from</span> <span class="s1">&#39;./News&#39;</span>
<span class="kr">import</span> <span class="nx">Message</span> <span class="nx">from</span> <span class="s1">&#39;./Message&#39;</span>
<span class="kr">class</span> <span class="nx">index</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="nx">Home组件内容</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav nav-tabs&#34;</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">MyNavLink</span> <span class="na">to</span><span class="o">=</span><span class="s">&#39;/test/home/news&#39;</span><span class="p">&gt;</span><span class="nx">News</span><span class="p">&lt;/</span><span class="nt">MyNavLink</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">MyNavLink</span> <span class="na">to</span><span class="o">=</span><span class="s">&#39;/test/home/message&#39;</span><span class="p">&gt;</span><span class="nx">message</span><span class="p">&lt;/</span><span class="nt">MyNavLink</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                        <span class="p">{</span><span class="cm">/* 注册路由 二级路由 一级路由为/test/home*/</span><span class="p">}</span>
                        <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/test/home/news&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">News</span><span class="p">}/&gt;</span>
                        <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="s">&#39;/test/home/message&#39;</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Message</span><span class="p">}&gt;&lt;/</span><span class="nt">Route</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">Redirect</span> <span class="na">to</span><span class="o">=</span><span class="s">&#39;/test/home/news&#39;</span><span class="p">/&gt;</span>
                    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">index</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="路由传参">路由传参</h2>
<p>传递&ndash;&gt;声名接收&ndash;&gt;接收</p>
<h3 id="params参数">params参数</h3>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-router-dom&#39;</span>
<span class="kr">import</span> <span class="nx">Detail</span> <span class="nx">from</span> <span class="s1">&#39;./Detail&#39;</span>
<span class="kr">const</span> <span class="nx">messageArr</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;消息1&#39;</span> <span class="p">},</span>
    <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;消息2&#39;</span> <span class="p">},</span>
    <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;消息3&#39;</span> <span class="p">},</span>
<span class="p">]</span>
<span class="kr">class</span> <span class="nx">Message</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                    <span class="p">{</span><span class="nx">messageArr</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="o">=</span><span class="p">{</span><span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="p">}&gt;</span>
                           <span class="c1">//传递参数
</span><span class="c1"></span>                            <span class="p">&lt;</span><span class="nt">Link</span> <span class="na">to</span><span class="o">=</span><span class="p">{</span><span class="sb">`/test/home/message/detail/</span><span class="si">${</span><span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="sb">/</span><span class="si">${</span><span class="nx">v</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="sb">`</span><span class="p">}&gt;{</span><span class="nx">v</span><span class="p">.</span><span class="nx">title</span><span class="p">}&lt;/</span><span class="nt">Link</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">})}</span>
                <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
                <span class="c1">// 声名接收参数
</span><span class="c1"></span>                <span class="p">&lt;</span><span class="nt">Route</span> <span class="na">path</span><span class="o">=</span><span class="p">{</span><span class="sb">`/test/home/message/detail/:id/:title`</span><span class="p">}</span> <span class="na">component</span><span class="o">=</span><span class="p">{</span><span class="nx">Detail</span><span class="p">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Message</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">contentArr</span> <span class="o">=</span><span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容1&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容2&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容3&#39;</span><span class="p">}</span>
<span class="p">]</span>
<span class="kr">class</span> <span class="nx">Detail</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 接收参数
</span><span class="c1"></span>        <span class="kr">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span>
        <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">contentArr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">v</span><span class="p">=&gt;{</span>
            <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
        <span class="p">})</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">ID</span><span class="o">:</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Title</span><span class="o">:</span><span class="p">{</span><span class="nx">params</span><span class="p">.</span><span class="nx">title</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Content</span><span class="o">:</span><span class="p">{</span><span class="nx">result</span><span class="p">.</span><span class="nx">content</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Detail</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="search参数">search参数</h3>
<p></p>
<p></p>
<p>接收参数使用querystring模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">qs</span> <span class="nx">from</span> <span class="s1">&#39;querystring&#39;</span><span class="c1">//引入模块，stringlify把对象变成urlencoded编码，parse把urlencoded编码变成对象
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">contentArr</span> <span class="o">=</span><span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容1&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容2&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容3&#39;</span><span class="p">}</span>
<span class="p">]</span>
<span class="kr">class</span> <span class="nx">Detail</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="p">{</span><span class="nx">search</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">location</span>
        <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">search</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
        <span class="kr">const</span> <span class="p">{</span><span class="nx">content</span><span class="p">}</span> <span class="o">=</span> <span class="nx">contentArr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">v</span><span class="p">=&gt;{</span>
            <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">result</span><span class="p">.</span><span class="nx">id</span>
        <span class="p">})</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">ID</span><span class="o">:</span><span class="p">{</span><span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Title</span><span class="o">:</span><span class="p">{</span><span class="nx">result</span><span class="p">.</span><span class="nx">title</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Content</span><span class="o">:</span><span class="p">{</span><span class="nx">content</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Detail</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="state参数">state参数</h3>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
<span class="kr">import</span> <span class="nx">qs</span> <span class="nx">from</span> <span class="s1">&#39;querystring&#39;</span>
<span class="kr">const</span> <span class="nx">contentArr</span> <span class="o">=</span><span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容1&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容2&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">content</span><span class="o">:</span><span class="s1">&#39;内容3&#39;</span><span class="p">}</span>
<span class="p">]</span>
<span class="kr">class</span> <span class="nx">Detail</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">state</span> <span class="o">||</span> <span class="p">{}</span> <span class="c1">//刷新是可以保留参数的，因为是history模式，location是histroy的一个属性，防止清除缓存后报错
</span><span class="c1"></span>        
        <span class="kr">const</span> <span class="p">{</span><span class="nx">content</span><span class="p">}</span> <span class="o">=</span> <span class="nx">contentArr</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">v</span><span class="p">=&gt;{</span>
            <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">state</span><span class="p">.</span><span class="nx">id</span>
        <span class="p">})</span> <span class="o">||</span> <span class="p">{}</span> <span class="c1">//同理
</span><span class="c1"></span>        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">ID</span><span class="o">:</span><span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">id</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Title</span><span class="o">:</span><span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">title</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="nx">Content</span><span class="o">:</span><span class="p">{</span><span class="nx">content</span><span class="p">}&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">Detail</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="区别">区别</h3>
<ol>
<li>state的参数看不到，params和search参数可以在地址上看到</li>
<li>params参数需要声名接收，其他两个不需要</li>
<li>search参数在接收时需要querystring模块进行解析</li>
<li>三种方法传递的写法都不同，但是都可以写成对象</li>
</ol>
<h2 id="push与replace">push与replace</h2>
<ol>
<li>push有历史记录</li>
<li>在link标签加上replace属性，就没有历史记录</li>
</ol>
<h2 id="编程式路由导航">编程式路由导航</h2>
<p></p>
<p></p>
<p></p>
<p>BrowserRouter与HashRouter的区别</p>
<p></p>
<h1 id="redux">Redux</h1>
<h2 id="流程">流程</h2>
<p></p>
<p></p>
<ol>
<li>首先createStore去创建一个store，传入一个为其服务的reducer，并暴露</li>
<li>reducer是函数，接收prestate和action，action为对象，有type和data，返回加工后的状态</li>
<li>需要一个文件作为actioncreator，用于返回action对象</li>
<li>然后调用store实例的dispatch方法，让为这个store服务的reducer进行加工数据后返回</li>
</ol>
<h2 id="异步action">异步action</h2>
<p>返回的是一个函数</p>
<p></p>
<p>此时会报错，因为dispatch中需要一个action对象，而不是一个函数，</p>
<p>需要redux-thunk</p>
<h2 id="redux-thunk">redux-thunk</h2>
<p></p>
<p></p>
<h2 id="react-redux">react-redux</h2>
<p></p>
<h3 id="react-redux的基本使用">React-redux的基本使用</h3>
<p></p>
<h3 id="容器中连接store和ui组件">容器中连接store和ui组件</h3>
<p></p>
<p></p>
<p></p>
<p>==注意==：在APP.jsx中，直接使用容器组件，并通过props的方式传递store</p>
<h3 id="ui组件中使用">ui组件中使用</h3>
<p></p>
<h3 id="流程总结">流程总结：</h3>
<ol>
<li>首先redux需要，constant，action，reducer，store文件；一个component需要一个container文件</li>
<li>container用于连接component和store，store通过属性传递，component文件引入</li>
<li>react-redux中有connect函数，将ui和store连接，第一个参数mapStateToProps（一个function）返回state，第二个mapDispatchToPsops返回操作state的方法dispatch，返回类型都是对象，相当于返回到props中了</li>
<li>component通过属性（来自connect绑定的constainer）调用store中的state或者方法</li>
<li>因为dispatch中需要一个action对象，所以到达action文件进行创建，然后dispatch执行，调用action的type在reducer中对应的操作</li>
<li>action和reducer中使用constant文件</li>
</ol>
<h3 id="优化">优化</h3>
<p></p>
<p>1.react-redux的dispatch可以写成对象的简写形式</p>
<ol>
<li>component中调用了jia后，相当于调用action中的increment方法，参数通过increment传递</li>
<li>然后react-redux会自动帮我们分发dispatch</li>
</ol>
<p></p>
<p>2.使用react-redux不用监听storer的变化</p>
<p>3.provider组件包裹APP可以将所有的容器组件都拥有store</p>
<p></p>
<p>4.整合ui组件与容器组件</p>
<p>将ui组件的定义写在容器组件中</p>
<p></p>
<h2 id="数据共享">数据共享</h2>
<p></p>
<p>combineReducers中的对象就是redux的store中最终保存的数据结构</p>
<p>==流程==</p>
<p></p>
<ol>
<li>
<p>首先将redux中分文件夹建立action和reducer</p>
</li>
<li>
<p>在strore中将reducers整合</p>
</li>
<li>
<p>在使用时获取需要的state</p>
<p></p>
</li>
</ol>
<h2 id="纯函数">纯函数</h2>
<p></p>
<h2 id="redux开发者工具">redux开发者工具</h2>
<p>npm i redux-devtools-extension</p>
<p></p>
<h1 id="常用库">常用库</h1>
<h2 id="nanoid">nanoid</h2>
<p>生成唯一的uuid</p>
<ol>
<li>npm install nanoid &ndash;save</li>
<li>import {nanoid} from &lsquo;nanoid&rsquo;</li>
<li>nanoid()函数的返回值是唯一的uuid</li>
</ol>
<h2 id="pubsub-js">pubsub-js</h2>
<p>兄弟组件通信</p>
<ol>
<li>npm install pubsub-js &ndash;save</li>
<li>import PubSub from &lsquo;pubsub-js&rsquo; //引入</li>
<li>PubSub.subscribe(&lsquo;delete&rsquo;, function(data){ }); //订阅</li>
<li>PubSub.publish(&lsquo;delete&rsquo;, data) //发布消息</li>
</ol>
<h2 id="antd">antd</h2>
<p>npm install antd &ndash;save</p>
<p>按需引入</p>
<ol>
<li>npm install react-app-rewired customize-cra babel-plugin-import &ndash;save</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="p">{</span><span class="nx">override</span><span class="p">,</span> <span class="nx">fixBabelImports</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;customize-cra&#39;</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">override</span><span class="p">(</span>
  <span class="c1">// 根据import（使用babel-plugin-import包）实现按需引入样式
</span><span class="c1"></span>  <span class="nx">fixBabelImports</span><span class="p">(</span><span class="s1">&#39;import&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">libraryName</span><span class="o">:</span> <span class="s1">&#39;antd&#39;</span><span class="p">,</span>
    <span class="nx">libraryDirectory</span><span class="o">:</span> <span class="s1">&#39;es&#39;</span><span class="p">,</span>
    <span class="nx">style</span><span class="o">:</span> <span class="s1">&#39;css&#39;</span><span class="p">,</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>看文档</p>
<h2 id="store">store</h2>
<p>用于在localstorage中进行存储，解决浏览器兼容性问题</p>
<h2 id="react-router-dom">react-router-dom</h2>
<p>路由组件</p>
<h2 id="redux-1">redux</h2>
<p>状态化管理</p>
<h2 id="redux-thunk-1">redux-thunk</h2>
<p>异步action</p>
<h2 id="react-redux-1">react-redux</h2>
<p>连接ui组件与redux</p>
<h1 id="项目相关">项目相关</h1>
<h2 id="登录状态保持和权限验证">登录状态保持和权限验证</h2>
<ol>
<li>登录成功将用户信息存入localstorage，并通过reducer更新redux中的store，用了react-redux后一旦store更新，组件也会更新</li>
<li>在以及路由组件的render中判断如果store中用户存在，直接跳转至相应页面，否则Redirect至登录</li>
</ol>
]]></description>
</item><item>
    <title>webpack</title>
    <link>http://example.org/posts/webpack/</link>
    <pubDate>Thu, 05 Aug 2021 10:41:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/webpack/</guid>
    <description><![CDATA[<h2 id="入口">入口</h2>
<p>指示webpack使用哪个模块，来作为构建其内部依赖图的开始</p>
<p>在webpack.config.js</p>
<ol>
<li>对象写法（可扩展性高）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a2</span><span class="o">:</span> <span class="s1">&#39;dependingfile.js&#39;</span><span class="p">,</span>
    <span class="nx">b2</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">dependOn</span><span class="o">:</span> <span class="s1">&#39;a2&#39;</span><span class="p">,</span>
      <span class="kr">import</span><span class="o">:</span> <span class="s1">&#39;./src/app.js&#39;</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>2.单入口写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;./path/to/my/entry/file.js&#39;</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./src/file_1.js&#39;</span><span class="p">,</span> <span class="s1">&#39;./src/file_2.js&#39;</span><span class="p">],</span>
  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;bundle.js&#39;</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="描述入口对象属性">描述入口对象属性</h3>
<ol>
<li>
<p>dependOn：当前入口所依赖的入口，必须在该入口被加载前被加载</p>
</li>
<li>
<p>runtime：运行时 chunk 的名字。如果设置了，就会创建一个新的运行时 chunk。在 webpack 5.43.0 之后可将其设为 <code>false</code> 以避免一个新的运行时 chunk。</p>
<ul>
<li>
<p><code>runtime</code> 和 <code>dependOn</code> 不应在同一个入口上同时使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a2</span><span class="o">:</span> <span class="s1">&#39;./a&#39;</span><span class="p">,</span>
    <span class="nx">b2</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">runtime</span><span class="o">:</span> <span class="s1">&#39;x2&#39;</span><span class="p">,</span>
      <span class="nx">dependOn</span><span class="o">:</span> <span class="s1">&#39;a2&#39;</span><span class="p">,</span>
      <span class="kr">import</span><span class="o">:</span> <span class="s1">&#39;./b&#39;</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>runtime</code> 不能指向已存在的入口名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">a1</span><span class="o">:</span> <span class="s1">&#39;./a&#39;</span><span class="p">,</span>
    <span class="nx">b1</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">runtime</span><span class="o">:</span> <span class="s1">&#39;a1&#39;</span><span class="p">,</span>
      <span class="kr">import</span><span class="o">:</span> <span class="s1">&#39;./b&#39;</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>dependOn</code> 不能是循环引用的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">module.exports = {
  entry: {
    a3: {
      import: &#39;./a&#39;,
      dependOn: &#39;b3&#39;,
    },
    b3: {
      import: &#39;./b&#39;,
      dependOn: &#39;a3&#39;,
    },
  },
}
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h2 id="输出">输出</h2>
<ol>
<li>
<p>使用入口(此chunk的名称)名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">//...
</span><span class="c1"></span>  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].bundle.js&#39;</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用内部chunk id</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">//...
</span><span class="c1"></span>  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[id].bundle.js&#39;</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同时配置多个入口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">app</span><span class="o">:</span> <span class="s1">&#39;./src/app.js&#39;</span><span class="p">,</span>
    <span class="nx">search</span><span class="o">:</span> <span class="s1">&#39;./src/search.js&#39;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;[name].js&#39;</span><span class="p">,</span>
    <span class="nx">path</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/dist&#39;</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="loader">loader</h2>
<p>使用loader告诉webpack加载css文件或者解析ts</p>
<ol>
<li>
<p>首先安装loader：npm install &ndash;save-dev css-loader ts-loader</p>
</li>
<li>
<p>webpack配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.css$/</span><span class="p">,</span> <span class="nx">use</span><span class="o">:</span> <span class="s1">&#39;css-loader&#39;</span> <span class="p">},</span>
      <span class="p">{</span> <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.ts$/</span><span class="p">,</span> <span class="nx">use</span><span class="o">:</span> <span class="s1">&#39;ts-loader&#39;</span> <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="配置方式">配置方式</h3>
<p><a href="https://webpack.docschina.org/configuration/module/#modulerules" target="_blank" rel="noopener noreffer"><code>module.rules</code></a> 允许在 webpack 配置中指定多个 loader，loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.css$/</span><span class="p">,</span>
        <span class="nx">use</span><span class="o">:</span> <span class="p">[</span>
          <span class="c1">// [style-loader](/loaders/style-loader)
</span><span class="c1"></span>          <span class="p">{</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;style-loader&#39;</span> <span class="p">},</span>
          <span class="c1">// [css-loader](/loaders/css-loader)
</span><span class="c1"></span>          <span class="p">{</span>
            <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;css-loader&#39;</span><span class="p">,</span>
            <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
              <span class="nx">modules</span><span class="o">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">},</span>
          <span class="c1">// [sass-loader](/loaders/sass-loader)
</span><span class="c1"></span>          <span class="p">{</span> <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;sass-loader&#39;</span> <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="plugin">plugin</h2>
<p>插件可以携带参数，必须在webpack配置中，向plugins属性传入一个new实例。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">HtmlWebpackPlugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;html-webpack-plugin&#39;</span><span class="p">);</span> <span class="c1">// 通过 npm 安装
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">webpack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;webpack&#39;</span><span class="p">);</span> <span class="c1">// 访问内置的插件
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">entry</span><span class="o">:</span> <span class="s1">&#39;./path/to/my/entry/file.js&#39;</span><span class="p">,</span>
  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;my-first-webpack.bundle.js&#39;</span><span class="p">,</span>
    <span class="nx">path</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;dist&#39;</span><span class="p">),</span>
  <span class="p">},</span>
  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.(js|jsx)$/</span><span class="p">,</span>
        <span class="nx">use</span><span class="o">:</span> <span class="s1">&#39;babel-loader&#39;</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">],</span>
  <span class="p">},</span>
  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">webpack</span><span class="p">.</span><span class="nx">ProgressPlugin</span><span class="p">(),</span>
    <span class="k">new</span> <span class="nx">HtmlWebpackPlugin</span><span class="p">({</span> <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;./src/index.html&#39;</span> <span class="p">}),</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="配置">配置</h2>
<p>webpack的配置文件是JavaScript文件，文件内导出webpack配置对象。webpack会根据该配置定义的属性进行处理。</p>
<h2 id="模式">模式</h2>
]]></description>
</item><item>
    <title>vue</title>
    <link>http://example.org/posts/vue/</link>
    <pubDate>Fri, 30 Jul 2021 10:39:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/vue/</guid>
    <description><![CDATA[<h2 id="安装">安装</h2>
<p></p>
<h2 id="mvvm">MVVM</h2>
<p></p>
<h2 id="模板语法">模板语法</h2>
<h3 id="vue的基本使用">Vue的基本使用</h3>
<ol>
<li>引入Vue.js库文件</li>
<li>使用vue语法处理数据</li>
<li>提供填充数据的标签</li>
<li>把vue提供的数据填充到标签中</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> {{msg}} <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="c">&lt;!-- 插值表达式 --&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c">&lt;!-- 2.引入库文件 --&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/vue.js&#34;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span><span class="c1">//元素挂载位置（可以是css选择器或者DOM元素）
</span><span class="c1"></span>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="c1">//模型数据（值是一个对象）
</span><span class="c1"></span>                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello Vue&#39;</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="差值表达式">差值表达式</h3>
<p>在mustache语法中，不仅仅可以直接写变量，也可以写简单的表达式</p>
<p>Mustache：{{}}</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{message}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{message}},xqz<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="c">&lt;!--  在mustache语法中，不仅仅可以直接写变量，也可以写简单的表达式--&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{firstName+ &#39; &#39; +lastName}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{firstName}} {{lastName}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{counter * 2}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">firstName</span><span class="o">:</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span>
      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;qz&#39;</span><span class="p">,</span>
      <span class="nx">counter</span><span class="o">:</span><span class="mi">100</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="指令">指令</h3>
<ul>
<li>本质是自定义属性</li>
<li>格式：v-开始</li>
</ul>
<h4 id="v-cloak">v-cloak</h4>
<ul>
<li>
<p>作用：解决插值表达式存在闪动问题</p>
</li>
<li>
<p>用法：</p>
<ol>
<li>
<p>提供css样式</p>
<p>[v-cloak]{diaplay=none}//属性选择器</p>
</li>
<li>
<p>在插值表达式所在的标签中添加v-cloak指令</p>
</li>
</ol>
</li>
<li>
<p>原理：先通过样式隐藏内容，然后再内存中进行值的替换，替换好之后再显示最终的结果</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="o">[</span><span class="nt">v-cloak</span><span class="o">]</span><span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="c">&lt;!--在vue解析之前，div中有一个属性叫v-cloak，在解析之后会把这个属性删除--&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span> <span class="na">v-cloak</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{message}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="数据绑定">数据绑定</h4>
<h5 id="数据响应式">数据响应式</h5>
<ul>
<li>概念：数据的变化导致页面内容的变化，vue会监听属性的变化</li>
</ul>
<h5 id="数据绑定-1">数据绑定</h5>
<ul>
<li>
<p>将标签的内容与数据绑定</p>
</li>
<li>
<p>将数据填充到标签中</p>
</li>
</ul>
<h5 id="v-once">v-once</h5>
<ul>
<li>作用：编译一次，显示内容之后不再具有响应式功能</li>
<li>应用场景：如果显示的信息后续不需要再修改，可以提高性能</li>
</ul>
<h5 id="v-text">v-text</h5>
<ul>
<li>作用：填充纯文本</li>
<li>区别：没有闪动问题</li>
</ul>
<h5 id="v-html">v-html</h5>
<ul>
<li>作用：填充HTML片段，能解析html标签</li>
<li>区别：存在安全问题，所以只能使用本网站的数据</li>
</ul>
<h5 id="v-pre">v-pre</h5>
<ul>
<li>作用：填充原始信息</li>
<li>区别：能跳过编译过程</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-once</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;msg&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;msg1&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-pre</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
                <span class="nx">msg1</span><span class="o">:</span><span class="s1">&#39;&lt;h1&gt;HTML&lt;/h1&gt;&#39;</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="双向数据绑定">双向数据绑定</h5>
<ul>
<li>
<p>MVVM设计思想（model数据-view模板视图-View-Model控制逻辑（Vue））</p>
<ul>
<li>DOM Listener影响数据（事件监听）</li>
<li>Data Bindings影响视图（数据绑定）</li>
</ul>
</li>
<li>
<p>v-model</p>
<ul>
<li>表单的变化引起数据的变化，视图中与之相关联的数据会重新渲染</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;msg&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>v-model本质原理</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="c">&lt;!-- 一个属性绑定把data对象的数据显示在页面上，一个事件函数把修改的值覆盖data对象中的原数据 --&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">:value</span><span class="o">=</span><span class="s">&#34;msg&#34;</span> <span class="err">@</span><span class="na">input</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>
        或者
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">:value</span><span class="o">=</span><span class="s">&#34;msg&#34;</span> <span class="err">@</span><span class="na">input</span><span class="o">=</span><span class="s">&#39;msg=$event.target.value&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#39;msg&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">msg</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</body>
  ```
<h4 id="事件绑定">事件绑定</h4>
<h5 id="v-on">v-on:||@</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{num}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle()&#39;</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span><span class="p">;</span><span class="c1">//this指vm指的是vue的实例
</span><span class="c1"></span>                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="事件函数参数绑定">事件函数参数绑定</h5>
<ol>
<li>
<p>如果事件直接绑定函数名称不传参（==不写括号==），那么默认会传递事件对象做为事件函数的第一个参数</p>
</li>
<li>
<p>如果传的是变量，会去data属性里找，没有则报错</p>
</li>
<li>
<p>如果事件绑定函数传参，那么事件函数作为最后一个参数，以$event形式进行显示传递</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{num}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle(123,456,$event)&#39;</span><span class="p">&gt;</span>点击1<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle2&#39;</span><span class="p">&gt;</span>点击2<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">num</span><span class="o">++</span><span class="p">;</span> <span class="c1">//this指vm指的是vue的实例
</span><span class="c1"></span>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">);</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">);</span>     
                <span class="p">},</span>
                <span class="nx">handle2</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h5 id="事件修饰符">事件修饰符</h5>
<ul>
<li>
<p>阻止冒泡</p>
<p>@click.stop=&lsquo;函数名&rsquo;</p>
</li>
<li>
<p>组织默认行为</p>
<p>@click.prevent=&lsquo;函数名&rsquo;</p>
<p>注意：阻止a标签的默认行为：@click.prevent不用添加函数direv</p>
</li>
</ul>
<h5 id="按键修饰符">按键修饰符</h5>
<ul>
<li>
<p>enter触发</p>
<p>@keyup.enter=&lsquo;函数名&rsquo;</p>
</li>
<li>
<p>delete触发</p>
<p>@keyup.delete=&lsquo;函数名&rsquo;</p>
</li>
<li>
<p>自定义按键触发</p>
<p>Vue.config.keyCodes.a=65;</p>
</li>
<li>
<p>once</p>
<p>点击第一次有反应</p>
</li>
</ul>
<h4 id="属性绑定">属性绑定</h4>
<p>将==标签的属性==和数据绑定</p>
<ul>
<li>
<p>v-bind:属性名||:属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">v-bind:href</span><span class="o">=</span><span class="s">&#34;url&#34;</span><span class="p">&gt;</span>百度<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>切换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.baidu.com&#39;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">//修改url地址
</span><span class="c1"></span>                    <span class="k">this</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://itcast.cn&#39;</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="样式绑定">样式绑定</h4>
<h5 id="class样式处理">class样式处理</h5>
<p></p>
<ul>
<li>
<p>对象语法</p>
<p>css的class属性名：属性值（data对象中的属性名）值为true或false</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:class</span><span class="o">=</span><span class="s">&#34;{active: isActive,error:isError}&#34;</span><span class="p">&gt;</span>测试<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>切换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">isActive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">isError</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">//控制active
</span><span class="c1"></span>                    <span class="k">this</span><span class="p">.</span><span class="nx">isActive</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isActive</span><span class="p">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">isError</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isError</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>数组语法</p>
<p>data对象中的属性名     属性值为css的class属性名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:class</span><span class="o">=</span><span class="s">&#39;[activeClass,errorClass]&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">:click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>切换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">activeClass</span><span class="o">:</span> <span class="s1">&#39;active&#39;</span><span class="p">,</span>
                <span class="nx">errorClass</span><span class="o">:</span> <span class="s1">&#39;error&#39;</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">activeClass</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">errorClass</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>对象和数据语法结合与简化</p>
<p>提高可读性</p>
<p>==注意==：默认的class会保留</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:class</span><span class="o">=</span><span class="s">&#39;[arrClasses,{test:isTest}]&#39;</span><span class="p">&gt;</span>数组和对象的结合<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>//结合使用
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#39;objClasses&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>//使用对象
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>切换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">isTest</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nx">arrClasses</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="s1">&#39;error&#39;</span><span class="p">],</span><span class="c1">//简化数组
</span><span class="c1"></span>                <span class="nx">objClasses</span><span class="o">:</span> <span class="p">{</span><span class="c1">//简化对象
</span><span class="c1"></span>                    <span class="nx">active</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="nx">error</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">arrClasses</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">objClasses</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">isTest</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isTest</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="style样式处理">style样式处理</h5>
<p></p>
<ul>
<li>
<p>​	对象语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:style</span><span class="o">=</span><span class="s">&#39;{border:borderStyle,width:widthStyle,height:heightStyle}&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:style</span><span class="o">=</span><span class="s">&#39;objStyles&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>切换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">borderStyle</span><span class="o">:</span> <span class="s1">&#39;1px solid red&#39;</span><span class="p">,</span>
                <span class="nx">widthStyle</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span>
                <span class="nx">heightStyle</span><span class="o">:</span> <span class="s1">&#39;200px&#39;</span><span class="p">,</span>
                <span class="nx">objStyles</span><span class="o">:</span> <span class="p">{</span>						<span class="c1">//简化形式对象1
</span><span class="c1"></span>                    <span class="nx">border</span><span class="o">:</span> <span class="s1">&#39;1px solid green&#39;</span><span class="p">,</span>
                    <span class="nx">width</span><span class="o">:</span> <span class="s1">&#39;200px&#39;</span><span class="p">,</span>
                    <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;100px&#39;</span>
                <span class="p">},</span>
                <span class="nx">overrideStyles</span><span class="o">:</span> <span class="p">{</span>					<span class="c1">//对象2
</span><span class="c1"></span>                    <span class="nx">border</span><span class="o">:</span> <span class="s1">&#39;5px solid orange&#39;</span><span class="p">,</span>
                    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">heightStyle</span> <span class="o">=</span> <span class="s1">&#39;100px&#39;</span><span class="p">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">objStyles</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="s1">&#39;100px&#39;</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>数组语法</p>
<p>​	数组元素是多个对象，覆盖关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"> <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-bind:style</span><span class="o">=</span><span class="s">&#39;[objStyles,overrideStyles]&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="分支循环结构">分支循环结构</h4>
<h5 id="分支结构">分支结构</h5>
<ul>
<li>
<p>v-if</p>
</li>
<li>
<p>v-else</p>
</li>
<li>
<p>v-else-if</p>
</li>
<li>
<p>v-show:切换显示与否的频率非常高的时候使用，可以提升效率</p>
<p>原理：控制display是none还是block</p>
</li>
<li>
<p>==注意==：v-if控制元素是否渲染到页面（dom元素的增加或删除）</p>
<p>​			v-show控制元素是否显示（已经渲染到了页面，只是样式的显示与否）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#39;score&gt;=90&#39;</span><span class="p">&gt;</span>优秀<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-else-if</span><span class="o">=</span><span class="s">&#39;score&lt;90&amp;&amp;score&gt;=80&#39;</span><span class="p">&gt;</span>良好<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-else-if</span><span class="o">=</span><span class="s">&#39;score&lt;80&amp;&amp;score&gt;=60&#39;</span><span class="p">&gt;</span>一般<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-else</span><span class="p">&gt;</span>比较差<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#39;flag&#39;</span><span class="p">&gt;</span>测试v-show<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>点击显示<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">score</span><span class="o">:</span> <span class="mi">99</span><span class="p">,</span>
                <span class="nx">flag</span><span class="o">:</span> <span class="kc">false</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">flag</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">flag</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="循环结构">循环结构</h5>
<ul>
<li>
<p>v-for遍历数组</p>
<ul>
<li>
<p>遍历数组元素</p>
<li v-for='item in fruits'>{{item}}</li>
</li>
<li>
<p>遍历元素和索引</p>
<li v-for='（item,index）in fruits'>{{item + '-----' + index}}</li>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>水果列表<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;item in fruits&#39;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;(item,index) in fruits&#39;</span><span class="p">&gt;</span>{{item+&#39;------&#39;+index}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;(item,index) in myfruits&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{item.cname+&#39;------&#39;+index}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{item.ename+&#39;------&#39;+index}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">fruits</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">],</span>
                <span class="nx">myfruits</span><span class="o">:</span><span class="p">[{</span>
                    <span class="nx">ename</span><span class="o">:</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span>
                    <span class="nx">cname</span><span class="o">:</span><span class="s1">&#39;苹果&#39;</span>
                <span class="p">},</span>
                <span class="p">{</span>
                    <span class="nx">ename</span><span class="o">:</span><span class="s1">&#39;orange&#39;</span><span class="p">,</span>
                    <span class="nx">cname</span><span class="o">:</span><span class="s1">&#39;橘子&#39;</span>
                <span class="p">},</span>
                <span class="p">{</span>
                    <span class="nx">ename</span><span class="o">:</span><span class="s1">&#39;banana&#39;</span><span class="p">,</span>
                    <span class="nx">cname</span><span class="o">:</span><span class="s1">&#39;香蕉&#39;</span>
                <span class="p">},]</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>

            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>key的作用</p>
<p></p>
<ol>
<li>帮助vue区分不同元素，可以提高性能</li>
<li>如果两个key不一样，能够让vue的虚拟dom不去复用原来的元素，如果key是用的item，那么需要保证item的唯一性</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#34;isUser&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span>用户账号<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;username&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;用户账号&#34;</span> <span class="na">key</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span>

  <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-else</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;email&#34;</span><span class="p">&gt;</span>用户邮箱<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;用户邮箱&#34;</span> <span class="na">key</span><span class="o">=</span><span class="s">&#34;email&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;change&#34;</span><span class="p">&gt;</span>切换类型<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">isUser</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">change</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">isUser</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isUser</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">li</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#39;item.id&#39;</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;item in fruits&#39;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>//没有提供id，则用key=‘index’，唯一的就可以
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>v-for遍历对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;(value,key,index) in obj&#39;</span><span class="p">&gt;</span>{{key + &#39;-----&#39; + value + &#39;-----&#39; + index}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>v-if和v-for结合使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-if</span><span class="o">=</span><span class="s">&#39;obj[&#34;age&#34;] &gt; 10 &#39;</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;(value,key,index) in obj&#39;</span><span class="p">&gt;</span>{{key + &#39;-----&#39; + value + &#39;-----&#39; + index}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="vue常用特性">Vue常用特性</h2>
<h3 id="表单操作">表单操作</h3>
<h4 id="基于vue的表单操作">基于Vue的表单操作</h4>
<ul>
<li>
<p>input</p>
<p>双向数据绑定</p>
<p>值绑定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="c">&lt;!--  checkbox多选框--&gt;</span>
<span class="c">&lt;!--  &lt;input type=&#34;checkbox&#34; value=&#34;篮球&#34; v-model=&#34;hobbies&#34;&gt;篮球--&gt;</span>
<span class="c">&lt;!--  &lt;input type=&#34;checkbox&#34; value=&#34;足球&#34; v-model=&#34;hobbies&#34;&gt;足球--&gt;</span>
<span class="c">&lt;!--  &lt;input type=&#34;checkbox&#34; value=&#34;乒乓球&#34; v-model=&#34;hobbies&#34;&gt;乒乓球--&gt;</span>
<span class="c">&lt;!--  &lt;input type=&#34;checkbox&#34; value=&#34;羽毛球&#34; v-model=&#34;hobbies&#34;&gt;羽毛球--&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>宁的爱好是{{hobbies}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;item in arguments&#34;</span> <span class="na">:for</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">:value</span><span class="o">=</span><span class="s">&#34;item&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;hobbies&#34;</span> <span class="na">:id</span><span class="o">=</span><span class="s">&#34;item&#34;</span><span class="p">&gt;</span>{{item}}
  <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">isAgree</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[],</span>
      <span class="nx">arguments</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;篮球&#39;</span><span class="p">,</span><span class="s1">&#39;足球&#39;</span><span class="p">,</span><span class="s1">&#39;羽毛球&#39;</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>textarea</p>
<p>双向数据绑定</p>
</li>
<li>
<p>select</p>
<p>给option value值，select双向数据绑定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">select</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;choose&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;fruit&#34;</span> <span class="na">multiple</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;苹果&#34;</span> <span class="p">&gt;</span>苹果<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;香蕉&#34;</span> <span class="p">&gt;</span>香蕉<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;榴莲&#34;</span> <span class="p">&gt;</span>榴莲<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{fruit}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">fruit</span><span class="o">:</span><span class="p">[]</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>radio</p>
<p>给表单value值，双向数据绑定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;male&#34;</span><span class="p">&gt;</span>男<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;male&#34;</span>  <span class="na">value</span><span class="o">=</span><span class="s">&#34;男&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;sex&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;female&#34;</span><span class="p">&gt;</span>女<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;female&#34;</span>  <span class="na">value</span><span class="o">=</span><span class="s">&#34;女&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;sex&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{sex}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">sex</span><span class="o">:</span><span class="s1">&#39;男&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>当绑定了同一个v-model时，可以把name省略，这样也是互斥的（单选）</li>
</ol>
</li>
<li>
<p>checkbox</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="c">&lt;!--  checkbox单选框--&gt;</span>
  <span class="c">&lt;!--  &lt;label for=&#34;agree&#34;&gt;同意&lt;/label&gt;--&gt;</span>
  <span class="c">&lt;!--  &lt;input type=&#34;checkbox&#34; id=&#34;agree&#34; v-model=&#34;isAgree&#34;&gt;--&gt;</span>
  <span class="c">&lt;!--  &lt;button :disabled=&#34;!isAgree&#34;&gt;下一步&lt;/button&gt;--&gt;</span>
  <span class="c">&lt;!--  &lt;h2&gt;{{isAgree}}&lt;/h2&gt;--&gt;</span>

  <span class="c">&lt;!--  checkbox多选框--&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;篮球&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;hobbies&#34;</span><span class="p">&gt;</span>篮球
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;足球&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;hobbies&#34;</span><span class="p">&gt;</span>足球
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;乒乓球&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;hobbies&#34;</span><span class="p">&gt;</span>乒乓球
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;羽毛球&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;hobbies&#34;</span><span class="p">&gt;</span>羽毛球
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>宁的爱好是{{hobbies}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">isAgree</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nx">hobbies</span><span class="o">:</span> <span class="p">[]</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>

</code></pre></td></tr></table>
</div>
</div><p>给表单value值，双向数据绑定</p>
</li>
<li>
<p>注意：提交按钮submit取消默认行为，增加点击事件用ajax传递数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;http://itcast.cn&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">&gt;</span>姓名：<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;uname&#39;</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>性别：<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;man&#34;</span> <span class="p">&gt;</span>男<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;man&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;sex&#39;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;woman&#34;</span> <span class="p">&gt;</span> 女<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;radio&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;woman&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;sex&#39;</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>爱好：<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;basketball&#34;</span><span class="p">&gt;</span>篮球<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;basketball&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;hobbies&#39;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;sing&#34;</span><span class="p">&gt;</span>唱歌<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;sing&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;hobbies&#39;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;code&#34;</span><span class="p">&gt;</span>写代码<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;code&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;3&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;hobbies&#39;</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>职业：<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">select</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;occupation&#39;</span> <span class="na">multiple</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;0&#34;</span><span class="p">&gt;</span>请选择职业...<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;1&#34;</span><span class="p">&gt;</span>web前端<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;2&#34;</span><span class="p">&gt;</span>java后端<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;introduction&#34;</span><span class="p">&gt;</span>个人简介：<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">textarea</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">cols</span><span class="o">=</span><span class="s">&#34;30&#34;</span> <span class="na">rows</span><span class="o">=</span><span class="s">&#34;3&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;description&#39;</span><span class="p">&gt;&lt;/</span><span class="nt">textarea</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="err">@</span><span class="na">click</span><span class="err">.</span><span class="na">prevent</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;xqz&#39;</span><span class="p">,</span>
                <span class="nx">sex</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
                <span class="nx">hobbies</span><span class="o">:</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
                <span class="nx">occupation</span><span class="o">:</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
                <span class="nx">description</span><span class="o">:</span><span class="s1">&#39;你好&#39;</span>
            <span class="p">},</span><span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uname</span><span class="p">);</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sex</span><span class="p">);</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hobbies</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">occupation</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>

                    <span class="c1">//Ajax
</span><span class="c1"></span>                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="表单域修饰符">表单域修饰符</h4>
<p></p>
<ul>
<li>
<p>v-model.number</p>
<p>转为数值</p>
</li>
<li>
<p>trim</p>
<p>去掉开始和结尾的空格,不会去掉中间的</p>
</li>
<li>
<p>lazy</p>
<p>把双向绑定中的input事件切换为change事件，input是在输入时一直触发，change是在失去焦点时才更新数据</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="err">.</span><span class="na">number</span><span class="o">=</span><span class="s">&#39;age&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="err">.</span><span class="na">trim</span><span class="o">=</span><span class="s">&#39;info&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="err">.</span><span class="na">lazy</span><span class="o">=</span><span class="s">&#39;msg&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span>点击<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">age</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
                <span class="nx">info</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
                <span class="nx">msg</span><span class="o">:</span><span class="s1">&#39;&#39;</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="自定义指令">自定义指令</h3>
<h4 id="基本使用">基本使用</h4>
<p>Vue.directive(&lsquo;指令的名字&rsquo;,{</p>
<p>钩子函数</p>
<p>})</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-focus</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">inserted</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//el表示指令所绑定的元素
</span><span class="c1"></span>                <span class="nx">el</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>

            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==:focus()函数只在inserted中生效，而在bind中不生效</p>
<ul>
<li><code>bind</code> ：指令第一次绑定到元素上时调用</li>
<li><code>inserted</code>：表示元素在插入到DOM中的时候，会执行inserted函数，只执行一次</li>
<li><code>update</code> ：VNode更新的时候调用，可能会调用多次</li>
</ul>
<p>页面上的任何一个元素想要显示，首先需要浏览器的渲染引擎将元素加载到内存中形成DOM树，也就是说执行bind函数的时候，元素还没有插入到内存中去，因为，一个元素只有插入DOM之后，才会获得焦点。所以说，在bind函数中执行el.focus()焦点事件的时机是不对的；同理可得，==凡是与js样式有关的需在bind函数中执行<code>（如：el.style.color = 'blue'）</code>，而与js行为有关的，需在inserted函数中执行==</p>
<h4 id="带参数的自定义指令">带参数的自定义指令</h4>
<p>binding获取指令的参数值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-color</span><span class="o">=</span><span class="s">&#39;msg&#39;</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,{</span>
            <span class="nx">bind</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">,</span><span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">//根据指令的参数修改背景色
</span><span class="c1"></span>                <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">binding</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>
              <span class="p">}</span>
        <span class="p">});</span>
        <span class="kd">var</span> <span class="nx">vm</span><span class="o">=</span><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span><span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">color</span><span class="o">:</span><span class="s1">&#39;orange&#39;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="局部指令">局部指令</h4>
<ul>
<li>
<p>在Vue的实例中添加额外的属性directive</p>
</li>
<li>
<p>只能在本组件中使用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-color</span><span class="o">=</span><span class="s">&#39;msg&#39;</span> <span class="na">v-focus</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;blue&#39;</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="p">}</span>
            <span class="p">},</span>
     
            <span class="nx">directives</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">color</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">bind</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">binding</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="nx">focus</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">inserted</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">el</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="计算属性">计算属性</h3>
<ul>
<li>
<p>表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁</p>
</li>
<li>
<p>在Vue实例中添加computed属性，直接在插值表达式中调用函数名</p>
</li>
<li>
<p>==注意==：计算属性的数据是基于data的，data变化会引起计算属性的变化</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">reserveString</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><p>==计算属性和方法的区别==</p>
<ul>
<li>计算属性是基于他们的依赖进行缓存的，如果依赖不变则使用的是缓存的结果，依赖变化才重新计算</li>
<li>方法不存在缓存</li>
</ul>
<p>==注意==：</p>
<ol>
<li>计算属性也有set和get方法，因为一般不使用set方法所以会将set方法省略，直接写get方法</li>
</ol>
<h3 id="过滤器">过滤器</h3>
<ul>
<li>
<p>作用：格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定格式</p>
</li>
<li>
<p>自定义过滤器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">{</span>
<span class="s2">&#34;过滤器名称&#34;</span><span class="err">，</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
<span class="c1">//业务逻辑
</span><span class="c1"></span>	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>过滤器使用</p>
<ul>
<li>全局和局部，级联使用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;msg&#39;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{msg | upper}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{msg | upper | lower}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">:abc</span><span class="o">=</span><span class="s">&#39;msg | upper&#39;</span><span class="p">&gt;</span>测试数据<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c1">// Vue.filter(&#39;upper&#39;, function (val) {
</span><span class="c1"></span>        <span class="c1">//     return val.charAt(0).toUpperCase() + val.slice(1);
</span><span class="c1"></span>        <span class="c1">// });
</span><span class="c1"></span>        <span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;lower&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="c1">// 局部过滤器
</span><span class="c1"></span>            <span class="nx">filters</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">upper</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>带参数的过滤器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{date | format(&#39;yyyy-MM-dd&#39;)}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;format&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">arg</span> <span class="o">==</span> <span class="s1">&#39;yyyy-MM-dd&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
                <span class="nx">ret</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nx">getDate</span><span class="p">();</span>
                <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
            <span class="p">}</span>         
        <span class="p">})</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
            <span class="p">},</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="侦听器">侦听器</h3>
<ul>
<li>
<p>应用场景：数据变化时执行异步或开销较大的操作</p>
</li>
<li>
<p>数据一旦发生变化就通知侦听器所绑定的方法</p>
</li>
<li>
<p>一般用于监听v-model绑定的数据</p>
</li>
<li>
<p>用法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>		<span class="c1">//函数名和属性名一致，这样才知道监听的哪个属性
</span><span class="c1"></span>                <span class="nx">firstName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//val表示的是当前数据的最新值
</span><span class="c1"></span>                    <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
                <span class="p">},</span>
                <span class="nx">lastName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="生命周期">生命周期</h3>
<p></p>
<ul>
<li>
<p>挂载（初始化相关属性）</p>
<ul>
<li>
<p>beforeCreate：在实例初始化后，数据观测和事件配置之前被调用</p>
</li>
<li>
<p>created：在实例创建完成后立即被调用</p>
</li>
<li>
<p>beforeMount：在挂载开始之前被调用</p>
</li>
<li>
<p>mounted：el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子</p>
<p>注意：当这个函数调用代表初始化完成，页面中模板内容存在，可以填充数据</p>
</li>
</ul>
</li>
<li>
<p>更新（元素或组件的变更操作）</p>
<ul>
<li>beforeUpdate：数据更新时调用，发生在虚拟DOM打补丁之前</li>
<li>ubdated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子</li>
</ul>
</li>
<li>
<p>销毁（销毁相关属性）</p>
<ul>
<li>beforeDestroy：实例销毁之前调用</li>
<li>destroyed：实例销毁之后调用</li>
</ul>
</li>
</ul>
<h3 id="数组相关api">数组相关API</h3>
<h4 id="变异方法修改原有数组">变异方法（修改原有数组）</h4>
<p>作用：使得数组数据也具有响应式的特性</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<h4 id="替换数组生成新的数组">替换数组（生成新的数组）</h4>
<p>==注意==：需要赋值给原始的数组</p>
<ul>
<li>filter()</li>
<li>concat()</li>
<li>slice()</li>
</ul>
<h4 id="数组索引--对象属性">数组索引 || 对象属性</h4>
<p>直接使用数组索引的方法没有响应式的特性，所以Vue提供以下Api</p>
<p>Vue.set(vm.items,indexOfitem,newValue) || vm.$set(vm.items,indexOfitem,newValue)</p>
<ol>
<li>参数一表示要处理的数组名称</li>
<li>参数二表示要处理的数字索引</li>
<li>参数三表示要处理的数组的值</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#39;fname&#39;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;add&#39;</span><span class="p">&gt;</span>添加<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;del&#39;</span><span class="p">&gt;</span>删除<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;change&#39;</span><span class="p">&gt;</span>替换<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">:key</span><span class="o">=</span><span class="s">&#39;index&#39;</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#39;(item,index) in list&#39;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{info.name}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{info.age}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>{{info.gender}}<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">fname</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
                <span class="nx">list</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;apple&#39;</span><span class="p">,</span> <span class="s1">&#39;orange&#39;</span><span class="p">,</span> <span class="s1">&#39;banana&#39;</span><span class="p">],</span>
                <span class="nx">info</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;lisi&#39;</span><span class="p">,</span>
                    <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="c1">//数组api
</span><span class="c1"></span>            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">add</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fname</span><span class="p">);</span>
                <span class="p">},</span>
                <span class="nx">del</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                <span class="p">},</span>
                <span class="nx">change</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">list</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
        <span class="c1">//数组索引
</span><span class="c1"></span>        <span class="nx">Vue</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;lemon&#39;</span><span class="p">);</span>
        <span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;lemon2&#39;</span><span class="p">)</span>

        <span class="c1">//对象属性
</span><span class="c1"></span>        <span class="c1">//vm.info.gender=&#39;male&#39;;//只能显示，不能获取修改的
</span><span class="c1"></span>        <span class="nx">vm</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">info</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;female&#39;</span><span class="p">);</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="组件化开发">组件化开发</h2>
<h3 id="组件化开发思想">组件化开发思想</h3>
<p>Web Components通过创建封装好功能的定制元素解决组件化规范问题</p>
<h3 id="提供的组件">提供的组件</h3>
<ul>
<li>
<p>component</p>
<p>根据绑定的is属性来显示组件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">component</span> <span class="na">:is</span><span class="o">=</span><span class="s">&#34;&#39;keji&#39;&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">component</span><span class="p">&gt;</span>//显示自定义的keji组件
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="组件注册">组件注册</h3>
<p></p>
<p></p>
<ul>
<li>全局组件：可以在多个vue实例中使用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;button-counter&#39;</span><span class="p">,{</span>
            <span class="nx">data</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                <span class="k">return</span><span class="p">{</span>
                    <span class="nx">count</span><span class="o">:</span><span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">template</span><span class="o">:</span><span class="s1">&#39;&lt;button @click=&#34;handle&#34;&gt;点击了{{count}}次&lt;/button&gt;&#39;</span><span class="p">,</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>局部组件：只能在父组件中使用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&#34;app&#34;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">hello</span><span class="o">-</span><span class="nx">world</span><span class="o">&gt;&lt;</span><span class="err">/hello-world&gt;</span>
        <span class="o">&lt;</span><span class="nx">hello</span><span class="o">-</span><span class="nx">jerry</span><span class="o">&gt;&lt;</span><span class="err">/hello-jerry&gt;</span>
        <span class="o">&lt;</span><span class="nx">hello</span><span class="o">-</span><span class="nx">tom</span><span class="o">&gt;&lt;</span><span class="err">/hello-tom&gt;</span>
<span class="o">&lt;</span><span class="err">/div&gt;</span>
<span class="kd">var</span> <span class="nx">HelloWorld</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;HelloWorld&#39;</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;{{msg}}&lt;/div&gt;&#39;</span>
        <span class="p">}</span>
         <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{},</span>
            <span class="c1">//局部组件
</span><span class="c1"></span>            <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
                <span class="s1">&#39;hello-world&#39;</span><span class="o">:</span> <span class="nx">HelloWorld</span><span class="p">,</span>
                <span class="s1">&#39;hello-tom&#39;</span><span class="o">:</span> <span class="nx">HelloTom</span><span class="p">,</span>
                <span class="s1">&#39;hello-jerry&#39;</span><span class="o">:</span> <span class="nx">HelloJerry</span>
            <span class="p">}</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>data是函数不是对象，函数可以形成一个闭包环境使得每一个组件都有独立的数据</li>
<li>组件模板必须是单个根元素，不能有兄弟关系</li>
<li>组件模板内容可以是模板字符串</li>
<li>组件命名方式可以是-或者驼峰命名，驼峰命名只能用在模板字符串的其他组件中，但是在普通标签模板中必须使用-的方式。</li>
</ol>
<h3 id="模板的分离写法">模板的分离写法</h3>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">my-cpn</span><span class="p">&gt;&lt;/</span><span class="nt">my-cpn</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="c">&lt;!--script标签,类型必须是text/x-template--&gt;</span>
<span class="c">&lt;!--&lt;script type=&#34;text/x-template&#34; id=&#34;cpn&#34;&gt;--&gt;</span>
<span class="c">&lt;!--&lt;div&gt;--&gt;</span>
<span class="c">&lt;!--  &lt;h2&gt;我是标题&lt;/h2&gt;--&gt;</span>
<span class="c">&lt;!--  &lt;p&gt;我是内容,哈哈&lt;/p&gt;--&gt;</span>
<span class="c">&lt;!--&lt;/div&gt;--&gt;</span>
<span class="c">&lt;!--&lt;/script&gt;--&gt;</span>
<span class="c">&lt;!--template标签--&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>我是标题<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是内容,哈哈<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;my-cpn&#39;</span><span class="p">,{</span>
    <span class="nx">template</span><span class="o">:</span><span class="sb">`#cpn`</span>
  <span class="p">})</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="组件的数据存放问题">组件的数据存放问题</h3>
<ol>
<li>数据存放在组件自己的data属性中，组件的data属性时候一个函数，返回一个对象数据</li>
<li>不能使用vue实例的数据</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">my-cpn</span><span class="p">&gt;&lt;/</span><span class="nt">my-cpn</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>我是标题<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我是内容,哈哈<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>{{title}}<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;my-cpn&#39;</span><span class="p">,{</span>
    <span class="nx">template</span><span class="o">:</span><span class="sb">`#cpn`</span><span class="p">,</span>
    <span class="nx">data</span><span class="p">(){</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="nx">title</span><span class="o">:</span><span class="s1">&#39;abc&#39;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="vue调试工具vue-devtools">Vue调试工具：vue-devtools</h3>
<h3 id="组件通信">组件通信</h3>
<p></p>
<h4 id="父组件传子组件">父组件传子组件</h4>
<p></p>
<ul>
<li>
<p>父组件传值</p>
<p>在父组件中给对应的子组件绑定属性（注意要用v-bind才能绑定父组件中data属性里的值，否则传递的是字符串）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">menu-item</span> <span class="na">title</span><span class="o">=</span><span class="s">&#34;来自父组件的值&#34;</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">menu-item</span><span class="p">&gt;</span>//静态方式
<span class="p">&lt;</span><span class="nt">menu-item</span> <span class="na">:title</span><span class="o">=</span><span class="s">&#34;ptitle&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#39;hello&#39;</span><span class="p">&gt;</span>{{msg}}<span class="p">&lt;/</span><span class="nt">menu-item</span><span class="p">&gt;</span>//动态绑定属性值，属性值写在父组件的data中
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>子组件接受值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;menu-item&#39;</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">,</span><span class="s1">&#39;content&#39;</span><span class="p">],</span><span class="c1">//名称和父组件中一致,如果接受的是驼峰形式，在使用时改为-，除非是在字符串模板中
</span><span class="c1"></span>        <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;子组件本身的数据&#39;</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;{{msg + &#34;-------&#34;+ title + &#34;------&#34;+ content}}&lt;/div&gt;&#39;</span>
    <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="props数据验证">props数据验证</h5>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">cpn</span> <span class="na">:cmovies</span><span class="o">=</span><span class="s">&#34;movies&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{cmovies}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">cpn</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">template</span><span class="o">:</span><span class="sb">`#cpn`</span><span class="p">,</span>
    <span class="nx">data</span><span class="p">(){</span>
      <span class="k">return</span> <span class="p">{}</span>
    <span class="p">},</span>
    <span class="nx">props</span><span class="o">:</span><span class="p">{</span>
      <span class="c1">// 1.类型限制
</span><span class="c1"></span>      <span class="c1">// cmovies:Array,
</span><span class="c1"></span>
      <span class="c1">// 2.提供一些默认值
</span><span class="c1"></span>      <span class="nx">cmovies</span><span class="o">:</span><span class="p">{</span>
        <span class="nx">type</span><span class="o">:</span><span class="nb">Array</span><span class="p">,</span>
        <span class="k">default</span><span class="p">(){</span>
          <span class="k">return</span> <span class="p">[]</span>
        <span class="p">},</span><span class="c1">//如果不传的默认值,类型是对象或者数组时,必须使用函数的返回值
</span><span class="c1"></span>        <span class="nx">required</span><span class="o">:</span><span class="kc">true</span><span class="c1">//必须传值,否则报错
</span><span class="c1"></span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
      <span class="nx">movies</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span><span class="s1">&#39;2&#39;</span><span class="p">,</span><span class="s1">&#39;3&#39;</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="nx">components</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">cpn</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="props驼峰标识">props驼峰标识</h5>
<ol>
<li>v-bind不支持驼峰命名，只能用-连接</li>
</ol>
<h4 id="子组件传父组件">子组件传父组件</h4>
<ol>
<li>
<p>子组件通过this.$emit(&lsquo;事件名&rsquo;,参数)发射事件</p>
</li>
<li>
<p>父组件监听子组件的事件</p>
<p></p>
</li>
</ol>
<h4 id="子组件和双向绑定">子组件和双向绑定</h4>
<ol>
<li>
<p>子组件中不能双向绑定props中的值，虽然可以更改，但是不推荐这么做，因为props中的值应该来源于父组件，子组件没有权力自己去修改</p>
</li>
<li>
<p>如果要绑定props中的值，要先用data返回一个对象，然后去绑定data中的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">data</span><span class="p">(){</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">dnum1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">cnum1</span><span class="p">,</span>
    <span class="nx">dnum2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">cnum2</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果要将子组件输入框的值传递给父组件，首先将v-model拆分，v-bind绑定value来显示data中的值，@input绑定事件来修改data中的值，并在事件中添加this.$emit(&lsquo;num2-change&rsquo;,this.dnum2)来发射事件，父组件来监听事件</p>
<p></p>
</li>
</ol>
<h4 id="兄弟组件">兄弟组件</h4>
<ol>
<li>
<p>原理：通过事件中心管理组件中的通信</p>
</li>
<li>
<p>事件中心：var eventHub =  new  Vue()</p>
</li>
<li>
<p>监听事件：eventHub.$on(&lsquo;事件名称&rsquo;,addTodo)</p>
<p>销毁事件：eventHub.$off(&lsquo;事件名称&rsquo;)</p>
</li>
<li>
<p>触发事件：eventHub.$emit(&lsquo;事件名称&rsquo;,id) //事件名称与监听的一致</p>
</li>
<li>
<p>销毁事件：hub.$off(&lsquo;事件名&rsquo;)</p>
<p>==步骤==：</p>
<ol>
<li>兄弟组件按钮绑定点击事件</li>
<li>创建事件池</li>
<li>在组件中给事件池中绑定事件，每一个事件的名字都不一样</li>
<li>在点击事件中触发事件，也就是散发事件，到事件池中去触发一样的事件名的事件</li>
</ol>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>父组件<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#39;handle&#39;</span><span class="p">&gt;</span> 销毁事件<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">text-tom</span><span class="p">&gt;&lt;/</span><span class="nt">text-tom</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">text-jerry</span><span class="p">&gt;&lt;/</span><span class="nt">text-jerry</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c1">//提供事件中心
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">hub</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">();</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;text-tom&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">            &lt;div&gt;
</span><span class="sb">            &lt;div&gt;Tom:{{num}}&lt;/div&gt;
</span><span class="sb">            &lt;button @click=&#39;handle&#39;&gt;给兄弟组件+2&lt;/button&gt;
</span><span class="sb">            &lt;/div&gt;
</span><span class="sb">            `</span><span class="p">,</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">//触发jerry事件
</span><span class="c1"></span>                    <span class="nx">hub</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;jerry-event&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">mounted</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="c1">//监听事件
</span><span class="c1"></span>                <span class="nx">hub</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;tom-event&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">num</span> <span class="o">+=</span> <span class="nx">val</span><span class="p">;</span>
                <span class="p">})</span>
            <span class="p">},</span>
        <span class="p">});</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;text-jerry&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="nx">num</span><span class="o">:</span> <span class="mi">0</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">            &lt;div&gt;
</span><span class="sb">            &lt;div&gt;Jerry:{{num}}&lt;/div&gt;
</span><span class="sb">            &lt;button @click=&#39;handle&#39;&gt;给兄弟组件+1&lt;/button&gt;
</span><span class="sb">            &lt;/div&gt;
</span><span class="sb">            `</span><span class="p">,</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">hub</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;tom-event&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="nx">mounted</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">hub</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;jerry-event&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">num</span> <span class="o">+=</span> <span class="nx">val</span><span class="p">;</span>
                <span class="p">})</span>
            <span class="p">},</span>
        <span class="p">})</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>

            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">handle</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">hub</span><span class="p">.</span><span class="nx">$off</span><span class="p">(</span><span class="s1">&#39;tom-event&#39;</span><span class="p">);</span>
                    <span class="nx">hub</span><span class="p">.</span><span class="nx">$off</span><span class="p">(</span><span class="s1">&#39;jerry-event&#39;</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="组件访问">组件访问</h3>
<h4 id="父组件直接访问子组件">父组件直接访问子组件</h4>
<ol>
<li>通过$children：不常用</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">btnClick</span><span class="p">(){</span>
        <span class="c1">//访问子组件的methods
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">$children</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">showMessage</span><span class="p">()</span>
        <span class="c1">//访问子组件的data
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$children</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>2.通过$ref：对象类型（默认为空）</p>
<ul>
<li>先在子组件上添加ref属性</li>
<li>然后通过this.$ref获取</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue">  <span class="p">&lt;</span><span class="nt">cpn</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;aaa&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>
  	<span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">btnClick</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">);</span>
      <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="子组件直接访问父组件">子组件直接访问父组件</h4>
<ol>
<li>在子组件中使用this.$parent，但是一般不建议使用，因为这样会增加组件化开发的耦合度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">ccpn</span><span class="o">:</span> <span class="p">{</span>
            <span class="nx">template</span><span class="o">:</span> <span class="sb">`#ccpn`</span><span class="p">,</span>
            <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
              <span class="nx">btnClick</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">// 访问父组件
</span><span class="c1"></span>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
              <span class="p">}</span>
            <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="访问根组件">访问根组件</h4>
<ol>
<li>$root，即访问vue实例</li>
</ol>
<h3 id="组件插槽">组件插槽</h3>
<h4 id="基本使用-1">基本使用</h4>
<p></p>
<ol>
<li>在组件中使用<slot></slot></li>
<li>默认值写在标签中间</li>
<li>如果有多个值，同时放入组件中替换时，一起作为替换元素</li>
</ol>
<p>作用：父组件向子组件传递模板内容</p>
<p><menu-item>content</menu-item></p>
<p>==注意==：子组件会预留一个位置，就是所谓的插槽<slot></slot>来存放父组件在使用子组件时标签中的内容，插槽内容会随着content的改变而改变，如果content为空，则显示slot标签中的默认内容，有了就会覆盖默认内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">test-jerry</span><span class="p">&gt;</span>有bug<span class="p">&lt;/</span><span class="nt">test-jerry</span><span class="p">&gt;</span>//标签中的内容会替换默认值
        <span class="p">&lt;</span><span class="nt">test-jerry</span><span class="p">&gt;</span>有一个bug发生<span class="p">&lt;/</span><span class="nt">test-jerry</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;test-jerry&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span><span class="sb">            &lt;div&gt;
</span><span class="sb">            &lt;span&gt;ERROR:&lt;/span&gt;
</span><span class="sb">            &lt;slot&gt;默认内容&lt;/slot&gt;
</span><span class="sb">            &lt;/div&gt;
</span><span class="sb">            `</span>
        <span class="p">})</span>
        <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="具名插槽">具名插槽</h4>
<p>步骤：</p>
<ol>
<li>在模板字符串中给slot标签name值</li>
<li>在父组件中使用时，给标签slot=“name”从而给对应的插槽赋值</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">cpn</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">v-slot</span><span class="o">=</span><span class="s">&#34;center&#34;</span><span class="p">&gt;</span>666<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>我是组件<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;left&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>左边的<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;center&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>中间的<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;right&#34;</span><span class="p">&gt;&lt;</span><span class="nt">span</span><span class="p">&gt;</span>右边的<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">},</span>
    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">cpn</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">template</span><span class="o">:</span> <span class="sb">`#cpn`</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>渲染多条插槽赋值时</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"> <span class="p">&lt;</span><span class="nt">base-layout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;header&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>header赋值1<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>header赋值2<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;body&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>body赋值1<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>body赋值2<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">base-layout</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="作用域插槽">作用域插槽</h4>
<p></p>
<p>应用场景：父组件对子组件的内容进行加工处理,父组件替换子组中的标签，但是内容由子组件提供</p>
<p></p>
<p>步骤：</p>
<ol>
<li>子组件中把插槽中的值作为属性传给父组件，当然子组件的数据也可以来自父组件</li>
<li>父组件通过 slot-scope=‘自定义name'，name.子组件中绑定的属性，来获得子组件传来的值，这个值就是子组件中绑定的属性对应的值，==注意==要在<template>标签中进行操作</li>
<li>对传来的数据进行操作，从而影响父组件slot标签中的样式</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">cpn</span><span class="p">&gt;&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">cpn</span><span class="p">&gt;</span>
    <span class="c">&lt;!--    获取子组件中的pLanguage--&gt;</span>
    <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot-scope</span><span class="o">=</span><span class="s">&#34;slot2&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{slot2.abc.join(&#39;-&#39;)}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c">&lt;!--子组件--&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      //作用域插槽，pLanguage通过绑定的属性名abc，传递给父组件中的template
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">:abc</span><span class="o">=</span><span class="s">&#34;pLanguages&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;item in pLanguages&#34;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">},</span>
    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">cpn</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">template</span><span class="o">:</span> <span class="sb">`#cpn`</span><span class="p">,</span>
        <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span>
            <span class="nx">pLanguages</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;javascript&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>
          <span class="p">}</span>
        <span class="p">},</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="作用域插槽加具名插槽">作用域插槽加具名插槽</h4>
<ol>
<li>在子组件中给slot标签name属性</li>
<li>在template标签中添加slot属性来分辨是哪一个插槽</li>
<li>在子组件的slot标签中绑定属性</li>
<li>在template中同通过slot-scope的值来获得属性值</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">cpn</span><span class="p">&gt;</span>
    <span class="c">&lt;!--    获取子组件中的pLanguage--&gt;</span>
    <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot-scope</span><span class="o">=</span><span class="s">&#34;slot2&#34;</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;first&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{slot2.abc.join(&#39;-&#39;)}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">template</span> <span class="na">slot-scope</span><span class="o">=</span><span class="s">&#34;slot3&#34;</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;second&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{slot3.abcd}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">cpn</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;cpn&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">:abc</span><span class="o">=</span><span class="s">&#34;pLanguages&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;first&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">v-for</span><span class="o">=</span><span class="s">&#34;item in pLanguages&#34;</span><span class="p">&gt;</span>{{item}}<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;second&#34;</span> <span class="na">:abcd</span><span class="o">=</span><span class="s">&#34;info&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>第二个具名插槽<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">slot</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
    <span class="p">},</span>
    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">cpn</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">template</span><span class="o">:</span> <span class="sb">`#cpn`</span><span class="p">,</span>
        <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span>
            <span class="nx">pLanguages</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;javascript&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">],</span>
            <span class="nx">info</span><span class="o">:</span><span class="s1">&#39;222&#39;</span>
          <span class="p">}</span>
        <span class="p">},</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="vue前后端交互">Vue前后端交互</h2>
<h3 id="前后端交互模式">前后端交互模式</h3>
<h4 id="传统形式的url">传统形式的URL</h4>
<ul>
<li>格式：schema://host:port/path?query#fragment
<ol>
<li>schema:协议，例如http,https,ftp等</li>
<li>host:域名或者ip地址</li>
<li>port:端口，http默认端口80，可以省略</li>
<li>path:路径，例如/abc/a/b/c</li>
<li>query：查询参数，例如uname=lisi&amp;age=12</li>
<li>fragment：锚点(哈希Hash)，用于定位i页面的某个位置</li>
</ol>
</li>
</ul>
<h4 id="resful形式的url">Resful形式的URL</h4>
<ul>
<li>http请求方式
<ol>
<li>GET 查询</li>
<li>POST 添加</li>
<li>PUT 修改</li>
<li>DELETE 删除</li>
</ol>
</li>
</ul>
<p>==区别==：Resful形式的URL直接用/加参数，传统的需要加？</p>
<h3 id="promise用法">Promise用法</h3>
<h4 id="异步调用">异步调用</h4>
<ul>
<li>异步效果
<ol>
<li>定时器</li>
<li>Ajax</li>
<li>事件函数</li>
</ol>
</li>
</ul>
<h4 id="多次异步调用的依赖分析">多次异步调用的依赖分析</h4>
<ul>
<li>多次异步调用的结果顺序不确定</li>
<li>异步调用结果如果存在依赖需要嵌套，变成回调地狱</li>
</ul>
<h4 id="promise概述">Promise概述</h4>
<p>promise是一个对象，它可以获取异步操作的消息</p>
<p></p>
<h4 id="promise使用">Promise使用</h4>
<p>步骤：</p>
<ol>
<li>
<p>Promise对象实例化传函数作为参数，function有两个参数是resolve和reject用作正常和异常处理</p>
</li>
<li>
<p>实例对象的then方法，里面传两个函数作为参数，获取异步任务的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c1">// console.log(typeof Promise);
</span><span class="c1"></span>        <span class="c1">// console.dir(Promise);
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//这里用于实现异步任务
</span><span class="c1"></span>            <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
                <span class="c1">//正常情况
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="c1">//异常情况
</span><span class="c1"></span>                    <span class="nx">reject</span><span class="p">(</span><span class="s1">&#39;出错了&#39;</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
        <span class="p">});</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span><span class="c1">//hello
</span><span class="c1"></span>        <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span><span class="c1">//出错了
</span><span class="c1"></span>        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<ul>
<li>
<p>promise处理多个ajax请求</p>
<p>注意：封装的ajax方法中 return的是一个promise对象，下面then中return的也就是新的promise对象，然后.then的是新的promise对象来获取异步数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">function</span> <span class="nx">queryData</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
                <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//处理正常的情况
</span><span class="c1"></span>                        <span class="nx">resolve</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="c1">//处理异常情况
</span><span class="c1"></span>                        <span class="nx">reject</span><span class="p">(</span><span class="s1">&#39;服务器错误&#39;</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">};</span>
                <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
                <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
            <span class="p">});</span>
            <span class="k">return</span> <span class="nx">p</span><span class="p">;</span>
        <span class="p">};</span>

        <span class="c1">//发送多个ajax请求并且保证顺序
</span><span class="c1"></span>        <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data1&#39;</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//这里then的是return的promise的then
</span><span class="c1"></span>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data2&#39;</span><span class="p">)</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="链式调用">链式调用</h4>
<p></p>
<h4 id="then参数中的函数返回值">then参数中的函数返回值</h4>
<ol>
<li>
<p>返回promise对象</p>
<p>上面的queryData函数中返回的promise对象，可以继续调用then方法</p>
</li>
<li>
<p>返回普通值</p>
<p>返回的普通值，虽然是返回普通值但是会默认产生一个新的promise对象让下一个then调用，通过then参数中函数的参数接收该值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//发送多个ajax请求并且保证顺序
</span><span class="c1"></span>        <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data1&#39;</span><span class="p">)</span> <span class="c1">//返回promise对象
</span><span class="c1"></span>            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//返回promise对象
</span><span class="c1"></span>                    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                        <span class="nx">resolve</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
                    <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
                <span class="p">});</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="k">return</span> <span class="s1">&#39;hello&#39;</span> <span class="c1">//返回普通值,会默认产生一个新的promise对象让下一个then调用
</span><span class="c1"></span>            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="promise常用的api">Promise常用的API</h4>
<ol>
<li>
<p>实例方法</p>
<ul>
<li>
<p>p.then() 得到异步任务的正确结果</p>
</li>
<li>
<p>p.catch()获取异常的信息</p>
<p>==注意==：这里p.catch()与p.then()等同于在p.then()中写两个function，第二个function在异常时调用时（promise对象中的reject）等效，</p>
</li>
<li>
<p>p.finally() 成功与否都会执行（尚且不是正式标准）</p>
</li>
</ul>
</li>
<li>
<p>静态方法</p>
<ul>
<li>Promise.all()并发处理多个任务，==所有任务都执行完成才能得到结果==</li>
<li>Promise.race()并发处理多个任务，==只要有一个任务完成就能得到结果==,但是并不会阻止其他任务的执行</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//3个异步的接口调用
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data1&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">p3</span> <span class="o">=</span> <span class="nx">queryData</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/data2&#39;</span><span class="p">);</span>
        <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span><span class="c1">//返回的是一个数组，顺序和传参一一对应，直到所有结果都传过来的才执行then，得到所有结果
</span><span class="c1"></span>        <span class="p">});</span>
        <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span><span class="c1">//得到最快返回的一个结果
</span><span class="c1"></span>        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="接口调用-fetch用法">接口调用-fetch用法</h3>
<h4 id="基本特性">基本特性</h4>
<ul>
<li>更加简单的数据获取方式，可以看成是xhr的升级版</li>
<li>基于Promise实现</li>
</ul>
<h4 id="语法">语法</h4>
<ul>
<li>.then()获得正常数据，.catch()获得异常数据</li>
<li>第一个then的方法中返回data.text()是一个Promise对象</li>
<li>第二个then中才是真正的数据</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span><span class="c1">//text()方法属于fetchAPI的一部分，返回的是Promise对象
</span><span class="c1"></span>        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span><span class="c1">//拿到数据
</span><span class="c1"></span>        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="fetch请求参数">fetch请求参数</h4>
<h5 id="常用配置选项">常用配置选项</h5>
<ul>
<li>method(String)：HTTP请求方法，默认为GET（GET，POST，PUT，DELETE）</li>
<li>body(String)：HTTP的请求参数</li>
<li>headers(Object)：HTTP的请求头，默认为0</li>
</ul>
<h5 id="get">GET</h5>
<ul>
<li>
<p>传统url传递：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data3?id=123&#39;</span><span class="p">,</span> <span class="p">{</span><span class="c1">//用？跟上参数
</span><span class="c1"></span>            <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>传统url接收：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/data3&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;传统url(GET请求)传参&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="c1">//在query中拿到参数
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Resful形式的url传递：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data3/456&#39;</span><span class="p">,</span> <span class="p">{</span><span class="c1">//直接用/跟上参数
</span><span class="c1"></span>            <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Resful形式的url接收：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/data3/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="c1">//要跟上/:接收的参数名
</span><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Resful形式的url(GET请求)传参&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="c1">//用params拿到参数
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="delete">DELETE</h5>
<p>将method改为delete，接收时改为app.delete，其他同上</p>
<h5 id="post">POST</h5>
<p>在对象中加上body属性和headers属性</p>
<ul>
<li>
<p>请求内容格式为application/x-www-form-urlencoded的参数传递：</p>
<p>注意：body中写参数，用&amp;分隔，headers中设置对应的内容类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data3&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
            <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;uname=lisi&amp;pwd=123&#39;</span><span class="p">,</span> <span class="c1">//参数
</span><span class="c1"></span>            <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="c1">//请求头设置body中数据的内容类型,与后台bodypaser解析方法相对应
</span><span class="c1"></span>                <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>请求内容格式为application/x-www-form-urlencoded的参数接收：</p>
<ol>
<li>引入express的body-parser模块，用中间件和urlencoded方法进行解析，extended：false指用默认的解析器</li>
<li>用req.body获取参数</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span>
    <span class="nx">extended</span><span class="o">:</span> <span class="kc">false</span> <span class="c1">//使用express自带的解析模块
</span><span class="c1"></span><span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/data3&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;POST请求传递参数&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="s1">&#39;---&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>请求内容格式为application/json的参数传递:</p>
<p>注意：body中的json对象需要用JSON.stringify()转为json字符串，headers设置对应的格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data3&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
            <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
                <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
                <span class="nx">pwd</span><span class="o">:</span> <span class="s1">&#39;456&#39;</span>
            <span class="p">}),</span> <span class="c1">//参数
</span><span class="c1"></span>            <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="c1">//请求头设置body中数据的内容类型,与后台bodypaser解析方法相对应
</span><span class="c1"></span>                <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>请求内容格式为application/json的参数接收:</p>
<p>用bodyParser的json方法进行解析，获取同上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="put">PUT</h5>
<ul>
<li>一般用于修改数据</li>
</ul>
<ol>
<li>
<p>在url中携带需要修改的数据的id，可以用传统url或者Resful类型的url</p>
</li>
<li>
<p>method改为put</p>
</li>
<li>
<p>在body中写修改的数据，其他同post</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/data3/123&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;put&#39;</span><span class="p">,</span>
            <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
                <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;张三&#39;</span><span class="p">,</span>
                <span class="nx">pwd</span><span class="o">:</span> <span class="s1">&#39;789&#39;</span>
            <span class="p">}),</span> <span class="c1">//参数
</span><span class="c1"></span>            <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="c1">//请求头设置body中数据的内容类型,与后台bodypaser解析方法相对应
</span><span class="c1"></span>                <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<ul>
<li>
<p>接收参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/data3/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span><span class="c1">//Resful形式的参数
</span><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;PUT请求传递参数&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="s1">&#39;---&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="fetch响应结果">fetch响应结果</h4>
<h5 id="text">text()</h5>
<ul>
<li>
<p>返回体处理成字符串类型</p>
</li>
<li>
<p>可以用JSON.parse()转为json对象使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
            <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">uname</span><span class="p">);</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="json">json()</h5>
<ul>
<li>
<p>返回结果和JSON.parse(responseText)一样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
            <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">uname</span><span class="p">);</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>后台发送json数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
        <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;lisi&#39;</span><span class="p">,</span>
        <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span>
        <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;male&#39;</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="接口调用-axios用法">接口调用-axios用法</h3>
<h4 id="特征">特征：</h4>
<ol>
<li>支持浏览器和node.js</li>
<li>支持promise</li>
<li>能拦截请求和响应</li>
<li>自动转化JSON数据</li>
</ol>
<h4 id="基本用法">基本用法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;axios.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/adata&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span><span class="c1">//data属性是固定的用法，用于获取后台的数据
</span><span class="c1"></span>            <span class="p">});</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="axios常用api">axios常用API</h4>
<h5 id="get-1">GET</h5>
<ol>
<li>
<p>通过url地址传参</p>
<ul>
<li>
<p>传统url</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/axios?id=123&#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Resful形式的url</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/axios/123 &#39;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>后台接收传统url</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/axios&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;axios get 传递参数&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="c1">//通过query获取
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>后台接收Resful形式的url</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/axios/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;axios get 传递参数&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="c1">//通过params获取
</span><span class="c1"></span><span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>通过params属性</p>
<p>​		后台接收同传统url</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;axios&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">params</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">id</span><span class="o">:</span> <span class="mi">123</span>
            <span class="p">}</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">ret</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h5 id="delete-1">DELETE</h5>
<p>axios.delete()其他同get请求</p>
<h5 id="post-1">POST</h5>
<ul>
<li>
<p>默认json格式</p>
<p>不需要写params属性，后台在通过bodypaser.josn()解析后直接用req.body获取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;axios&#39;</span><span class="p">,</span> <span class="p">{</span>
                <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;lisi&#39;</span><span class="p">,</span>
                <span class="nx">pwd</span><span class="o">:</span> <span class="mi">123</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span> <span class="p">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/axios&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span><span class="p">);</span>
<span class="p">});</span>

</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>urlencdoed格式</p>
<p>需要new一个URLSearchParams()实例对象，用append方法添加值，将params传递，后台同json，需要bodyPaser的urlencoded解析</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">();</span>
        <span class="nx">params</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;uname&#39;</span><span class="p">,</span> <span class="s1">&#39;zhangsan&#39;</span><span class="p">);</span>
        <span class="nx">params</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;pwd&#39;</span><span class="p">,</span> <span class="s1">&#39;111&#39;</span><span class="p">);</span>
        <span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/axios&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="put-1">PUT</h5>
<ul>
<li>在url中携带id指要修改的目标，其他同post</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;axios/123&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;wangwu&#39;</span><span class="p">,</span>
            <span class="nx">pwd</span><span class="o">:</span> <span class="mi">123</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>后台接收时，如果时Resful形式的url需要/：id，id用query获取，其他用body获取</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/axios/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pwd</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="axios发送并发请求">axios发送并发请求</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//发送并发请求
</span><span class="c1"></span><span class="nx">axios</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">axios</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;http://123.207.32.32:8000/home/multidata&#39;</span>
<span class="p">}),</span><span class="nx">axios</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;http://123.207.32.32:8000/home/data&#39;</span><span class="p">,</span>
  <span class="nx">params</span><span class="o">:</span><span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;sell&#39;</span><span class="p">,</span>
    <span class="nx">page</span><span class="o">:</span><span class="mi">1</span>
  <span class="p">}</span>
<span class="p">})])</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">results</span><span class="p">=&gt;{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span>
  <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h4 id="axios响应结果">axios响应结果</h4>
<ul>
<li>data：实际响应结果</li>
<li>headers：响应头信息</li>
<li>status：响应状态码</li>
<li>statusText：响应状态信息</li>
</ul>
<h4 id="axios全局配置">axios全局配置</h4>
<p></p>
<p>axios.defaults.timeout = 3000;//超时时间</p>
<p>axios.defaults.baseURL = ‘http://localhost:3000/app’;//默认地址</p>
<p>axios.defaults.headers [ &lsquo;mytoken&rsquo; ] = &lsquo;dfsfsdfsfsfsfsrgrg&rsquo;;//设置请求头</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//配置请求头信息
</span><span class="c1"></span>        <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;mytoken&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span><span class="c1">//需要设置跨域，token
</span><span class="c1"></span>        <span class="c1">//需要解决跨域问题
</span><span class="c1"></span>        <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">baseURL</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:3000/&#39;</span><span class="p">;</span>
        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;axios&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
        <span class="p">})</span>

<span class="c1">//允许跨域
</span><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">rwq</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Access-Control-Allow-Origin&#34;</span><span class="p">,</span> <span class="s2">&#34;*&#34;</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Access-Control-Allow-Methods&#34;</span><span class="p">,</span> <span class="s2">&#34;PUT,GET,POSY,DELETE,OPTIONS&#34;</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Access-Control-Allow-Headers&#34;</span><span class="p">,</span> <span class="s2">&#34;X_Requested-With&#34;</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Access-Control-Allow-Headers&#34;</span><span class="p">,</span> <span class="s2">&#34;Content-Type&#34;</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Access-Control-Allow-Headers&#34;</span><span class="p">,</span> <span class="s2">&#34;mytoken&#34;</span><span class="p">);</span>
    <span class="nx">next</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="axios实例配置和模块化">axios实例配置和模块化</h4>
<p></p>
<ol>
<li>
<p>通过create方法创建对应的实例，配置对应的baseURL和其他设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建对应的axios实例
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">instance1</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="nx">baseURL</span><span class="o">:</span><span class="s1">&#39;http://123.207.32.32:8000&#39;</span><span class="p">,</span>
  <span class="nx">timeout</span><span class="o">:</span><span class="mi">5000</span>
<span class="p">})</span>

<span class="nx">instance1</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/home/multidata&#39;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span><span class="p">=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">instance1</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/home/data&#39;</span><span class="p">,</span>
  <span class="nx">params</span><span class="o">:</span><span class="p">{</span>
    <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;pop&#39;</span><span class="p">,</span>
    <span class="nx">page</span><span class="o">:</span><span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span><span class="p">=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>2.创建network文件夹，新建request.js,返回的是一个Promise对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="nx">axios</span> <span class="nx">from</span> <span class="s1">&#39;axios&#39;</span>

<span class="kr">export</span> <span class="kd">function</span> <span class="nx">request</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//创建实例
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">baseURL</span><span class="o">:</span> <span class="s1">&#39;http://123.207.32.32:8000&#39;</span><span class="p">,</span>
    <span class="nx">timout</span><span class="o">:</span> <span class="mi">5000</span>
  <span class="p">})</span>
  <span class="c1">//发送真正的网络请求，instace是axios本身返回的就是promise对象
</span><span class="c1"></span>  <span class="k">return</span> <span class="nx">instance</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span><span class="c1">//相当于axios（config）
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>3.使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="p">{</span><span class="nx">request</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./network/request&#34;</span><span class="p">;</span>

<span class="nx">request</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/home/data&#39;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span><span class="p">=&gt;{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="axios拦截器">axios拦截器</h4>
<ul>
<li>
<p>请求拦截器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>//axios拦截器
instance.interceptors.request.use(config=&gt;{
console.log(config)
//比如config中的一些信息不符合服务器的要求
//比如每次发送网络请求时，希望有动画
//某些网络请求必须携带一些特殊的信息，比如登录（token）
return config
},err=&gt;{
console.log(err)
})</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">
在发出请求之前设置一些信息

axios请求要到达服务器要经过拦截器

```javascript
      axios.interceptors.request.use(function (config) {
          console.log(config.url);
          config.headers.mytoken = &#39;nihao&#39;;
          return config;
      }, function (err) {
          console.log(err);//处理错误信息
      });
      axios.get(&#39;http://localhost:3000/adata&#39;).then(ret =&gt; {//请求头中会有mytoken
          console.log(ret);//返回的数据
      })
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>响应拦截器</p>
<p>在获取数据之前对数据做一些加工</p>
<p>服务器响应的数据要经过拦截器才能拿到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">response</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="c1">//对响应的数据进行处理
</span><span class="c1"></span>        <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">});</span>

        <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:3000/adata&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span><span class="c1">//这里拿到的就是data数据，不再是响应回来的对象
</span><span class="c1"></span>        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="接口调用-asyncawait用法">接口调用-async/await用法</h3>
<ul>
<li>ES7的新语法，可以更加方便得进行异步操作</li>
<li>async用于函数上（async函数得返回值时promise对象）</li>
<li>await用于saync函数中（await可以得到当前异步的结果）</li>
</ul>
<p>==注意==：因为async返回的也是个promise对象，在调用时也可以用then获得函数的返回值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">queryData</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;adata&#39;</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">queryData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：await后面必须跟promise实例对象，才能获取异步的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">num</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span><span class="c1">//resolve成功，reject失败
</span><span class="c1"></span>                <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;nihao&#39;</span><span class="p">)</span>
                <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
            <span class="p">});</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
        <span class="p">};</span>
        <span class="nx">num</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>处理多个异步任务</p>
<p>桉顺序写即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">baseURL</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:3000&#39;</span><span class="p">;</span>
        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">queryData</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;async1&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;async2?info=&#39;</span> <span class="o">+</span> <span class="nx">info</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span><span class="c1">//用info作为参数
</span><span class="c1"></span>            <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">queryData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span><span class="p">=&gt;{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="vue-router">Vue-router</h2>
<h3 id="路由">路由</h3>
<p></p>
<h4 id="后端路由">后端路由</h4>
<ul>
<li>URL请求地址与服务器资源之间的对应关系</li>
</ul>
<p></p>
<p></p>
<p></p>
<ul>
<li>SPA（单页面富应用）单页面开发技术核心</li>
<li>负责事件监听，触发事件后，通过事件函数渲染不同内容</li>
</ul>
<h4 id="url的hash">URL的hash</h4>
<p></p>
<h4 id="h5的histroy模式">H5的histroy模式</h4>
<ol>
<li>push入栈</li>
<li>histroy.back（）栈顶出栈,以为就是后退，histroy.forward()，把之前出栈的入栈，前进</li>
<li>histroy.go（负数：出栈几个，正数：入栈几个）</li>
</ol>
<p></p>
<p></p>
<p></p>
<h3 id="vue-router安装">Vue-router安装</h3>
<p></p>
<h3 id="vue-router基本使用">Vue-router基本使用</h3>
<p></p>
<p>步骤：</p>
<ol>
<li>
<p>在index.js中配置路由，导入组件，安装插件，创建router对象，加入路由映射</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//配置路由相关信息
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">VueRouter</span> <span class="nx">from</span> <span class="s1">&#39;vue-router&#39;</span>
<span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>

<span class="c1">//导入组件
</span><span class="c1"></span><span class="kr">import</span> <span class="nx">Home</span> <span class="nx">from</span> <span class="s1">&#39;../components/Home&#39;</span>
<span class="kr">import</span> <span class="nx">About</span> <span class="nx">from</span> <span class="s1">&#39;../components/About&#39;</span>
<span class="c1">//安装插件
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>
<span class="c1">//路由映射
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span>
  <span class="p">}</span>
<span class="p">]</span>

<span class="c1">//创建router对象
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
  <span class="nx">routes</span>
<span class="p">})</span>

<span class="kr">export</span> <span class="k">default</span> <span class="nx">router</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在mian.js中的vue实例挂载路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
<span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>
<span class="kr">import</span> <span class="nx">router</span> <span class="nx">from</span> <span class="s1">&#39;./router/index&#39;</span>
<span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>

<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">router</span><span class="p">,</span>
  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在App.vue中使用router-link和router-view使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home&#34;</span><span class="p">&gt;</span><span class="nx">首页</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
    <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/about&#34;</span><span class="p">&gt;</span><span class="nx">关于</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
    <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;</span><span class="o">&lt;</span><span class="err">/router-view&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="路由的默认路径">路由的默认路径</h3>
<p></p>
<p>路由重定向</p>
<ul>
<li>
<p>在路由规则中加上redirect属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//路由映射
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
    <span class="c1">//redirect重定向
</span><span class="c1"></span>    <span class="nx">redirect</span><span class="o">:</span><span class="s1">&#39;/home&#39;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="路由改为histroy模式">路由改为histroy模式</h3>
<p>index.js中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建router对象
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
  <span class="nx">routes</span><span class="p">,</span>
  <span class="nx">mode</span><span class="o">:</span><span class="s1">&#39;history&#39;</span><span class="c1">//改为histroy模式
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="router-link属性">router-link属性</h3>
<p></p>
<p>==注意==：</p>
<ol>
<li>
<p>active-class可以在创建路由对象时统一修改，通过LinkActiveClass属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建router对象
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
  <span class="nx">routes</span><span class="p">,</span>
  <span class="nx">mode</span><span class="o">:</span><span class="s1">&#39;history&#39;</span><span class="p">,</span>
  <span class="nx">linkActiveClass</span><span class="o">:</span><span class="s1">&#39;active&#39;</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="路由代码跳转">路由代码跳转</h3>
<p>==$router==:是指new的实例路由对象</p>
<p></p>
<h3 id="动态路由匹配">动态路由匹配</h3>
<p></p>
<ol>
<li>
<p>如果由多个url前面差不多的，只是参数发生变化</p>
</li>
<li>
<p>用/：id作为路由参数，进行动态路由匹配</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="err">path:&#39;/user/:userId&#39;,</span>
  <span class="err">component:User</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>由路由跳转的相应组件中用$route.params.xxx获得路由参数</p>
<p>==$route==：是指路由规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">computed</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">userId</span><span class="p">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">userId</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="路由懒加载">路由懒加载</h3>
<p></p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//懒加载导入组件
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()=&gt;</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;../components/Home&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">About</span> <span class="o">=</span> <span class="p">()=&gt;</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;../components/About&#39;</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">()=&gt;</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;../components/User&#39;</span><span class="p">)</span>
<span class="c1">//安装插件
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">)</span>
<span class="c1">//路由映射
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
    <span class="c1">//redirect重定向
</span><span class="c1"></span>    <span class="nx">redirect</span><span class="o">:</span><span class="s1">&#39;/home&#39;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/home&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">Home</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span> <span class="nx">About</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="nx">path</span><span class="o">:</span><span class="s1">&#39;/user/:userId&#39;</span><span class="p">,</span>
    <span class="nx">component</span><span class="o">:</span><span class="nx">User</span>
  <span class="p">}</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：路由都要使用路由懒加载的方式去写</p>
<h3 id="嵌套路由">嵌套路由</h3>
<p></p>
<ol>
<li>
<p>定义组件，定义路由规则，懒加载引人二级路由组件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="err">path:</span> <span class="err">&#39;/home&#39;,</span>
  <span class="err">component:</span> <span class="err">Home,</span> <span class="c1">//一层路由
</span><span class="c1"></span>  <span class="err">children:</span> <span class="err">[</span>
    <span class="err">{</span>
      <span class="err">path:&#39;&#39;,</span><span class="c1">//二层路由
</span><span class="c1"></span>      <span class="err">redirect:&#39;news&#39;</span>
    <span class="p">}</span>
    <span class="err">,</span>
    <span class="p">{</span>
      <span class="err">path:</span> <span class="err">&#39;news&#39;,</span>
      <span class="err">component:</span> <span class="err">HomeNews</span>
    <span class="p">}</span><span class="err">,</span>
    <span class="p">{</span>
      <span class="err">path:</span> <span class="err">&#39;message&#39;,</span>
      <span class="err">component:</span> <span class="err">HomeMessage</span>
    <span class="p">}</span><span class="err">]</span>
<span class="err">},</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在第一层组件中，使用router-link和router-view，注意：to属性的hash值要写全</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="nx">我是首页</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="nx">我是首页内容</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/news&#34;</span><span class="p">&gt;</span><span class="nx">新闻</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
  <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/home/message&#34;</span><span class="p">&gt;</span><span class="nx">消息</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;</span><span class="o">&lt;</span><span class="sr">/router-view&gt;/</span><span class="o">/</span><span class="nx">二级路由显示组件的地方</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Home&#34;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">style</span> <span class="na">scoped</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="路由传参">路由传参</h3>
<p></p>
<h4 id="router-link的to中传递">router-link的to中传递</h4>
<ol>
<li>
<p>parmas，通过$route.params获取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">computed</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">userId</span><span class="p">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">userId</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>query，通过$route.query获取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="nx">我是profile组件</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;{{</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">}}&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;{{</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">age</span><span class="p">}}&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;{{</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">height</span><span class="p">}}&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">template</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>参数传递，==注意==：要v-bind绑定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue">    <span class="p">&lt;</span><span class="nt">router-link</span> <span class="nt">:to</span><span class="s">=&#34;&#39;/user/&#39;+userId&#34;</span><span class="p">&gt;</span><span class="nx">用户</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
    <span class="p">&lt;</span><span class="nt">router-link</span> <span class="o">:</span><span class="na">to</span><span class="o">=</span><span class="s">&#34;{
</span><span class="s">      path:&#39;/profile&#39;,
</span><span class="s">      query:{
</span><span class="s">        name:&#39;xqz&#39;,age:12,height:1.80
</span><span class="s">      }
</span><span class="s">    }&#34;</span><span class="p">&gt;</span><span class="nx">档案</span><span class="o">&lt;</span><span class="err">/router-link&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="点击事件中传递">点击事件中传递</h4>
<ol>
<li>首层组件添加按钮，绑定事件</li>
<li>$router.push入栈，对象传参</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">profileClick</span><span class="p">(){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
    <span class="nx">path</span><span class="o">:</span><span class="s1">&#39;/profile&#39;</span><span class="p">,</span>
    <span class="nx">query</span><span class="o">:</span><span class="p">{</span>
      <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;cube&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="props的值为bool类型">props的值为bool类型</h4>
<ul>
<li>$router与对应的路由形成了高度的耦合，不够灵活，所以一般使用props将组件和路由解耦
<ol>
<li>在路由中添加pros属性，为true</li>
<li>在组件中定义接收的参数</li>
<li>在模板中使用</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/1&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/2&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/3&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/register&#34;</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue-router.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">props</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span><span class="c1">//使用props接收路由参数
</span><span class="c1"></span>                <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;User{{id}}组件&lt;/h1&gt;&#39;</span>
            <span class="p">}</span>
            <span class="kr">const</span> <span class="nx">Register</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;h1&gt;Register组件&lt;/h1&gt;`</span>
            <span class="p">}</span>

            <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
                <span class="nx">routes</span><span class="o">:</span> <span class="p">[{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
                        <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;/user&#39;</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
                        <span class="nx">props</span><span class="o">:</span><span class="kc">true</span> <span class="c1">//开启路由传参,route.params会被设置为组件属性
</span><span class="c1"></span>                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/register&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">Register</span> 
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">})</span>
            <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
                <span class="nx">router</span> <span class="c1">//挂载
</span><span class="c1"></span>            <span class="p">})</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="props的值为对象类型">props的值为对象类型</h4>
<ol>
<li>
<p>路由的props属性值为对象，此时id无法使用</p>
</li>
<li>
<p>在组件中用props依次接收</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/1&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/2&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/3&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/register&#34;</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue-router.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;uname&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span> <span class="c1">//使用props接收路由参数
</span><span class="c1"></span>                <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;User{{uname + age}}组件&lt;/h1&gt;&#39;</span>
            <span class="p">}</span>
            <span class="kr">const</span> <span class="nx">Register</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;h1&gt;Register组件&lt;/h1&gt;`</span>
            <span class="p">}</span>

            <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
                <span class="nx">routes</span><span class="o">:</span> <span class="p">[{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
                        <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;/user&#39;</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
                        <span class="c1">//props: true //开启路由传参,route.params会被设置为组件属性
</span><span class="c1"></span>                        <span class="c1">//参数为对象，此时id就无法使用了
</span><span class="c1"></span>                        <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
                            <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;lisi&#39;</span><span class="p">,</span>
                            <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span>
                        <span class="p">}</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/register&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">Register</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">})</span>
            <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
                <span class="nx">router</span> <span class="c1">//挂载
</span><span class="c1"></span>            <span class="p">})</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="props的值为函数型">props的值为函数型</h4>
<ul>
<li>
<p>将上面的动态参数和静态参数结合起来使用</p>
</li>
<li>
<p>箭头函数，参数为route，返回一个对象，动态参数id用route.params.id获取</p>
</li>
<li>
<p>组件中通过props接收</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/1&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/2&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/3&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/register&#34;</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue-router.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span><span class="s1">&#39;uname&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span> <span class="c1">//使用props接收路由参数
</span><span class="c1"></span>                <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;User{{id+uname + age}}组件&lt;/h1&gt;&#39;</span>
            <span class="p">}</span>
            <span class="kr">const</span> <span class="nx">Register</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;h1&gt;Register组件&lt;/h1&gt;`</span>
            <span class="p">}</span>

            <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
                <span class="nx">routes</span><span class="o">:</span> <span class="p">[{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
                        <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;/user&#39;</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
                        <span class="c1">//参数为函数
</span><span class="c1"></span>                        <span class="nx">props</span><span class="o">:</span> <span class="nx">route</span> <span class="p">=&gt;</span> <span class="p">({</span>
                                <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;zs&#39;</span><span class="p">,</span><span class="c1">//静态参数
</span><span class="c1"></span>                                <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span>
                                <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="c1">//动态参数
</span><span class="c1"></span>                            <span class="p">}</span>
                        <span class="p">)</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/register&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">Register</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">})</span>
            <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
                <span class="nx">router</span> <span class="c1">//挂载
</span><span class="c1"></span>            <span class="p">})</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="route和router的区别">$route和$router的区别</h3>
<p></p>
<h3 id="vue-router命名路由">Vue-router命名路由</h3>
<ul>
<li>
<p>给路由规则起一个别名，加上name属性</p>
</li>
<li>
<p>此时router-link的to属性中绑定（注意:to前要加冒号）一个对象，name属性表示要去往的路由，params属性是一个对象，表示传递的参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/1&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/user/2&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">:to</span><span class="o">=</span><span class="s">&#34;{name:&#39;user&#39;,params:{id:3}}&#34;</span><span class="p">&gt;</span>User<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">router-link</span> <span class="na">to</span><span class="o">=</span><span class="s">&#34;/register&#34;</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">router-link</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;&lt;/</span><span class="nt">router-view</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;../js/vue-router.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;uname&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">],</span>
                <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;User{{id+uname + age}}组件&lt;/h1&gt;&#39;</span>
            <span class="p">}</span>
            <span class="kr">const</span> <span class="nx">Register</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">template</span><span class="o">:</span> <span class="sb">`&lt;h1&gt;Register组件&lt;/h1&gt;`</span>
            <span class="p">}</span>

            <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
                <span class="nx">routes</span><span class="o">:</span> <span class="p">[{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
                        <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;/user&#39;</span>
                    <span class="p">},</span>
                    <span class="p">{</span> <span class="c1">//命名路由
</span><span class="c1"></span>                        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/user/:id&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">User</span><span class="p">,</span>
                        <span class="nx">props</span><span class="o">:</span> <span class="nx">route</span> <span class="p">=&gt;</span> <span class="p">({</span>
                            <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;zs&#39;</span><span class="p">,</span>
                            <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span>
                            <span class="nx">id</span><span class="o">:</span> <span class="nx">route</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
                        <span class="p">})</span>
                    <span class="p">},</span>
                    <span class="p">{</span>
                        <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/register&#39;</span><span class="p">,</span>
                        <span class="nx">component</span><span class="o">:</span> <span class="nx">Register</span>
                    <span class="p">}</span>
                <span class="p">]</span>
            <span class="p">})</span>
            <span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
                <span class="nx">router</span> <span class="c1">//挂载
</span><span class="c1"></span>            <span class="p">})</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="vue-router导航守卫">Vue-router导航守卫</h3>
<h4 id="vue-router全局导航守卫">Vue-router全局导航守卫</h4>
<p></p>
<p></p>
<ol>
<li>
<p>在路由跳转时需要改变title</p>
</li>
<li>
<p>在路由规则中添加固有属性meta，将数据写入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">path:</span> <span class="err">&#39;/home&#39;,</span>
    <span class="err">component:</span> <span class="err">Home,</span>
    <span class="err">meta:{</span>
      <span class="err">title:&#39;首页&#39;</span><span class="c1">//在路由规则中添加属性
</span><span class="c1"></span>    <span class="p">}</span><span class="err">,</span>
    <span class="err">children:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="err">path:&#39;&#39;,</span>
        <span class="err">redirect:&#39;news&#39;</span>
      <span class="p">}</span>
      <span class="p">,</span>
      <span class="p">{</span>
        <span class="err">path:</span> <span class="err">&#39;news&#39;,</span>
        <span class="err">component:</span> <span class="err">HomeNews</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="err">path:</span> <span class="err">&#39;message&#39;,</span>
        <span class="err">component:</span> <span class="err">HomeMessage</span>
      <span class="p">}]</span>
  <span class="err">},</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>调用路由对象的beforeEach方法（在路由跳转时自动调用），二级路由中没有meta属性，所以统一通过to对象（实际上是去往的$route）的matched(一个数组)去获取第一个对象（一级路由）,其中有meta属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">router</span><span class="p">.</span><span class="nx">beforeEach</span><span class="p">((</span><span class="nx">to</span><span class="p">,</span><span class="nx">from</span><span class="p">,</span><span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;{</span>
  <span class="c1">//从from跳转到to
</span><span class="c1"></span>  <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span><span class="nx">to</span><span class="p">.</span><span class="nx">matched</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">meta</span><span class="p">.</span><span class="nx">title</span>
  <span class="nx">next</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="组件内导航守卫">组件内导航守卫</h4>
<p></p>
<h3 id="keep-alive">keep-alive</h3>
<ol>
<li>
<p>keep-alive是vue的，router-view是vue-router的</p>
</li>
<li>
<p>在切换路由时，会不断调用组件的created和distroyed方法，不断地创建和销毁组件，用keep-alive可以只创建一次。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue">    <span class="p">&lt;</span><span class="nt">keep-alive</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;</span><span class="o">&lt;</span><span class="err">/router-view&gt;</span>
    <span class="o">&lt;</span><span class="err">/keep-alive&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但是这样并不能保留之前用户地选择地路由状态</p>
</li>
<li>
<p>在离开前利用组件路由导航的beforeRouteLeave钩子函数来保存此时的路由path，然后在调用activated钩子函数（来到路由对应的组件时调用）来设置保存的path</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//到达当前页面时调用，前提时有keep-alive
</span><span class="c1"></span><span class="nx">activated</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span><span class="c1">//路由地址进栈
</span><span class="c1"></span><span class="p">},</span>
<span class="c1">//在路由切换前调用
</span><span class="c1"></span><span class="nx">beforeRouteLeave</span><span class="p">(</span><span class="nx">to</span> <span class="p">,</span><span class="nx">from</span><span class="p">,</span><span class="nx">next</span><span class="p">){</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">path</span>
  <span class="nx">next</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>==总结==：</p>
<ol>
<li>
<p>keep-alive保留组件不被销毁，导航守卫保留组件状态</p>
</li>
<li>
<p>==activated和deacrivated只有在keep-alive标签中才存在==</p>
</li>
<li>
<p>如果遇到了在router-view中显示，但是想要频繁创建的组件时，keep-alive有其他属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-vue" data-lang="vue"><span class="p">&lt;</span><span class="nt">keep-alive</span> <span class="na">exclude</span><span class="o">=</span><span class="s">&#34;Profile,User&#34;</span><span class="p">&gt;</span><span class="c1">//这里是组件的name
</span><span class="c1"></span>  <span class="p">&lt;</span><span class="nt">router-view</span><span class="p">&gt;</span><span class="o">&lt;</span><span class="err">/router-view&gt;</span>
<span class="o">&lt;</span><span class="err">/keep-alive&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h2 id="vue-cli">Vue-cli</h2>
<p></p>
<p>作用：用于生成Vue项目基础架构</p>
<p>==注意==：</p>
<ol>
<li>webpack要全局安装：npm install webpack -g</li>
</ol>
<p>安装vue-cli</p>
<ol>
<li>npm install -g @vue/cli</li>
</ol>
<p></p>
<p></p>
<h3 id="创建vue项目">创建vue项目</h3>
<h4 id="基于交互命令行的方式">基于交互命令行的方式</h4>
<p>命令行 vue create 项目名称</p>
<p></p>
<h4 id="基于图形化界面的方式">基于图形化界面的方式</h4>
<ol>
<li>命令行vue ui</li>
</ol>
<h3 id="vue脚手架生成的项目结构">Vue脚手架生成的项目结构</h3>
<p></p>
<ul>
<li>browsers：浏览器相关</li>
<li>gitignore：git提交时需要忽略的</li>
<li>babel：babel编译打包相关</li>
<li>package.json：依赖情况</li>
</ul>
<p>==注意==：</p>
<ol>
<li>如果要添加额外的配置，新建vue.config.js文件：module.exports{}</li>
</ol>
<h3 id="vue脚手架的自定义配置">Vue脚手架的自定义配置</h3>
<p></p>
<ul>
<li>
<p>通过单独的配置文件配置项目</p>
<p>新建vue.config.js文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">devServer</span><span class="o">:</span><span class="p">{</span>
    <span class="c1">//自动打开浏览器
</span><span class="c1"></span>    <span class="nx">open</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
    <span class="c1">//端口号
</span><span class="c1"></span>    <span class="nx">port</span><span class="o">:</span><span class="mi">8878</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="vuex">Vuex</h2>
<h3 id="概念">概念</h3>
<p></p>
<h3 id="使用场景">使用场景</h3>
<p>==注意==：</p>
<ol>
<li>getters相当于组件中的computed</li>
<li>mutations相当于组件中的methods，因为集中状态化管理和响应式的需要，所以不能直接操作state中的数据，通过vuex中的这两个属性来操作</li>
</ol>
<p></p>
<h3 id="多界面状态管理">多界面状态管理</h3>
<p></p>
<h3 id="使用">使用</h3>
<ol>
<li>
<p>在store文件夹得index文件中，定义state和mucation，mucation中主要定义方法来操作state中的属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
<span class="kr">import</span> <span class="nx">Vuex</span> <span class="nx">from</span> <span class="s1">&#39;vuex&#39;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Vuex</span><span class="p">)</span>

<span class="kr">export</span> <span class="k">default</span> <span class="k">new</span> <span class="nx">Vuex</span><span class="p">.</span><span class="nx">Store</span><span class="p">({</span>
  <span class="nx">state</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">:</span><span class="mi">1000</span>
  <span class="p">},</span>
  <span class="nx">mutations</span><span class="o">:</span> <span class="p">{</span>
    <span class="c1">//方法
</span><span class="c1"></span>    <span class="nx">add</span><span class="p">(</span><span class="nx">state</span><span class="p">){</span>
      <span class="nx">state</span><span class="p">.</span><span class="nx">counter</span><span class="o">++</span>
    <span class="p">},</span>
    <span class="nx">sub</span><span class="p">(</span><span class="nx">state</span><span class="p">){</span>
      <span class="nx">state</span><span class="p">.</span><span class="nx">counter</span><span class="o">--</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
  <span class="p">},</span>
  <span class="nx">modules</span><span class="o">:</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>通过$store.state.变量名去使用，$store.commit(&lsquo;方法名&rsquo;)去修改变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>{{$store.state.counter}}<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;add&#34;</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sub&#34;</span><span class="p">&gt;</span>-<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">import</span> <span class="nx">HelloVuex</span> <span class="nx">from</span> <span class="s2">&#34;./components/HelloVuex&#34;</span><span class="p">;</span>

  <span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//提交到vuex的mutations中定义的方法
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">)</span>
      <span class="p">},</span>
      <span class="nx">sub</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;sub&#39;</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">HelloVuex</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
</li>
</ol>
<h4 id="state">State</h4>
<p></p>
<h4 id="getters">Getters</h4>
<p></p>
<ol>
<li>
<p>getters相当于组件中的计算属性computed</p>
</li>
<li>
<p>getters中的函数可以接收2个参数，第一个为state对象，第二个为getters对象</p>
</li>
<li>
<p>可以通过getters对象来调用一些方法</p>
</li>
<li>
<p>如果要传参，没有第三个参数的位置，此时返回值是一个函数，然后掉用的时候传参</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">$store</span><span class="p">.</span><span class="nx">getters</span><span class="p">.</span><span class="nx">moreAgeStu</span><span class="p">(</span><span class="mi">15</span><span class="p">)}}</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
    <span class="nx">moreAgeStu</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">students</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">s</span> <span class="p">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">age</span> <span class="o">&gt;</span> <span class="nx">age</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p></p>
<h4 id="mutation">Mutation</h4>
<ol>
<li>
<p>在mutation中定义方法</p>
</li>
<li>
<p>在组件的methods中通过this.$store.commit(&lsquo;mutation中定义的方法名&rsquo;)来对state中的数据进行操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">      <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//提交到vuex的mutations中定义的方法
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">)</span>
      <span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果在提交commit时需要提交参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">      <span class="nx">addCount</span><span class="p">(</span><span class="nx">count</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;incrementCount&#39;</span><span class="p">,</span><span class="nx">count</span><span class="p">)</span>
      <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>mutation中接收参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">incrementCount</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span><span class="nx">count</span><span class="p">){</span><span class="c1">//第一个参数为state，第二个为传入的参数
</span><span class="c1"></span>  <span class="nx">state</span><span class="p">.</span><span class="nx">counter</span><span class="o">+=</span><span class="nx">count</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p></p>
<h5 id="提交风格">提交风格</h5>
<p></p>
<h5 id="类型常量">类型常量</h5>
<ol>
<li>
<p>在store目录下新建一个mutations-types文件，export const name=’‘</p>
<p>来定义常量=mutations中的方法名</p>
</li>
<li>
<p>在mutations中,[常量]（）{}来定义方法，之后在commit中直接提交常量名</p>
</li>
</ol>
<p></p>
<h5 id="mutation同步函数">Mutation同步函数</h5>
<ol>
<li>Mutation中必须是同步函数，否则devtools不能监控哪个变量的变化</li>
</ol>
<p></p>
<h4 id="action">Action</h4>
<p>相当于一个中转站</p>
<ol>
<li>
<p>和mutation相似，用于存放异步函数，参数为context</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
    <span class="c1">//context上下文,相当于$store
</span><span class="c1"></span>    <span class="nx">aUpdateInfo</span><span class="p">(</span><span class="nx">context</span><span class="p">){</span>
      <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
        <span class="nx">context</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">)</span><span class="c1">//提交到mutation中的方法
</span><span class="c1"></span>      <span class="p">},</span><span class="mi">1000</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用时，通过$store.dispath(&lsquo;方法名&rsquo;)提交</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">      <span class="nx">aupdateInfo</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;aUpdateInfo&#39;</span><span class="p">)</span><span class="c1">//提交到action中的方法
</span><span class="c1"></span>      <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果异步完成后需要知道，则可以返回promise对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
    <span class="c1">//context上下文,相当于$store
</span><span class="c1"></span>    <span class="nx">aUpdateInfo</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//返回一个promise对象
</span><span class="c1"></span>      <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
          <span class="nx">context</span><span class="p">.</span><span class="nx">commit</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">)</span>
          <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span>
        <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>通过then获取数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">      <span class="nx">aupdateInfo</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;aUpdateInfo&#39;</span><span class="p">,</span><span class="s1">&#39;携带的信息&#39;</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)=&gt;{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span><span class="c1">//ok
</span><span class="c1"></span>        <span class="p">})</span>
      <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="modules">Modules</h4>
<p>作用：防止state过于臃肿</p>
<p></p>
<ol>
<li>
<p>定义对象ModuleA，在modules中使用</p>
</li>
<li>
<p>ModuleA中的getters有三个参数，最后一个是根state</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">  <span class="nx">getters</span><span class="o">:</span><span class="p">{</span>
      <span class="c1">//自身模块中的state和getters，rootstate是根state
</span><span class="c1"></span>    <span class="nx">aadd</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span><span class="nx">getters</span><span class="p">,</span><span class="nx">rootState</span><span class="p">){</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">num</span><span class="o">+</span><span class="nx">rootState</span><span class="p">.</span><span class="nx">counter</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用模块中的state和getters</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{$store.state.a.num}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>{{$store.getters.aadd}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>mutations和actions</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json">  <span class="err">mutations:</span> <span class="p">{</span>
    <span class="err">updateName(state,</span> <span class="err">payload)</span> <span class="err">{</span>
      <span class="err">state.num</span> <span class="err">=</span> <span class="err">payload</span>
    <span class="p">}</span>
  <span class="err">},</span>
  <span class="err">actions:</span> <span class="p">{</span>
    <span class="err">aupdateIndo(context)</span> <span class="err">{</span>
      <span class="err">setTimeout(()</span> <span class="err">=&gt;</span> <span class="err">{</span>
        <span class="err">context.commit(&#39;updateInfo&#39;,</span> <span class="err">2001)</span>
      <span class="p">}</span><span class="err">,</span> <span class="mi">1000</span><span class="err">)</span>
    <span class="err">}</span>
  <span class="err">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-JavaScript" data-lang="JavaScript">      <span class="nx">asyncUpdateInfo</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="s1">&#39;aupdateIndo&#39;</span><span class="p">)</span>
      <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>项目结构</p>
<ol>
<li>将根中的每一个对象，除了state都单独抽出来</li>
<li>再把moduleA放在modules文件夹中</li>
</ol>
<p></p>
<h2 id="element-ui">Element-UI</h2>
<h3 id="基于命令行方式手动安装">基于命令行方式手动安装</h3>
<ol>
<li>npm i element-ui -S</li>
<li>在入口文件中导入Element-UI相关资源</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">import</span> <span class="nx">ElementUI</span> <span class="nx">from</span> <span class="s1">&#39;elemoent-ui&#39;</span> <span class="c1">// 导入ElementUI组件库
</span><span class="c1"></span><span class="kr">import</span> <span class="s1">&#39;element-ui/lib/theme-chalk/index.css&#39;</span> <span class="c1">// 导入ElementUI组件相关样式
</span><span class="c1">// 把element-ui配置成vue的插件
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">ElementUI</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="基于图形化界面自动安装">基于图形化界面自动安装</h3>
<ol>
<li>vue ui</li>
<li>通过Vue项目管理器，进入具体的项目配置面板</li>
<li>点击插件=》添加插件，进入插件查询面板</li>
<li>安装vue-cli-plugin-element</li>
<li>配置插件，实现按需导入，从而减少打包后项目的体积</li>
</ol>
]]></description>
</item><item>
    <title>nodejs</title>
    <link>http://example.org/posts/nodejs/</link>
    <pubDate>Fri, 23 Jul 2021 10:37:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/nodejs/</guid>
    <description><![CDATA[<h1 id="环境变量">环境变量</h1>
<ol>
<li>当我们在命令行窗口打开一个文件或调用一个程序时，系统会首先在当前目录下寻找文件程序，如果找到了直接打开，如果没找到会依次到环境变量path的路径中寻找，否则报错，类似于作用域链。</li>
<li>将一些经常需要访问的程序和文件的路径添加到path中，这样我们就可以在任意位置来访问这些文件和程序了。</li>
</ol>
<h1 id="进程和线程">进程和线程</h1>
<h2 id="进程">进程</h2>
<ol>
<li>负责为程序的运行提供必备的环境</li>
<li>进程就相当于工厂中的车间</li>
</ol>
<h2 id="线程">线程</h2>
<ol>
<li>线程计算机中的最小的计算单位，线程负责执行进程中的程序</li>
<li>线程相当于工厂中的工人</li>
</ol>
<h3 id="单线程">单线程</h3>
<ol>
<li>js是单线程</li>
</ol>
<h3 id="多线程">多线程</h3>
<h1 id="node简介">node简介</h1>
<ol>
<li>能够在服务器端运行的JavaScript环境</li>
<li>处理不了并发量过高的情况，基于web的轻量级应用</li>
<li>node是单线程，处理速度很快，对服务器硬件要求低。但是处理不了过多的用户，此时只能用分布式。</li>
</ol>
<h1 id="node基础">node基础</h1>
<h2 id="模块化">模块化</h2>
<ol>
<li>
<p>在node中，一个js文件就是一个模块</p>
</li>
<li>
<p>在node中，通过require()函数来引入外部的模块,require()可以传递一个文件的路径作为参数，node将会自动根据该路径来引入外部模块</p>
</li>
<li>
<p>使用require()引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块</p>
</li>
<li>
<p>在node中，每一个js文件中的js代码都是独立运行在一个函数中的function（）{}，在全局里看不到，所以一个模块中的变量和函数在其他模块中无法访问</p>
</li>
<li>
<p>在node中向外部暴露属性或方法，用exports，将需要暴露给外部的变量或方法设置为exports的属性即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">exports</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="s2">&#34;我是02.module.js中的x&#34;</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="模块标识">模块标识</h2>
<ol>
<li>使用require()引入外部模块时，使用的就是==模块标识==，我们可以通过模块标识来找到指定的模块</li>
</ol>
<h3 id="核心模块">核心模块</h3>
<ol>
<li>
<p>由node引擎提供的模块</p>
</li>
<li>
<p>核心模块的标识就是模块的名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;fs&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="文件模块">文件模块</h3>
<ol>
<li>由用户自己创建的模块</li>
<li>文件模块的标识就是文件的路径（绝对，相对）</li>
</ol>
<h2 id="全局对象">全局对象</h2>
<ol>
<li>
<p>global，它的作用和window类似</p>
</li>
<li>
<p>在全局中创建的变量都会作为global的属性保存</p>
</li>
<li>
<p>在全局中创建的函数都会作为global方法保存</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">{</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">log</span><span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">a</span><span class="p">)}</span><span class="c1">//argunments.callee当前执行的函数对象
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>node在执行模块中的代码时，它会在代码的最顶部，添加function（exports，require，module，_filename,_dirname）{</p>
<p>在代码的最底部，添加如下代码 }</p>
</li>
<li>
<p>实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参</p>
<table>
<thead>
<tr>
<th>实参</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>exports</td>
<td>该对象用于将变量或函数暴露到外部</td>
</tr>
<tr>
<td>require</td>
<td>函数，用来引入外部的模块</td>
</tr>
<tr>
<td>module</td>
<td>代表的是当前模块自身，exports就是module的属性，可以使用exports导出，也可以使用module.exports导出</td>
</tr>
<tr>
<td>_filename</td>
<td>当前模块的完整路径</td>
</tr>
<tr>
<td>_dirname</td>
<td>当前模块所在文件夹的完整路径</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h2 id="exports和moduleexports">exports和module.exports</h2>
<ol>
<li>
<p>通过exports只能使用.的方式来向外暴露内部变量</p>
</li>
<li>
<p>module.exports既可以通过.的方式，也可以直接赋值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">xxx</span> <span class="o">=</span> <span class="nx">xxx</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="包">包</h2>
<ol>
<li>包实际上就是一个压缩文件，解压以后还原为目录。符合规范的目录，应该包含
<table>
<thead>
<tr>
<th>文件名</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>package.json</td>
<td>描述文件</td>
</tr>
<tr>
<td>bin</td>
<td>可执行二进制文件</td>
</tr>
<tr>
<td>lib</td>
<td>js代码</td>
</tr>
<tr>
<td>doc</td>
<td>文档</td>
</tr>
<tr>
<td>test</td>
<td>单元测试</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>2.package.json中的属性含义，json文件中不能写注释</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>dependencies</td>
<td>依赖的其他包</td>
</tr>
<tr>
<td>description</td>
<td>描述该包的作用</td>
</tr>
<tr>
<td>devDependencies</td>
<td>开发环境依赖</td>
</tr>
<tr>
<td>name</td>
<td>名字,用于require</td>
</tr>
<tr>
<td>version</td>
<td>版本</td>
</tr>
<tr>
<td>keywords</td>
<td>关键字，用于搜索</td>
</tr>
<tr>
<td>maintainers</td>
<td>贡献者</td>
</tr>
<tr>
<td>contributors</td>
<td>维护者</td>
</tr>
<tr>
<td>bugs</td>
<td>提交bug地址</td>
</tr>
<tr>
<td>licenses</td>
<td>协议</td>
</tr>
<tr>
<td>repositories</td>
<td>仓库</td>
</tr>
<tr>
<td>homepage</td>
<td>主页</td>
</tr>
<tr>
<td>os</td>
<td>系统</td>
</tr>
</tbody>
</table>
<h2 id="npm简介">npm简介</h2>
<ol>
<li>Node Package Manager</li>
<li>对于node而言，npm帮助其完成了第三方模块的发布，安装和依赖。借助NPM，node与的三方模块之间形成了很好的一个生态系统。</li>
</ol>
<h2 id="npm命令">npm命令</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>npm-v</td>
<td>查看版本</td>
</tr>
<tr>
<td>npm</td>
<td>帮助说明</td>
</tr>
<tr>
<td>npm init</td>
<td>创建package.json文件</td>
</tr>
<tr>
<td>npm search 包名</td>
<td>搜索模块包</td>
</tr>
<tr>
<td>npm install 包名</td>
<td>在当前目录安装包</td>
</tr>
<tr>
<td>npm install 包名 -g</td>
<td>全局模式安装包（一般都是一些工具，在计算机里用的，不是在项目中用的）</td>
</tr>
<tr>
<td>npm install 包名 &ndash;save</td>
<td>安装包并添加自己初始化的package.json的依赖中</td>
</tr>
<tr>
<td>npm remove 包名</td>
<td>删除包</td>
</tr>
<tr>
<td>npm install</td>
<td>下载当前项目所依赖的包</td>
</tr>
</tbody>
</table>
<ol>
<li>在需要安装npm包的目录下用npm init来初始化package.json文件</li>
<li>通过npm下载的包，通过包名引入即可</li>
<li>node在使用模块名引入模块时，会首先在当前目录的node_modules中寻找是否含有该模块，如果有，则直接使用，如果没有则再去上一级目录寻找，知道找到为止，直到磁盘的根目录，没有则报错</li>
</ol>
<h2 id="buffer缓冲区">Buffer缓冲区</h2>
<ol>
<li>
<p>Buffer的结构和数组很像，操作的方法也和数组类似</p>
</li>
<li>
<p>数组中不能存储二进制文件，而buffer就是专门存储二进制文件的</p>
</li>
<li>
<p>Buffer式node中的核心模块，使用buffer不用引入模块直接使用</p>
</li>
<li>
<p>在buffer中存储的都是二进制数据，但是在显示的时候都是以16进制的形式显示</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span>  <span class="c1">//占用内存的大小，一个汉字占用3个字节，一个字母占用1个字节（8位二进制）
</span><span class="c1"></span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span>	<span class="c1">//字符串的长度
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>buffer的构造函数已经废弃了</p>
</li>
</ol>
<h3 id="创建和写入">创建和写入</h3>
<table>
<thead>
<tr>
<th>API</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Buffer.alloc(size)</td>
<td>创建一个指定大小的buffer，且把内存的数据清空，都为0</td>
</tr>
<tr>
<td>Buffer.allocUnsafe(size)</td>
<td>创建一个指定大小的buffer，但是buffer中可能含有敏感数据，不会清空内存，但是这个性能更好</td>
</tr>
<tr>
<td>Buffer.from(str)</td>
<td>将一个字符串转化内buffer</td>
</tr>
<tr>
<td>buf.toString</td>
<td>将缓冲区中的数据转换为字符串</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//创建10个字节的buffer
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">buf2</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">alloc</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="c1">//通过索引，来操作buffer中的元素
</span><span class="c1"></span><span class="nx">buf2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">88</span>
<span class="nx">buf2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
<span class="nx">buf2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xaa</span>

<span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;Hello Buffer&#39;</span>
<span class="c1">//将一个字符串保存到buffer中
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">buf</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">buf</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>buffer的长度一旦确定，就无法改变，因为buffer是直接操作内存的，alloc(10)就是直接分配10个字节的连续的内存空间</li>
<li>如果超过8位二进制【0-256），则取后8位</li>
</ol>
<h3 id="读取">读取</h3>
<ol>
<li>buf[index]</li>
<li>调用buf.toString()，可以直接把缓冲区中的数据转为字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">buf</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1">//170,虽然村的时候是16进制，但是只要在控制台输出数字，那一定是10进制
</span><span class="c1"></span>
<span class="nx">log</span><span class="p">(</span><span class="nx">buf</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span><span class="c1">//输出16进制字符串
</span></code></pre></td></tr></table>
</div>
</div><h2 id="fs">fs</h2>
<ol>
<li>通过node来操作系统中的文件</li>
</ol>
<h3 id="引入">引入</h3>
<ol>
<li>const fs = reqire(&lsquo;fs&rsquo;)</li>
</ol>
<h3 id="同步文件">同步文件</h3>
<ol>
<li>
<p>打开文件</p>
<p>fs.openSync(path,flags[,mode])</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>要打开文件的路径</td>
</tr>
<tr>
<td>flags</td>
<td>打开文件要做的操作类型 r:只读的 w:可写的</td>
</tr>
<tr>
<td>mode</td>
<td>设置文件的操作权限，一般不传</td>
</tr>
</tbody>
</table>
<p>返回值：该方法会返回文件的描述符作为结果，我们可以通过该描述符来对文件进行各种操作</p>
</li>
<li>
<p>写入内容</p>
<p>fs.writeSync（fd,string[,position[,ecoding]]）</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>fd</td>
<td>文件的描述符，需要传递要写入的文件的描述符（变量名）</td>
</tr>
<tr>
<td>string</td>
<td>要写入的内容</td>
</tr>
<tr>
<td>position</td>
<td>写入的起始位置</td>
</tr>
<tr>
<td>ecoding</td>
<td>写入的编码，默认是utf-8</td>
</tr>
</tbody>
</table>
<p>3.关闭文件</p>
<p>fs.closeSync(fd)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">openSync</span><span class="p">(</span><span class="s1">&#39;hello.txt&#39;</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">writeSync</span><span class="p">(</span><span class="nx">fd</span><span class="p">,</span><span class="s2">&#34;今天天气真不错&#34;</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">closeSync</span><span class="p">(</span><span class="nx">fd</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="异步文件">异步文件</h3>
<ol>
<li>
<p>打开</p>
<p>fs.open(path,flags[,mode],callback)</p>
<p>除了callback是回调函数外，其他和同步相同，两个参数</p>
<p>err：错误对象，如果没有错误则为null</p>
<p>fd：文件的描述符</p>
</li>
<li>
<p>写入</p>
<p>fs.write(fd,callback)</p>
</li>
<li>
<p>关闭</p>
<p>fs.close(fd,callback)</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&#34;hello2.txt&#34;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">fd</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">fd</span><span class="p">,</span> <span class="s2">&#34;这是异步回调的内容&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">written</span><span class="p">,</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;写入成功&#39;</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="c1">//关闭文件
</span><span class="c1"></span>            <span class="nx">fs</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="nx">fd</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">){</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;文件已关闭&#39;</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="p">})</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="简单文件">简单文件</h3>
<p>异步：fs.writeFile(file,data[,options],callback)</p>
<p>==注意==：options是可选项，默认写入w，utf-8,{flag:&lsquo;r&rsquo;}进行修改，mode：文件权限</p>
<p>同步：fs.writeFileSync(file,data[,options])</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;hello3.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;这是通过writeFile写入的内容&#39;</span><span class="p">,{</span><span class="nx">flag</span><span class="o">:</span><span class="s1">&#39;r&#39;</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;写入成功&#39;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>如果要写磁盘的位置用绝对路径</p>
<h3 id="流式文件">流式文件</h3>
<ol>
<li>同步，异步，简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出</li>
</ol>
<h4 id="可写流">可写流</h4>
<p>fs.createWriteStream(path[,options])  //文件路径和配置参数</p>
<p>只要流存在就可以一直写入文件内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">ws</span><span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">&#39;hello3.txt&#39;</span><span class="p">)</span>
<span class="c1">//向文件中输出内容
</span><span class="c1"></span><span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="监听">监听</h4>
<ol>
<li>
<p>可以通过监听流的open和close事件来监听流的打开和关闭，用once事件监听</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">ws</span><span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">&#39;hello3.txt&#39;</span><span class="p">)</span>
<span class="c1">//向文件中输出内容
</span><span class="c1"></span><span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;通过可写流写入文件内容&#34;</span><span class="p">)</span>

<span class="nx">ws</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;流打开了&#34;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;流关闭了&#34;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span> <span class="c1">//这里不能用close，相当于拔掉了水管的输出端，end是输入端
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="文件读取">文件读取</h3>
<p>同步</p>
<p>异步</p>
<p>简单</p>
<p>fs.readFile(path[,options],callback)</p>
<p>fs.readFileSync(path[,options])  //通过返回值</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>要读取的文件路径</td>
</tr>
<tr>
<td>options</td>
<td>读取的选项</td>
</tr>
<tr>
<td>callback（err,data）</td>
<td>回调函数，读取返回的内容</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;hello3.txt&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//读取
</span><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span>
        <span class="c1">//写入
</span><span class="c1"></span>        <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;hello4.txt&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;文件写入成功&#39;</span><span class="p">)</span>
            <span class="p">}</span>

        <span class="p">})</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>

</code></pre></td></tr></table>
</div>
</div><p>流式</p>
<ol>
<li>如果文件小，只读一次</li>
<li>如果文件大，会分多个buffer读取，每次65536个字节的数据，避免占用大量内存空间</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="c1">//可读流
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">rs</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">&#39;hello4.txt&#39;</span><span class="p">)</span>
<span class="nx">rs</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可读流打开&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">rs</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可读流关闭&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">//如果要读取可读流中的数据，必须绑定一个data事件，会自动读取数据
</span><span class="c1"></span><span class="nx">rs</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
<span class="p">})</span>

</code></pre></td></tr></table>
</div>
</div><p>读取后写入其他文件，注意可写流要在可读流关闭时关闭</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="c1">//可读流
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">rs</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">&#39;hello4.txt&#39;</span><span class="p">)</span>
<span class="c1">//可写流
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">ws</span>  <span class="o">=</span><span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="s1">&#39;hello5.txt&#39;</span><span class="p">)</span>
<span class="nx">rs</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可读流打开&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">rs</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可读流关闭&#39;</span><span class="p">)</span>
    <span class="nx">ws</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
<span class="p">})</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可写流打开&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;可写流关闭&#39;</span><span class="p">)</span>
<span class="p">})</span>
<span class="c1">//如果要读取可读流中的数据，必须绑定一个data事件，会自动读取数据
</span><span class="c1"></span><span class="nx">rs</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="c1">//将读取的数据写入可写流中
</span><span class="c1"></span>    <span class="nx">ws</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="c1">//数据写入完毕关闭可写流，在可读流关闭时关闭
</span><span class="c1"></span><span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>简单的写法</p>
<p>rs.pipe(ws)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
<span class="c1">//可读流
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">rs</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="s1">&#39;hello4.txt&#39;</span><span class="p">)</span>
<span class="c1">//pipe（）可以将可读流中的数据直接输出到可写流中
</span><span class="c1"></span><span class="nx">rs</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">ws</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="其他方法">其他方法</h3>
<p></p>
<p>callback参数err，data</p>
<p></p>
<h1 id="httpsrawgithubusercontentcomyzuxqzpic-bedmasternotes-imgfse585b6e4bb963png"></h1>
<p>watchFile中的functionn（curr,prev）</p>
<p>这两个参数都是stats对象，可以用属性</p>
<p>options是对象，可以修改文件的监视时间频率</p>
<h1 id="formidable模块">formidable模块</h1>
<p><a href="https://www.cnblogs.com/abab301/p/9489000.html" target="_blank" rel="noopener noreffer">https://www.cnblogs.com/abab301/p/9489000.html</a></p>
<h1 id="bcrypt加密">bcrypt加密</h1>
<p></p>
<p></p>
<p></p>
<h1 id="文件上传">文件上传</h1>
<p>前端读取</p>
<p></p>
<p>后端</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>==注意==：</p>
<ol>
<li>不能直接保存path，用户是通过url访问服务器的资源，url的/实际就是服务器端的public文件夹，所以要split（‘public’）</li>
</ol>
]]></description>
</item><item>
    <title>jquery</title>
    <link>http://example.org/posts/jquery/</link>
    <pubDate>Sat, 17 Jul 2021 10:35:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/jquery/</guid>
    <description><![CDATA[<h1 id="入口函数">入口函数</h1>
<p>$是jQuery的顶级对象，相当于JS中的window</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">// 法1
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
        <span class="p">})</span>
        <span class="c1">// 法2
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
        <span class="p">})</span>
                
<span class="o">==</span><span class="nx">注意</span><span class="o">==</span><span class="err">：</span>

<span class="mf">1.</span> <span class="nx">区别原始js的onload函数会等DOM和图片都加载完执行</span><span class="err">，</span><span class="nx">而jQuery的入口函数在DOM加载完就会执行</span>
<span class="mf">2.</span> <span class="nx">onload会覆盖</span><span class="err">，</span><span class="nx">而jQuery会依次执行</span>

<span class="err">#</span> <span class="nx">jQuery对象</span>

<span class="nx">本质</span><span class="err">：</span><span class="nx">利用$对DOM对象包装后产生的对象</span><span class="err">，</span><span class="nx">以</span><span class="o">==</span><span class="nx">伪数组</span><span class="o">==</span><span class="nx">形式存储</span><span class="err">，</span><span class="nx">jQuery对象只能使用jQuery方法</span>

<span class="err">##</span> <span class="nx">隐式迭代</span>

<span class="nx">通过选择器遍历内部DOM元素</span><span class="err">，</span><span class="nx">以伪数组的形式存储的过程</span>

<span class="sb">```javascript
</span><span class="sb">$(&#34;ul li&#34;).css(&#34;color&#34;, &#34;#ccc&#34;);
</span></code></pre></td></tr></table>
</div>
</div><h2 id="jquery对象与dom对象之间的转换">jQuery对象与DOM对象之间的转换</h2>
<ol>
<li>
<p>DOM转jQuery</p>
<p>var div = document.querySelector('');</p>
<p>$(div);</p>
</li>
<li>
<p>jQuery转DOM</p>
<p>$(&ldquo;div&rdquo;)[index]或者$(&ldquo;div&rdquo;).get(index)</p>
</li>
</ol>
<h1 id="jquery静态方法">jQuery静态方法</h1>
<h2 id="eachobjcalback">each(obj,[calback])</h2>
<ol>
<li>遍历谁就返回谁</li>
<li>不支持在回调函数中对数组进行处理</li>
</ol>
<p>见元素选择操作</p>
<h2 id="maparrobjcallback">map(arr|obj,callback)</h2>
<ol>
<li>
<p>和原生的forEach一样不能遍历伪数组</p>
</li>
<li>
<p>return后会返回一个新的数组，默认不return，就返回空数组</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">52</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">value</span> <span class="o">+</span> <span class="nx">index</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="trimstr">trim(str)</h2>
<ol>
<li>返回新的字符串</li>
<li>去除两端空格</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;       3434          &#39;</span>
        <span class="kd">let</span> <span class="nx">newStr</span> <span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newStr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="isarrayobj">isArray(obj)</h2>
<h2 id="isfunctionobj">isfunction(obj)</h2>
<h2 id="iswindowobj">isWindow(obj)</h2>
<p>判断传入的对象是否为window对象，返回值为boolean</p>
<h2 id="holdreadyhold">holdReady(hold)</h2>
<p>暂停入口函数，等页面其他元素加载完成后再加载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="c1">//暂停入口函数
</span><span class="c1"></span>        <span class="nx">$</span><span class="p">.</span><span class="nx">holdReady</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>ready<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
   <span class="kd">let</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">)</span>
    <span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">holdReady</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>

</code></pre></td></tr></table>
</div>
</div><h1 id="jquery基本选择器">jQuery基本选择器</h1>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID选择器</td>
<td>$(&quot;#id&quot;)</td>
<td>获取指定ID的元素</td>
</tr>
<tr>
<td>全选择器</td>
<td>$('*')</td>
<td>匹配所有元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>$(&quot;.class&quot;)</td>
<td>获取同一类class的元素</td>
</tr>
<tr>
<td>标签选择器</td>
<td>$(&ldquo;div&rdquo;)</td>
<td>获取同一类标签的所有元素‘</td>
</tr>
<tr>
<td>子代选择器</td>
<td>$(&ldquo;ul&gt;li&rdquo;)</td>
<td>只获取亲儿子层</td>
</tr>
<tr>
<td>后代选择器</td>
<td>$(&ldquo;ul li&rdquo;)</td>
<td>ul下所有层级的li</td>
</tr>
<tr>
<td>并集选择器</td>
<td>$(&ldquo;div,p,li&rdquo;)</td>
<td>选取多个元素</td>
</tr>
<tr>
<td>交集选择器</td>
<td>$(&ldquo;li.current&rdquo;)</td>
<td>交集元素p.class</td>
</tr>
</tbody>
</table>
<h1 id="jquery筛选选择器">jQuery筛选选择器</h1>
<table>
<thead>
<tr>
<th>语法</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:first</td>
<td>$(&lsquo;li:first&rsquo;)</td>
<td>获取第一个li元素</td>
</tr>
<tr>
<td>:last</td>
<td>$(&lsquo;li:last&rsquo;)</td>
<td>获取最后一个li元素</td>
</tr>
<tr>
<td>:eq(index)</td>
<td>$(&ldquo;li:eq(2)&quot;)</td>
<td>获取到li，因为是存在伪数组中，然后选择索引，索引号从0开始</td>
</tr>
<tr>
<td>:odd</td>
<td>$(&ldquo;li:odd&rdquo;)</td>
<td>获取到li元素中，选择索引号为奇数的元素</td>
</tr>
<tr>
<td>:even</td>
<td>$(&ldquo;li:even&rdquo;)</td>
<td>获取到li元素中，选择索引号为偶数的元素</td>
</tr>
<tr>
<td>:checked</td>
<td>$(&quot;.j-checkbox:checked&rdquo;)</td>
<td>查找被选中的表单元素，.length获取选中个数</td>
</tr>
<tr>
<td>:empty</td>
<td>$(&ldquo;div:empty&rdquo;)</td>
<td>找到没有文本内容或有子元素的指定元素</td>
</tr>
<tr>
<td>:parent</td>
<td>$(&ldquo;div:parent&rdquo;)</td>
<td>找到有文本内容或者有子元素的指定元素</td>
</tr>
</tbody>
</table>
<h1 id="jquery筛选方法">jQuery筛选方法</h1>
<table>
<thead>
<tr>
<th>语法</th>
<th>用法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>parent()</td>
<td>$(&ldquo;li&rdquo;).parent()</td>
<td>查找父级</td>
</tr>
<tr>
<td>children(selector)</td>
<td>$(&ldquo;ul&rdquo;).children(&ldquo;li&rdquo;)</td>
<td>相当于子代选择器</td>
</tr>
<tr>
<td>find(selector)</td>
<td>$(&ldquo;ul&rdquo;).find(&ldquo;li&rdquo;)</td>
<td>相当于后代选择器</td>
</tr>
<tr>
<td>siblings(selector)</td>
<td>$(&quot;.first&quot;).siblings(&ldquo;li&rdquo;)</td>
<td>查找兄弟节点，不包括自己本身</td>
</tr>
<tr>
<td>nextAll([expr])</td>
<td>$(&quot;.first&quot;).nextAll()</td>
<td>查找当前元素之后所有的同辈元素</td>
</tr>
<tr>
<td>prevAll([expr])</td>
<td>$(&quot;.last&quot;).prevAll()</td>
<td>查找当前元素之前所有的同辈元素</td>
</tr>
<tr>
<td>hasClass(class)</td>
<td>$(&lsquo;div&rsquo;).hasClass(&lsquo;protected&rsquo;)</td>
<td>检查当前的元素是否包含某个特定的类，如果有返回true</td>
</tr>
<tr>
<td>eq(index)</td>
<td>$(&ldquo;li&rdquo;).eq(2)</td>
<td>相当于筛选器$(&ldquo;li:eq(2)&quot;)</td>
</tr>
</tbody>
</table>
<p>其他：</p>
<ul>
<li>$(this) 当前元素</li>
<li>$(this).index() 当前元素索引号</li>
<li>$(&ldquo;div&rdquo;).parents(&quot;&quot;) 返回指定父级</li>
</ul>
<h1 id="jquery排他思想">jQuery排他思想</h1>
<p>var index = $(this).index;</p>
<p>$().eq(index).siblings(&quot;&quot;).hide();</p>
<p>$().eq(index).show();</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">//隐式迭代
</span><span class="c1"></span>    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">siblings</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;background&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;background&#34;</span><span class="p">,</span> <span class="s2">&#34;red&#34;</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="jquery尺寸">jQuery尺寸</h1>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>width()/height()</td>
<td>只包含width或者height</td>
</tr>
<tr>
<td>innerWidth()/innerHeight()</td>
<td>包含padding</td>
</tr>
<tr>
<td>outerWidth()/outerHeight()</td>
<td>包含padding，border</td>
</tr>
<tr>
<td>outerWidth(true)/outerHeight(true)</td>
<td>包含padding，border，margin</td>
</tr>
</tbody>
</table>
<h1 id="jquery位置">jQuery位置</h1>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>offset()</td>
<td>设置或返回元素相对于文档的偏移坐标和父级无关，offset().top,;offset({top:,left:})</td>
</tr>
<tr>
<td>position()</td>
<td>设置或返回元素相对于带有定位的父级偏移坐标，只能获取，不能设置</td>
</tr>
<tr>
<td>scrollTop()</td>
<td>设置或返回被选元素被卷曲的头部;scrollTop(100)设置被卷去的头部</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;father&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;son&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.son&#34;</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">);</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.son&#34;</span><span class="p">).</span><span class="nx">offset</span><span class="p">({</span>
            <span class="nx">left</span><span class="o">:</span><span class="mi">300</span>
        <span class="p">});</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="窗口滚动事件">窗口滚动事件</h2>
<p>$(Window).scroll(function(){})</p>
<h2 id="带有动画的返回顶部">带有动画的返回顶部</h2>
<p>$(&ldquo;body,html&rdquo;).animate({scrollTop:0})</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;javascript:;&#34;</span><span class="p">&gt;</span>返回顶部<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="c1">//div距离文档顶部的值
</span><span class="c1"></span>            <span class="kd">var</span> <span class="nx">boxTop</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">;</span>
            <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">scroll</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="nx">boxTop</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="c1">// $(document).scrollTop(0);
</span><span class="c1"></span>                    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;body,html&#34;</span><span class="p">).</span><span class="nx">stop</span><span class="p">().</span><span class="nx">animate</span><span class="p">({</span>
                        <span class="nx">scrollTop</span><span class="o">:</span> <span class="mi">0</span>
                    <span class="p">})</span>
                <span class="p">})</span>
            <span class="p">})</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：只有元素可以做动画</p>
<h1 id="jquery样式操作">jQuery样式操作</h1>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(this).css(&ldquo;color&rdquo;)</td>
<td>参数只写属性名，则是只返回属性值</td>
</tr>
<tr>
<td>$(this).css(&ldquo;color&rdquo;,&ldquo;red&rdquo;)</td>
<td>值如果是数字可以不加单位和引号</td>
</tr>
<tr>
<td>$(this).css({&ldquo;color&rdquo;:&ldquo;white&rdquo;,&ldquo;font-size&rdquo;:20})</td>
<td>参数为对象形式</td>
</tr>
</tbody>
</table>
<h1 id="jquery类操作">jQuery类操作</h1>
<p>jQuery不会覆盖原先的其他类</p>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(this).addClass(&quot;&quot;)</td>
<td>添加类</td>
</tr>
<tr>
<td>$(this).removeClass(&quot;&quot;)</td>
<td>删除类</td>
</tr>
<tr>
<td>$(this).toggleClass(&quot;&quot;)</td>
<td>有变无，无变有</td>
</tr>
</tbody>
</table>
<h1 id="jquery属性操作">jQuery属性操作</h1>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.prop(&quot;&quot;)</td>
<td>获取元素固有属性的属性值</td>
</tr>
<tr>
<td>element.prop(&quot;&rdquo;,&quot;&quot;)</td>
<td>修改元素固有属性的属性值</td>
</tr>
<tr>
<td>element.removepro(&quot;&quot;)</td>
<td>移除属性</td>
</tr>
<tr>
<td>element.attr(&quot;&quot;)</td>
<td>获取自定义属性</td>
</tr>
<tr>
<td>element.attr(&quot;&quot;,&quot;&quot;)</td>
<td>修改自定义属性,根据jquery的隐式迭代，找到多少就能设置多少个</td>
</tr>
<tr>
<td>element.removeattr(&quot;&quot;)</td>
<td>移除属性</td>
</tr>
</tbody>
</table>
<p>==注意==：</p>
<ol>
<li>在操作属性节点时，具有true和false两个属性的属性节点，如checked，selected获得disabled使用prop()返回true或者false，其他的使用attr（）返回值</li>
</ol>
<h2 id="数据缓存">数据缓存</h2>
<p>data()可在元素上存取数据，且不会修改DOM元素结构，一旦页面刷新，之前的数据会被移除</p>
<p>$(&quot;&quot;).data(&ldquo;键&rdquo;，&ldquo;值&rdquo;)//相当于把数据存入变量</p>
<p>$(&quot;&quot;).data(&ldquo;键&rdquo;)//返回对应值</p>
<h1 id="jquery内容文本值">jQuery内容文本值</h1>
<h2 id="普通元素内容">普通元素内容</h2>
<p>$(&quot;&quot;).html()//获取元素内容，相当于js中的innerHTML</p>
<p>$(&quot;&quot;).html(&quot;&quot;)//设置元素内容</p>
<h2 id="获取元素文本内容">获取元素文本内容</h2>
<p>$(&quot;&quot;).text()</p>
<h2 id="表单值">表单值</h2>
<p>$(&quot;&quot;).val()</p>
<h1 id="jquery元素操作">jQuery元素操作</h1>
<h2 id="遍历元素">遍历元素</h2>
<ol>
<li>
<p>$(&ldquo;div&rdquo;).each(function(index,domEle){})</p>
<p>注意：domEle是DOM元素，想要使用jQuery方法，需要给转为jQuery对象:$(domEle</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;red&#34;</span><span class="p">,</span> <span class="s2">&#34;blue&#34;</span><span class="p">,</span> <span class="s2">&#34;black&#34;</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">domEle</span><span class="p">)</span> <span class="p">{</span><span class="c1">//index:每个元素的索引号，domEle：每个DOM元素对象
</span><span class="c1"></span>            <span class="nx">$</span><span class="p">(</span><span class="nx">domEle</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&#34;color&#34;</span><span class="p">,</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">index</span><span class="p">]);</span>
            <span class="nx">sum</span> <span class="o">+=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">domEle</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
        <span class="p">})</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
    <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>$.each(arr,function(index,ele){})</p>
<p>用于遍历数据（数组，对象），可以遍历伪数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="nx">ele</span><span class="p">){})</span><span class="c1">//index为数组索引
</span><span class="c1"></span><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="nx">age</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span><span class="nx">ele</span><span class="p">){})</span><span class="c1">//key为对象的属性名
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="创建元素">创建元素</h2>
<p>var li = $(&quot;<li></li>&quot;);</p>
<h2 id="添加元素">添加元素</h2>
<h3 id="内部添加">内部添加</h3>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&ldquo;div&rdquo;).append(li)</td>
<td>加入该元素子级末尾</td>
</tr>
<tr>
<td>$(&ldquo;div&rdquo;).prepend(li)</td>
<td>加入该元素子级开头</td>
</tr>
</tbody>
</table>
<h3 id="外部添加">外部添加</h3>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&ldquo;div&rdquo;).after(li)</td>
<td>同一级该元素之后</td>
</tr>
<tr>
<td>$(&ldquo;div&rdquo;).before(li)</td>
<td>同一级该元素之前</td>
</tr>
</tbody>
</table>
<h2 id="删除元素">删除元素</h2>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&ldquo;div&rdquo;).remove()</td>
<td>删除自身</td>
</tr>
<tr>
<td>$(&ldquo;div&rdquo;).empty()</td>
<td>删除所有孩子，不包括自身，相当于$(&ldquo;div&rdquo;).html(&quot;&quot;)</td>
</tr>
</tbody>
</table>
<h2 id="替换元素">替换元素</h2>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&lsquo;old&rsquo;).replaceWith（&lsquo;new&rsquo;）</td>
<td>替换指定元素为,旧的去调用</td>
</tr>
<tr>
<td>new.replaceAll(&lsquo;old&rsquo;)</td>
<td>新的去调用</td>
</tr>
</tbody>
</table>
<h2 id="复制元素">复制元素</h2>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$('').clone(false)</td>
<td>浅拷贝</td>
</tr>
<tr>
<td>$('').clone(true)</td>
<td>深拷贝</td>
</tr>
</tbody>
</table>
<p>区别：浅拷贝只复制元素不会复制元素的事件，深拷贝会复制元素的事件</p>
<h1 id="jquery事件">jQuery事件</h1>
<ol>
<li>
<p>监听网页滚动</p>
<p>$(window).scroll(function(){})</p>
<p>获取滚动的距离</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;html,body&#39;</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="绑定事件">绑定事件</h2>
<h3 id="on">on</h3>
<p>$(&ldquo;div&rdquo;).on(events,[selector],fn)</p>
<ol>
<li>events：事件名</li>
<li>selector：子选择器委派的触发对象（冒泡）</li>
<li>fn：事件函数</li>
</ol>
<h3 id="以对象的形式书写">以对象的形式书写</h3>
<ol>
<li>
<p>function不同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">on</span><span class="p">({</span>

<span class="nx">mouseenter</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span>

<span class="nx">click</span><span class="o">:</span><span class="kd">function</span><span class="p">(){}</span>

<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>function相同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">$(&#39;ul&#39;).on(&#34;click mouseleave&#34;,function(){})
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>==注意==：</p>
<ol>
<li>on可以给动态创建的元素绑定事件，传统单个事件绑定做不到</li>
<li>阻止事件冒泡：在子元素的回调函数中 return false，或者e.stopPropagation()</li>
</ol>
<h3 id="one">one()</h3>
<p>用one()绑定的事件只能 触发一次</p>
<h3 id="trigger">trigger()</h3>
<p>自动触发事件</p>
<p>$(&quot;&quot;).click()</p>
<p>$(&quot;&quot;).trigger(&ldquo;clic k&rdquo;)</p>
<p>$(&quot;&quot;).triggerHandler(&ldquo;click&rdquo;)//不会触发元素的默认行为，比如表单的光标和边框变色</p>
<p>==注意==:</p>
<ol>
<li>如果要用trigger来触发a的默认行为，需要把a里面的文本用span包起来，然后监听span的点击事件，通过冒泡才能触发a的跳转，否则无法触发a的跳转</li>
</ol>
<h2 id="事件切换">事件切换</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&quot;&quot;).hover(function(){},function(){})</td>
<td>鼠标经过和鼠标离开分别触发不同的方法</td>
</tr>
<tr>
<td>$(&quot;&quot;).toggle(fn1,fn2&hellip;)</td>
<td>开关”进行切换，当鼠标单击时的切换：当鼠标第一次单击时，执行fn1的代码，当鼠标第二次单击时，执行fn2的代码，执行完了后进行循环</td>
</tr>
<tr>
<td>$(&quot;&quot;).change(function(){})</td>
<td>表单发生改变时触发</td>
</tr>
</tbody>
</table>
<h2 id="事件委派">事件委派</h2>
<p>$(&ldquo;ul&rdquo;).on(&ldquo;click&rdquo;,&ldquo;li&rdquo;,function(){})</p>
<p>根据冒泡原理，将事件绑定在ul上触发的对象是li，function中的this指的是当前触发的li的DOM对象，$（this）.index()方法可以获得li的索引</p>
<h2 id="解绑事件">解绑事件</h2>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(&ldquo;ul&rdquo;).off()</td>
<td>解绑所有事件</td>
</tr>
<tr>
<td>$(&ldquo;ul&rdquo;).off(&ldquo;event&rdquo;)</td>
<td>解绑对应事件</td>
</tr>
<tr>
<td>$(&ldquo;ul&rdquo;).off(&ldquo;event&rdquo;,&ldquo;li&rdquo;)</td>
<td>解除事件委托</td>
</tr>
</tbody>
</table>
<h2 id="事件对象">事件对象</h2>
<p>$(&quot;&quot;).on(events,[selector],function(e){})</p>
<p>==注意==:</p>
<ol>
<li>在jquery中$（e.targrt）.index()方法可以直接获得li的索引</li>
</ol>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e.preventDefault()或者return false</td>
<td>阻止默认行为</td>
</tr>
<tr>
<td>e.stopProgation()</td>
<td>阻止冒泡</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="自定义事件">自定义事件</h2>
<ol>
<li>
<p>事件必须通过on绑定</p>
</li>
<li>
<p>事件必须通过trigger来触发</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.son&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;myclick&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
	<span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">})</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.son&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;myclick&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h1 id="jquery效果">jQuery效果</h1>
<h2 id="显示隐藏">显示隐藏</h2>
<ol>
<li>show([speed,[easing],[fn]])
<ol>
<li>参数省略，为无动画直接显示</li>
<li>speed有slow，normal，fast或者毫秒数</li>
<li>easing：用来指定切换效果，默认swing，可用参数linear</li>
<li>fn：回调函数，在动画完成时执行，每个元素执行一次</li>
</ol>
</li>
<li>hide()</li>
<li>toggle() //切换</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button:first&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="s2">&#34;slow&#34;</span><span class="p">);</span>
            <span class="p">});</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">hide</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
            <span class="p">});</span>
            <span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button:last&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
            <span class="p">})</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="滑动">滑动</h2>
<ol>
<li>slideDown()</li>
<li>slideUp()</li>
<li>slideToggle()</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button:first&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">();</span>
            <span class="p">})</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
            <span class="p">})</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="淡入淡出">淡入淡出</h2>
<ol>
<li>fadeIn()</li>
<li>fadeOut()</li>
<li>fadeToggle()</li>
<li>fadeTo() //opacity透明度</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button:first&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
        <span class="p">})</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
        <span class="p">})</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button:last&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mf">0.3</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">fadeToggle</span><span class="p">(</span><span class="mf">0.3</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="自定义动画">自定义动画</h2>
<p>animate(params,[speed],[easing],[fn]（回调函数））</p>
<ol>
<li>
<p>params:想要更改的样式属性，以对象的形式传递，必须写。如果是复合属性要驼峰命名</p>
<p>==注意==：</p>
<ol>
<li>
<p>如果要在原先的样式基础上累加，需要使用累加属性，属性是一个字符串</p>
<p>left：“+=100”</p>
</li>
<li>
<p>还可以给属性一个关键字：hide,toggle</p>
<p>width：“hide”</p>
</li>
</ol>
</li>
<li>
<p>指定动画时长</p>
</li>
<li>
<p>指定动画的贝塞尔曲线</p>
</li>
<li>
<p>回调函数</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
            <span class="nx">left</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
            <span class="nx">top</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span>
            <span class="nx">opacity</span><span class="o">:</span><span class="p">.</span><span class="mi">4</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==:</p>
<ol>
<li>同样支持链式编程</li>
</ol>
<h2 id="动画队列及停止排队">动画队列及停止排队</h2>
<ul>
<li>stop()用于停止动画效果，停止上一次的动画</li>
<li>参数为true：停止当前的和后续的所有动画</li>
<li>参数为false：停止当前的立即执行后续的，用于链式编程动画的停止</li>
</ul>
<p>$(&quot;&quot;).siblings().stop().fadeTo()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.first&gt;li&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">stop</span><span class="p">().</span><span class="nx">slideToggle</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<ul>
<li>
<p>delay(speed)可以在动画之间设置延迟</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;div&#34;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
            <span class="nx">left</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
            <span class="nx">top</span><span class="o">:</span><span class="mi">200</span><span class="p">,</span>
            <span class="nx">opacity</span><span class="o">:</span><span class="p">.</span><span class="mi">4</span>
        <span class="p">}).</span><span class="nx">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
        	<span class="p">......</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>==注意==：</p>
<ol>
<li>在动画前停止，所以在动画前调用stop()</li>
<li>因为有动画队列，所以动画可以链式编程，后面的会等前面的执行完成之后再执行，可以不在回调函数中写</li>
</ol>
<h1 id="jquery其他方法">jQuery其他方法</h1>
<h2 id="对象拷贝">对象拷贝</h2>
<p>$.extend([deep],target,object1,[objectN])</p>
<ol>
<li>deep：true深拷贝，false浅拷贝（默认）</li>
<li>object1拷贝给target</li>
<li>objectN：拷贝多个给target</li>
</ol>
<h2 id="多库共存">多库共存</h2>
<ol>
<li>把$改为jQuery</li>
<li>自己改名：var zidingyi = jQuery.noConflict()</li>
</ol>
<h2 id="ajax方法">$.ajax()方法</h2>
<p></p>
<ol>
<li>type是get或者post，data可以是对象或者连接好的字符串</li>
<li>type是post，且contenttype是application/json，需要将data中的json对象转为json字符串</li>
<li>beforeSend，在请求被发送之前调用，如果return false，则请求不会被发送</li>
<li>success函数会自动将json字符串转化为json对象</li>
<li>在协议端口一样的情况下可以简写</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#btn&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;get&#39;</span><span class="p">,</span>
                    <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/shisan&#39;</span><span class="p">,</span>
                    <span class="nx">success</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span>
                    <span class="p">}</span>
                <span class="p">})</span>
            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>方法内部会自动将参数转为？xx=xxx&amp;xx=xxx的格式</li>
<li>如果要使用application/json格式的参数，需要在data中先一步用JSON.stringify()将对象转为字符串</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;post&#39;</span><span class="p">,</span>
                    <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;/shisan&#39;</span><span class="p">,</span>
                    <span class="nx">data</span><span class="o">:</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="c1">//json对象转字符串
</span><span class="c1"></span>                        <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;zs&#39;</span><span class="p">,</span>
                        <span class="nx">age</span><span class="o">:</span><span class="mi">100</span>
                    <span class="p">}),</span>
                    <span class="nx">contentType</span><span class="o">:</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span> <span class="c1">//修改参数类型
</span><span class="c1"></span>                    <span class="nx">success</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span>
                    <span class="p">},</span>
                    <span class="nx">error</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">){</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="serialize方法">serialize方法</h3>
<p>formdata对象是h5中提供的内置对象，serialize方法兼容性更好</p>
<ol>
<li>将表单中的数据自动拼接成字符串类型的参数</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#form&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;submit&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
            <span class="c1">//将表单内容拼接成字符串类型的参数
</span><span class="c1"></span>            <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#form&#39;</span><span class="p">).</span><span class="nx">serialize</span><span class="p">()</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>​	2.将表单中的值转为对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//将表单中的值转为对象
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">serializeObj</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span><span class="c1">//传入form对象
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">serializeArray</span><span class="p">(),</span><span class="nx">result</span><span class="o">=</span><span class="p">{}</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">[</span><span class="nx">value</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">value</span><span class="p">.</span><span class="nx">value</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="发送jsonp请求">发送jsonp请求</h3>
<p></p>
<p>jsonp和jsonCallback在需要时才传入，在修改了callback参数名时，服务端不能再直接用jsonp（）方法返回数据，通过req.query.新的参数名获取函数然后调用</p>
<p></p>
<p>在修改了jsoncallback回调函数时，success失效，需要定义新的回调函数</p>
<p></p>
<h2 id="get和post">$.get()和$.post()</h2>
<p></p>
<h2 id="ajax全局事件">ajax全局事件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">            <span class="c1">//当页面中有ajax请求发送时触发
</span><span class="c1"></span>            <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ajaxStart&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

            <span class="p">})</span>
            <span class="c1">//请求完成时触发
</span><span class="c1"></span>            <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ajaxComplete&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

            <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="获取宽高">获取宽高</h2>
<p></p>
]]></description>
</item><item>
    <title>javascript</title>
    <link>http://example.org/posts/javascript/</link>
    <pubDate>Thu, 15 Jul 2021 10:31:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/javascript/</guid>
    <description><![CDATA[<h1 id="js基础">JS基础</h1>
<h2 id="简单数据类型">简单数据类型</h2>
<h3 id="undefined类型">Undefined类型</h3>
<ul>
<li>只声明但未初始化</li>
<li>只有一个值：undefined</li>
<li>用typeof检测返回undefined，typeof返回的值是一个字符串</li>
</ul>
<h3 id="null类型">NUll类型</h3>
<ul>
<li>表示空对象指针，用于未来会保存对象的变量初始化</li>
<li>只有一个值：null</li>
<li>用typeof检测返回object，typeof返回的值是一个字符串</li>
<li>==注意==：undefined派生自null（null==undefined为true，但是null == =undefined为false）</li>
</ul>
<h3 id="boolean类型">Boolean类型</h3>
<ul>
<li>只有两个值：true和false</li>
<li>转型函数Boolean()
<ol>
<li>数字：除了0和NaN，其余都是true</li>
<li>字符串：除了空串都为true</li>
<li>null，undefined为false</li>
<li>对象为true</li>
</ol>
</li>
<li>对任意数据类型取反两次!!可以转为布尔值</li>
</ul>
<h3 id="number类型">Number类型</h3>
<ul>
<li>js中所有的数字都是Number类型</li>
<li>二进制0b</li>
<li>八进制最高位加0</li>
<li>十六进制最高位加0x</li>
<li>浮点数在小数点后没有数或小数点后都为0时会被转为整型</li>
<li>==注意==：
<ol>
<li>在输出和进行算术运算时都会转换成十进制</li>
<li>ECMAScript中浮点计算（0.2+0.1）会有误差，因此不要去判断浮点数</li>
</ol>
</li>
</ul>
<h4 id="数值范围">数值范围</h4>
<ul>
<li>超过Number.MAX_VALUE和-Number.MAX_VALUE的数值会被转成 Infinity和-Infinity</li>
<li>Number.MIN_VALUE表示的是&gt;0的最小值</li>
</ul>
<h4 id="nan">NaN</h4>
<ul>
<li>任何涉及NaN的操作都会返回NaN（没有字符串连接）</li>
<li>NaN与任何值都不想等，包括NaN本身</li>
<li>isNaN()用于测试传入的数值是否能转为数值，如果能则返回false</li>
<li>==注意==：
<ol>
<li>
<p>typeof NaN为number</p>
</li>
<li>
<p>true能转化为1</p>
</li>
</ol>
</li>
<li>isNaN()也适用于对象，对象调用isNaN()函数时首先调用对象自己的valueOf()方法，以确定该方法的返回值是否可以转为数值。如果不能，再基于这个返回值调用tostring()方法，再次测试</li>
</ul>
<h4 id="数值转换">数值转换</h4>
<h5 id="number">Number()</h5>
<ul>
<li>可以用于任何数据类型</li>
<li>Boolean值，true返回1，false返回0</li>
<li>null值，返回0</li>
<li>undefined值，返回NaN（Number类型）</li>
<li>字符串，除空的转为0，有额外字符的转为NaN，其他都转为十进制数</li>
<li>==注意==：不能转八进制，因为前导0会忽视</li>
</ul>
<h5 id="parseint进制">parseInt(,进制)</h5>
<ul>
<li>
<p>用于将一个字符串中的有效==整数==内容取出来</p>
</li>
<li>
<p>如果第一个字符不是数值或负号，则返回NaN。(空返回NaN)</p>
</li>
<li>
<p>直到解析到非数字字符（包括小数点）停止</p>
</li>
<li>
<p>能够解析八进制和十六进制，加上第二个参数，表示基数是多少进制</p>
</li>
</ul>
<p>==注意==：</p>
<ol>
<li>对于非字符串值会先转为String然后再操作</li>
</ol>
<h5 id="parsefloat">parseFloat()</h5>
<ul>
<li>可以解析第一个小数点</li>
<li>只能解析十进制数</li>
<li>如果传入的字符是整数，则也会返回整数</li>
</ul>
<h3 id="string类型">String类型</h3>
<ul>
<li>转义字符</li>
<li>拼接字符串会很慢，字符串的不可变性</li>
<li>注意比较运算符的==两边都是==字符串时不会将其转化成数字进行比较，而会分别比较字符串中字符的Unicode编码，一位一位进行比较，如果两位一样则比较下一位，所以==在比较两个字符串型的数字之前一定要转成Number==</li>
</ul>
<h4 id="转为字符串">转为字符串</h4>
<h5 id="tostring">toString()</h5>
<ul>
<li>除了null，undefined都有该方法</li>
<li>参数表示返回数值的进制</li>
<li>该方法有返回值，不会影响原变量</li>
</ul>
<h5 id="string">String()</h5>
<ul>
<li>对于Number和Boolean，实际还是调用toString()方法</li>
<li>如果值为null，返回 “null”</li>
<li>如果值为undefined，返回“undefined”</li>
</ul>
<h5 id="-">+ &quot;&quot;</h5>
<ul>
<li>加一个空字符串，隐式类型转换</li>
</ul>
<h2 id="js对象">JS对象</h2>
<h3 id="创建对象">创建对象</h3>
<ul>
<li>
<p>字面量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">uname</span><span class="o">:</span> <span class="s1">&#39;xqz&#39;</span><span class="p">,</span> <span class="c1">//里面的属性方法采取键值对的形式
</span><span class="c1"></span>            <span class="nx">sayHi</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">//方法冒号后面跟的是一个匿名函数
</span><span class="c1"></span>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>利用Object()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span> <span class="c1">//一个空对象
</span><span class="c1"></span>        <span class="nx">obj</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="s1">&#39;xqz&#39;</span><span class="p">;</span>
        <span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi&#39;</span><span class="p">);</span>
        <span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>构造函数</p>
<p>function Person(){</p>
<p>}</p>
<p>Person()		//不加new是普通函数</p>
<p>new Person()		//加new是构造函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="kd">function</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">sex</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//构造函数首字母大写
</span><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">sex</span> <span class="o">=</span> <span class="nx">sex</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">sing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">songs</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">songs</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="s1">&#39;男&#39;</span><span class="p">);</span> <span class="c1">//构造函数不需要return
</span><span class="c1"></span>        <span class="nx">ldh</span><span class="p">.</span><span class="nx">sing</span><span class="p">(</span><span class="s1">&#39;冰雨&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>==注意==：</p>
<ol>
<li>
<p>构造函数每执行一次就会创建一个新的方法，也就是说所有的实例的sing方法都是唯一的，这样占用了大量的内存空间，完全可以让所有的对象共享一个方法：对象的prototype属性中写</p>
</li>
<li>
<p>对于不再使用的对象，必须设置为null，这样GC才会回收</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span><span class="c1">//此时仍有变量在引用
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//此时栈中对堆中的引用断开，对象成为垃圾
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="使用对象">使用对象</h3>
<ul>
<li>
<p>使用属性</p>
<p>obj.uname</p>
<p>obj.[&lsquo;uname&rsquo;]</p>
</li>
<li>
<p>使用方法</p>
<p>obj.sayHi();</p>
</li>
</ul>
<p>hasOwnproperty() 方法验证属性是存在于对象中，还是存在于实例中。在实例中则返回true，在构造函数的prototype中则返回false。 name in Object 只要能通过原型链找到则返回false. hasPrototypeProperty()方法  实例中重写属性后，属性就存在于实例中，原型中的属性就用不到了。</p>
<p>枚举（不明白） 得到所有可枚举的实例属性 Object.keys()方法</p>
<p>Object.assign(default,new)  //属性覆盖</p>
<h3 id="遍历对象">遍历对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">ldh</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span><span class="c1">//输出属性名
</span><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ldh</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span><span class="c1">//输出属性值
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>“属性名” in 对象：可以检查obj中是否有该属性</li>
<li>obj2=obj1；此时修改obj1中的值会影响obj2因为他们指向的是同一个堆地址，如果让obj1=null，并不会改变obj2的值，只是将obj1的指向断开，堆内存中的值仍然存在</li>
</ol>
<h3 id="判断对象类型">判断对象类型</h3>
<ol>
<li>
<p>instance of检测是否为该对象类型，Array和Function都是特殊的Object类型</p>
</li>
<li>
<p>typeof</p>
<p>能区别：数值/字符串/布尔值/undefined/function</p>
<p>不能区别：null与Object，Object和Array</p>
</li>
<li>
<p>===只对undefined和null有效，因为只有这两种类型有固定值</p>
</li>
<li>
<p>typeof a（返回值是字符串类型） === &lsquo;undefined&rsquo;也可以进行判断，注意undefined == =’undefined‘是false，一个是undefined类型，一个是字符串类型</p>
</li>
</ol>
<h2 id="内置对象">内置对象</h2>
<h3 id="math对象">Math对象</h3>
<ul>
<li>
<p>最大值</p>
<p>Math.max()</p>
</li>
<li>
<p>绝对值</p>
<p>Math.abs()</p>
</li>
<li>
<p>取整</p>
<ul>
<li>
<p>向下</p>
<p>Math.floor()</p>
</li>
<li>
<p>向上</p>
<p>Math.ceil()</p>
</li>
<li>
<p>四舍五入</p>
<p>Math.round()</p>
<p>==注意==：负数中.5特殊，往大了取</p>
</li>
</ul>
</li>
<li>
<p>随机数</p>
<ul>
<li>
<p>返回[0,1)之间的小数</p>
<p>Math.random()</p>
</li>
<li>
<p>返回两个数之间的随机整数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//返回两个数之间的随机整数，并且包含这两个数
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">getRandom</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="nx">min</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="日期对象">日期对象</h3>
<ul>
<li>
<p>返回系统当前时间
new Date()</p>
</li>
<li>
<p>返回自定义的时间</p>
<ul>
<li>
<p>参数为数字型</p>
<p>new Date(2020,6,30)</p>
<p>==注意==：返回的月份比实际大1月</p>
</li>
<li>
<p>参数为字符串型</p>
<p>new Date(‘2020–6–30 8:23:45’);</p>
</li>
</ul>
</li>
<li>
<p>年</p>
<p>date.getFullYear()</p>
</li>
<li>
<p>月</p>
<p>date.getMouth() + 1（0~11）</p>
</li>
<li>
<p>日</p>
<p>date.getDate()</p>
</li>
<li>
<p>周几</p>
<p>date.getDay()   （0-6）</p>
</li>
<li>
<p>时</p>
<p>date.getHours()</p>
</li>
<li>
<p>分</p>
<p>date,getMinutes()</p>
</li>
<li>
<p>秒</p>
<p>date.getSeconds()</p>
</li>
<li>
<p>时间戳（毫秒）</p>
<p>==注意==：是距离1970年1月1日过了多少毫秒</p>
<ul>
<li>
<p>date.valueof()</p>
</li>
<li>
<p>date.getTime()</p>
</li>
<li>
<p>+new Date()</p>
</li>
<li>
<p>Date.now()<!--H5新增--></p>
</li>
</ul>
</li>
</ul>
<h3 id="数组对象">数组对象</h3>
<h4 id="创建数组">创建数组</h4>
<ul>
<li>
<p>字面量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>利用new Array()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//长度为2的空数组
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">//等价于[2,3]表示里面有两个数组元素是2和3
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>==注意==：</p>
<ol>
<li>读取不存在的索引不会报错，返回undefined</li>
<li>对于连续的数组，用length会得到数组的长度，对于非连续的数组，length获得数组的最大索引加1</li>
</ol>
<h4 id="检测是否为数组">检测是否为数组</h4>
<ul>
<li>arr instance of Array</li>
<li>Array.isArray(arr)<!--H5新增--></li>
</ul>
<h4 id="增">增</h4>
<ul>
<li>
<p>在末尾加,   返回新数组长度</p>
<p>arr.push()</p>
</li>
<li>
<p>在开头加，返回新数组长度</p>
<p>arr.unshift()</p>
</li>
<li>
<p>在指定位置加</p>
<p>splice(开始索引，0，添加的元素) //返回删除的数组，在开始的索引之后增加</p>
</li>
</ul>
<h4 id="删">删</h4>
<ul>
<li>
<p>删末尾一个，返回删除的元素</p>
<p>arr.pop()</p>
</li>
<li>
<p>删开头一个，返回删除的元素</p>
<p>arr.shift()</p>
</li>
<li>
<p>删除并在删除位置添加，会改变原数组</p>
<p>splice(开始索引，删除个数，添加的元素)//返回删除的数组</p>
</li>
</ul>
<h4 id="改">改</h4>
<p>​	splice(开始索引，删除个数，添加的元素)//返回删除的数组</p>
<h4 id="查">查</h4>
<p>根据元素找索引</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">));</span> <span class="c1">//从前往后找 它只返回第一个满足条件的索引号 找不到则会返回-1
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">));</span> <span class="c1">//从后往前找
</span></code></pre></td></tr></table>
</div>
</div><p>findIndex(),返回一个索引</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//根据id从数组中查找元素的索引
</span><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">id</span><span class="p">;</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="翻转">翻转</h4>
<p>arr.reverse()，修改原数组</p>
<h4 id="排序">排序</h4>
<ol>
<li>修改原数组，默认按照unicode编码进行排序</li>
<li>sort里放一个函数如果返回大于0的数则a,b交换位置，如果返回小于0的数则a,b不交换位置</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//换位置
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">){</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="c1">//不换
</span><span class="c1"></span>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//a和b相等
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//对数字进行排序结果会出错，所以需要在sort里面放一个函数实现排序
</span><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="nx">HEAD</span>
          <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span><span class="c1">//升序，如果a-b&gt;0,a&gt;b返回一个&gt;0的数，交换位置
</span><span class="c1"></span><span class="p">});</span>
<span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="c1">//降序
</span><span class="c1"></span><span class="o">=======</span>
<span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span><span class="c1">//降序，如果a-b&gt;0,a&gt;b返回一个&gt;0的数，交换位置
</span><span class="c1"></span><span class="p">});</span>
<span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="c1">//升序
</span><span class="c1"></span><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">1</span><span class="nx">ceb7a2e23037ad4c54e9f577ca2057109b71222</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="合并">合并</h4>
<p>arr1.concat(arr2)</p>
<p>不会改变原数组，返回新数组</p>
<h4 id="数组转字符串">数组转字符串</h4>
<ul>
<li>arr.join(连接符)  //默认逗号，不会改变原数组，将转换后的字符串作为结果返回</li>
<li>arr.toString()  //逗号分隔</li>
</ul>
<h4 id="数组截取">数组截取</h4>
<p>arr.slice(开始索引，结束索引（不包含）)</p>
<p>==注意==：</p>
<ol>
<li>如果传递一个负值，则从后往前进行计算</li>
<li>不会改变原数组</li>
</ol>
<h4 id="数组遍历">数组遍历</h4>
<ul>
<li>array.filter(function(currentValue,index,arr), thisValue)//当前元素的值，当前元素的索引，当前元素属于的数组对象
<ul>
<li>不会改变原始数组</li>
<li>返回一个新数组</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="c1">//根据id查询出要编辑的数据
</span><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="nx">id</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>some(function(){})
<ul>
<li>用于检测数组中的元素是否满足指定条件</li>
<li>some()方法会以此执行数组的每个元素：
<ul>
<li>==如果有一个元素满足条件，则表达式返回true==，剩余的元素不再遍历</li>
<li>如果没有满足体条件的元素，返回false</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>==注意==：不能对空数组进行检测</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"> <span class="c1">//根据当前的id去更新数组中对应的数据
</span><span class="c1"></span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="c1">//箭头函数中的this指向定义这个函数的父级作用域中的this，也就是handle的this，指向vue实例
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="c1">//完成更新操作后需要中止some遍历
</span><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="字符串对象">字符串对象</h3>
<ul>
<li>
<p>string是简单数据类型，为什么有length属性？</p>
<p>步骤：</p>
<ol>
<li>创建基本类型的一个实例；</li>
<li>在实例上调用指定的方法；</li>
<li>销毁这个实例；</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;我是string基本类型的值&#34;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">new_str</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&#34;我是string基本类型的值&#34;</span><span class="p">);</span>  <span class="c1">// 包装处理
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">my_str</span> <span class="o">=</span> <span class="nx">new_str</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
<span class="nx">new_str</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>   <span class="c1">// 方法调用之后销毁实例
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">str2</span> <span class="o">=</span> <span class="s2">&#34;xqz&#34;</span><span class="p">;</span>
<span class="nx">str2</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>   <span class="c1">//undefined
</span><span class="c1">//可见，并非string调用了自身的方法，而是后台创建了一个基本包装类型String，从而进行下一步操作。
</span><span class="c1">//基本类型的“销毁性”致使我们不能为基本类型添加属性和方法。
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>==注意==：String,Number,Boolean都是基本包装类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span> <span class="c1">//这里不报错是因为转为了基本包装类型Number(),给改对象添加了hello属性，而后让new_num=null从而销毁实例
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hello</span><span class="p">);</span><span class="c1">//这里调用a的hello属性不报错，结果为undefined，因为重新又创建了一个Number()实例，此时这个实例中并没有hello属性
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>字符串的不可变性</p>
<p>指的是里面的值不变，其实只是地址变了，内存中开辟了一个内存空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">str2</span> <span class="o">=</span> <span class="s1">&#39;andy&#39;</span><span class="p">;</span>
<span class="nx">str2</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span><span class="p">;</span> <span class="c1">//str从andy指向red，但是andy仍然存在
</span><span class="c1">//因为我们字符串的不可变所以不要大量拼接字符串
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">str2</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//如果i过大会很卡
</span><span class="c1"></span>	<span class="nx">str</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>==注意==：字符串的所有方法都不改变自身，都返回一个新的字符串</p>
</li>
</ul>
<h4 id="根据值找索引">根据值找索引</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;改革春风吹满地，春天来了&#39;</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;春&#39;</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;春&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">//从索引号3的位置(包括3)往后找 lastindexof()同理
</span></code></pre></td></tr></table>
</div>
</div><h4 id="根据索引找值">根据索引找值</h4>
<ul>
<li>
<p>返回字符</p>
<p>str.charAt()</p>
<p>str[]<!--H5新增--></p>
</li>
<li>
<p>返回ASCII值，unicode编码</p>
<p>str.charCodeAt()</p>
</li>
<li>
<p>str[]</p>
<p>因为在底层字符串是以字符数组的形式保存的</p>
</li>
</ul>
<h4 id="合并-1">合并</h4>
<p>​	str1.concat(str2)</p>
<h4 id="截取">截取</h4>
<ul>
<li>str.substr(开始的索引，截取长度)  //如果只有一个参数且为负数，则是从后往前</li>
<li>str.substring(开始索引，结束索引)  //结束索引不能为负数，负数会被转为0,如果第二个参数小于第一个参数会自动交换位置</li>
<li>str.slice(开始索引，结束索引（不包含）) //可以接受负数，会将字符串长度与负数相加作为第二个参数</li>
<li>都是返回截取下来的字符串</li>
</ul>
<h4 id="替换">替换</h4>
<p>​	str.replace(要替换，替换为)  //只会换一个</p>
<p>返回一个新的字符串</p>
<p>可以接收正则表达式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[a-z]/g</span><span class="p">,</span><span class="s2">&#34;@&#34;</span><span class="p">);</span><span class="c1">//全部替换
</span></code></pre></td></tr></table>
</div>
</div><h4 id="大小写">大小写</h4>
<p>​	toUpperCase()</p>
<p>​	toLowerCase()</p>
<h4 id="去除空格">去除空格</h4>
<p>​	str.trim()</p>
<h4 id="是否包含">是否包含</h4>
<p>​	str.includes()   //返回bool类型（es6）</p>
<h4 id="搜索指定内容">搜索指定内容</h4>
<p>​	str.search()</p>
<p>​	如果搜索到指定内容,则会返回第一次出现的索引，如果没有搜索到则返回-1，它可以接收正则表达式作为参数来进行搜索</p>
<p>​	str.search(/a[bef]c/)，不能全局匹配，只会查找第一个</p>
<h4 id="提取">提取</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;123afd445fda5&#39;</span><span class="p">;</span>
<span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[A-z]/</span><span class="p">);</span><span class="c1">//默认情况下match智慧找到第一个符合要求的内容，找到以后就会停止检索，可以设置正则表达式为全局匹配模式
</span><span class="c1"></span><span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[A-z]/gi</span><span class="p">);</span><span class="c1">//全局匹配并且忽略大小写，返回一个新的数组
</span></code></pre></td></tr></table>
</div>
</div><h4 id="字符串转数组">字符串转数组</h4>
<p>​	str.split(以什么分隔符分割该字符串)  //返回一个数组</p>
<p>==注意==：</p>
<ol>
<li>根据任意字母来将字符串拆分str.split(/[A-z]/)，这个方法不设置全局匹配也会全部拆分;</li>
</ol>
<h4 id="根据字符编码获取字符">根据字符编码获取字符</h4>
<p>​	var result = String.fromCharCode()</p>
<h3 id="formdata对象">FormData对象</h3>
<p><a href="https://www.jianshu.com/p/e984c3619019" target="_blank" rel="noopener noreffer">https://www.jianshu.com/p/e984c3619019</a></p>
<h3 id="arguments的使用">arguments的使用</h3>
<ul>
<li>
<p>arguments是函数的一个内置对象，只有function()才有，当不确定有几个参数传递时使用</p>
</li>
<li>
<p>arguments是一个伪数组：可以通过索引访问，有length属性，但是没有数组的方法</p>
</li>
</ul>
<h2 id="js预解析">JS预解析</h2>
<h3 id="变量提升">变量提升</h3>
<p>只提升变量名（使用var定义），不提升赋值操作</p>
<h3 id="函数提升">函数提升</h3>
<p>只提升函数声名，不调用函数</p>
<p>==注意==：先执行变量提升，再执行函数提升</p>
<ul>
<li>
<p>例题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">	    <span class="nx">f1</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span>

        <span class="kd">function</span> <span class="nx">f1</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
            <span class="c1">//相当于 Var a=9;b=9;c=9;b和c直接赋值 没有var 当全局变量看
</span><span class="c1"></span>            <span class="c1">//集体声明应该写成 var a=9，b=9,c=9;
</span><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//相当于
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">f1</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">h</span><span class="p">;</span>
            <span class="nx">h</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
            <span class="nx">b</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
            <span class="nx">c</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">f1</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="c1">//此处报错，h没有声名，因为h的作用域只在f1函数中
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="json">JSON</h2>
<ol>
<li>JS中的对象只有JS自己认识，其他的语言都不认识</li>
<li>JSON就是一个特殊格式的字符串，可以被任意语言所识别，且可以转成任意语言的对象，JSON在开发中主要用来数据的交互</li>
<li>JavaScript Object Notation JS对象表示法</li>
</ol>
<p>==注意==：</p>
<ol>
<li>JSON字符串的属性名必须加双引号</li>
</ol>
<h3 id="分类">分类</h3>
<ol>
<li>对象{}</li>
<li>数组[]</li>
</ol>
<h3 id="json中允许的值">JSON中允许的值</h3>
<ol>
<li>字符串</li>
<li>数值</li>
<li>布尔值</li>
<li>null</li>
<li>对象</li>
<li>数组</li>
</ol>
<h3 id="json转对象">JSON转对象</h3>
<p>JSON.parse()</p>
<ol>
<li>需要一个JSON字符串作为参数，会将该字符串转为JSON对象</li>
</ol>
<h3 id="对象转json">对象转JSON</h3>
<p>JSON.stringify()</p>
<ol>
<li>需要一个js对象作为参数，会返回一个JSON字符串</li>
</ol>
<h1 id="webapi">WebAPI</h1>
<h2 id="dom">DOM</h2>
<h3 id="节点操作">节点操作</h3>
<p></p>
<ul>
<li>
<p>nodeType</p>
<ol>
<li>元素节点</li>
<li>属性节点</li>
<li>文本节点</li>
</ol>
</li>
<li>
<p>nodeName</p>
</li>
<li>
<p>nodeValue</p>
</li>
</ul>
<p>==注意==：节点操作主要操作元素节点</p>
<h5 id="元素节点和元素对象的区别">元素节点和元素对象的区别</h5>
<p>1.所谓元素，即html文档里面，所有的标签都可以称之为元素，比如说<p>、<tr>等，也就是说元素是个统称，一个文档里面有很多的元素。</p>
<p>2.所谓节点，是js为了对html文档进行操作，而开发的，即DOM，文档对象模型。即每个元素都可以称之为一个节点，节点是唯一的。比方来说，《p》标签，肯定是一个p标签元素，那如果通过js对它进行样式控制的时候，就必须获取（找到）到这个元素，称之为节点，如果有好多元素，可以获得第1个、第2个或者第n个。总之，元素是统称，节点是具有唯一性的。</p>
<h5 id="获取节点">获取节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>document.getElementById('')</td>
<td>根据id返回元素对象</td>
</tr>
<tr>
<td>document.getElementByClassName('')</td>
<td>根据类名返回元素对象</td>
</tr>
<tr>
<td>document.getElementByTagName('')</td>
<td>根据标签名返回元素对象集合（伪数组），可以先获取父元素在获取子元素</td>
</tr>
<tr>
<td>document.querySelector('')</td>
<td>根据css选择器返回第一个符合条件的元素对象</td>
</tr>
<tr>
<td>document.querySelectorAll('')</td>
<td>根据css选择器返回所有元素对象</td>
</tr>
<tr>
<td>document.body()</td>
<td>获取body标签</td>
</tr>
<tr>
<td>document.documentElement</td>
<td>获取html标签</td>
</tr>
</tbody>
</table>
<p>==注意==：得到的多个都是伪数组</p>
<h5 id="获取父节点">获取父节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.parentNode</td>
<td>得到的是离元素最近的父级节点</td>
</tr>
</tbody>
</table>
<h5 id="获取子节点">获取子节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.children</td>
<td>得到所有子节点（元素节点）</td>
</tr>
<tr>
<td>node.children[0]</td>
<td>得到子节点的第一个元素</td>
</tr>
<tr>
<td>node.children[node.children.length-1]</td>
<td>得到子节点的最后一个元素</td>
</tr>
<tr>
<td>node.childNodes</td>
<td>包括空白的所有子节点</td>
</tr>
<tr>
<td>node.firstChild</td>
<td>包括空白的第一个子节点</td>
</tr>
<tr>
<td>node.firstElementchild</td>
<td>不包括空白的第一个子节点</td>
</tr>
</tbody>
</table>
<h5 id="获取兄弟节点">获取兄弟节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.nextElementSibling</td>
<td>下一个兄弟节点（元素节点）</td>
</tr>
<tr>
<td>node.previousElementSibling</td>
<td>上一个兄弟节点（元素节点）</td>
</tr>
</tbody>
</table>
<h5 id="创建节点">创建节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>var child = document.createElement(&lsquo;标签名&rsquo;)</td>
<td>创建一个节点</td>
</tr>
<tr>
<td>document.createTextNode()</td>
<td>创建文本节点，child.appendChild(textnode)</td>
</tr>
<tr>
<td>element.innerHTML=&rsquo;'</td>
<td>创建并且添加</td>
</tr>
</tbody>
</table>
<h5 id="添加节点">添加节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.appendChild(child)</td>
<td>添加到父节点（node）的子节点列表末尾</td>
</tr>
<tr>
<td>node.insertBefore(child,指定元素（node.children[]）)</td>
<td>添加到父节点（node）的指定的子节点之前</td>
</tr>
</tbody>
</table>
<h5 id="删除节点">删除节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.removeChlid(child)</td>
<td>node是一个父节点</td>
</tr>
<tr>
<td>node.remove()</td>
<td>删除自身节点及其子节点</td>
</tr>
</tbody>
</table>
<h5 id="复制节点">复制节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.cloneNode()</td>
<td>只复制标签</td>
</tr>
<tr>
<td>node.cloneNode(true)</td>
<td>深拷贝，全复制</td>
</tr>
</tbody>
</table>
<h5 id="替换节点">替换节点</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>node.replaceChild(new ,old)</td>
<td>替换节点</td>
</tr>
</tbody>
</table>
<h3 id="元素操作">元素操作</h3>
<h4 id="操作元素内容">操作元素内容</h4>
<p>innerHTML和innerText的区别</p>
<ul>
<li>
<p>innerText不识别html标签，且会自动去除空格和换行</p>
</li>
<li>
<p><a href="" rel="">innerHTML</a>识别html标签，且保留空格和换行</p>
</li>
<li>
<p>这两个属性可读写，可以获取元素里面的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//innerText和inner HTML的区别
</span><span class="c1"></span>        <span class="c1">//1.innerText 不识别HTML标签 去除空格和换行
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
        <span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span><span class="o">=</span><span class="s1">&#39;&lt;strong&gt;1&lt;/strong&gt;&#39;</span><span class="p">;</span>
        <span class="c1">//2.innerHTML 识别HTML标签 （常用） 保留空格和换行
</span><span class="c1"></span>        <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s1">&#39;&lt;strong&gt;1&lt;/strong&gt;&#39;</span><span class="p">;</span>

        <span class="c1">//这两个属性可读写 可获取元素里的内容
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="操作元素属性">操作元素属性</h4>
<h5 id="获取属性">获取属性</h5>
<h6 id="获取元素自带属性">获取元素自带属性</h6>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.属性名</td>
<td>常见元素自带的属性：src，href，title，alt等，表单元素自带的属性：type，value，disable等，获取class属性时用className获取</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>offset系列属性</p>
<table>
<thead>
<tr>
<th>offset系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.offsetParent</td>
<td>返回最近一级的带有定位的父元素，没有则返回body==区别==element.parentNode返回最近一级父亲，不管有没有定位</td>
</tr>
<tr>
<td>element.offsetTop</td>
<td>返回元素相对带有定位父元素上方的偏移，没有则以body为准</td>
</tr>
<tr>
<td>element.oddsetLeft</td>
<td>返回元素相对带有定位父元素左边框的偏移</td>
</tr>
<tr>
<td>element.offsetWidth</td>
<td>返回自身包括==边框，padding，内容区==的宽度，返回数值不带单位</td>
</tr>
<tr>
<td>element.offsetHeight</td>
<td>返回自身包括边框，padding，内容区的宽度，返回数值不带单位</td>
</tr>
</tbody>
</table>
<p>==offset与style的区别==</p>
<table>
<thead>
<tr>
<th>offset</th>
<th>style</th>
</tr>
</thead>
<tbody>
<tr>
<td>可以得到任意样式表中的样式值</td>
<td>只能得到行内样式表中的样式值</td>
</tr>
<tr>
<td>返回的数值没有单位</td>
<td>返回带有单位的字符串</td>
</tr>
<tr>
<td>offsetWidth包括padding+border+width</td>
<td>style.width不包括padding和border</td>
</tr>
<tr>
<td>offsetWidth等属性是只读属性，不能赋值</td>
<td>可读可写</td>
</tr>
<tr>
<td>用于获取元素大小</td>
<td>用于更改元素样式值</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>client系列属性</p>
<table>
<thead>
<tr>
<th>client系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.clientTop</td>
<td>返回元素上边框的大小</td>
</tr>
<tr>
<td>element.clientLeft</td>
<td>返回元素左边框的大小</td>
</tr>
<tr>
<td>element.clientWidth</td>
<td>返回自身包括==padding，内容区==的宽度，返回数值不带单位</td>
</tr>
<tr>
<td>element.clientHeight</td>
<td>返回自身包括padding，内容区的宽度，返回数值不带单位</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>scroll系列属性</p>
<table>
<thead>
<tr>
<th>scroll系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.scrollTop</td>
<td>返回被卷去的上侧距离（overflow：auto；滚动条），返回数值不带单位，有padding从内容离开padding算起，否则边框下沿开始计算</td>
</tr>
<tr>
<td>element.scrollLeft</td>
<td>返回被卷去的左侧距离，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollWidth</td>
<td>返回自身不含边框的==实际宽度==（超出的也算进去），返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollHeight  返回自身不含边框的==实际高度==（超出的也算进去），返回数值不带单位</td>
<td></td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>==注意==：</p>
<ol>
<li>元素被卷去的头部距离：element.scrollTop获取</li>
<li>页面被卷去的头部距离，window.pageYoffset获取</li>
<li>说明垂直滚动条滚动到底：scrollHeight-scrollTop == clientHright         //用于判断用户是否阅读完协议</li>
</ol>
<h6 id="获取元素自定义属性">获取元素自定义属性</h6>
<p>element.getAttribute(&lsquo;属性名&rsquo;)</p>
<h5 id="设置属性">设置属性</h5>
<h6 id="设置元素自带属性">设置元素自带属性</h6>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.属性名 = &lsquo;';</td>
<td></td>
</tr>
</tbody>
</table>
<h6 id="设置元素自定义属性">设置元素自定义属性</h6>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.setAttribute(&lsquo;属性名&rsquo;，&lsquo;值&rsquo;)</td>
<td></td>
</tr>
</tbody>
</table>
<p>==注意==：修改class属性时</p>
<ol>
<li>用element.==className== &lsquo;';</li>
<li>用element.setAttribute('==class==&rsquo;,'');</li>
</ol>
<p>==注意==：H5规定自定义属性data开头作为属性名并且赋值：<div data-index='1'></div></p>
<h5 id="移除属性">移除属性</h5>
<h6 id="移除元素自定义属性">移除元素自定义属性</h6>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.removeAttribute('')</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="判断是否有该属性">判断是否有该属性</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.hasAttribute()</td>
<td>判断元素属性，而不是css样式表中的样式属性</td>
</tr>
</tbody>
</table>
<h4 id="操作元素样式">操作元素样式</h4>
<h5 id="获取样式属性">获取样式属性</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>getComputedStyle(element).属性</td>
<td>可以获取css样式表的样式，需要两个参数1.需要获取样式的元素2.可传递一个伪元素，一般都传null，该方法会返回一个对象，对象中封装了当前元素对应的样式。</td>
</tr>
<tr>
<td>element.style.样式名</td>
<td>只能获取行内样式（这里的style就是元素的一个属性，将将样式名修改为驼峰命名）</td>
</tr>
</tbody>
</table>
<h5 id="设置样式属性">设置样式属性</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.className=&rsquo;'</td>
<td>会覆盖原来的class，用 += 可以防止覆盖，注意要加空格className += ‘ b2’</td>
</tr>
<tr>
<td>element.style.样式名=&lsquo;值&rsquo;</td>
<td>添加的是内联样式，所以如果在样式中写了important，js就无法修改了（这里的style就是元素的一个属性）</td>
</tr>
</tbody>
</table>
<h3 id="动画函数的封装">动画函数的封装</h3>
<h4 id="动画函数原理">动画函数原理</h4>
<p>定义一个setInterval的定时器，函数里对元素的样式进行操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">time</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="动画函数简单封装">动画函数简单封装</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>点击开炮<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">btn</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
        <span class="nx">animate</span><span class="p">(</span><span class="nx">div</span><span class="p">,</span> <span class="mi">300</span><span class="p">);</span>
        
        <span class="c1">//obj目标元素，target目标位置
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">animate</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//防止速度加快先清除以前的定时器
</span><span class="c1"></span>            <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span>
            <span class="c1">//给不同的元素指定不同的定时器
</span><span class="c1"></span>            <span class="nx">obj</span><span class="p">.</span><span class="nx">time</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">&gt;=</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">obj</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">},</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">};</span>
        <span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
            <span class="c1">//bug:当不断点击按钮元素速度会越来越快
</span><span class="c1"></span>            <span class="c1">//解决方案：元素只有一个定时器执行
</span><span class="c1"></span>            <span class="nx">animate</span><span class="p">(</span><span class="nx">span</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="缓动动画函数封装">缓动动画函数封装</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">animate</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//先清除以前的定时器
</span><span class="c1"></span>    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span>
    <span class="c1">//给不同的元素指定不同的定时器
</span><span class="c1"></span>    <span class="nx">obj</span><span class="p">.</span><span class="nx">time</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//把步长值,上下取整看正负值
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span> <span class="o">-</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">offsetLeft</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">==</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span>
            <span class="c1">//回调函数
</span><span class="c1"></span>            <span class="c1">// if (callback) {
</span><span class="c1"></span>            <span class="c1">//     callback();
</span><span class="c1"></span>            <span class="c1">// }
</span><span class="c1"></span>            <span class="nx">callback</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span><span class="p">();</span><span class="c1">//&amp;&amp;具有短路的功能
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">obj</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="mi">15</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="三种动态创建元素的区别">三种动态创建元素的区别</h3>
<ol>
<li>
<p>document.write()会导致文档流重绘</p>
</li>
<li>
<p>element.innerHTML = ''</p>
</li>
</ol>
<ul>
<li>
<p>拼接字符串，很慢</p>
<p>解决方法：存入数组中，一次性渲染，很快</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.inner&#39;</span><span class="p">);</span>
        <span class="nx">inner</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;a href=&#34;#&#34;&gt;百度&lt;/a&gt;&#39;</span><span class="p">;</span>
        <span class="c1">// 创建多个字符串拼接的时候特别慢效率低
</span><span class="c1"></span>        <span class="c1">// 但是用数组的形式拼接是最快的
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="kd">var</span> <span class="nx">date1</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;&lt;a href=&#34;#&#34;&gt;9&lt;/a&gt;&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">inner</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span><span class="c1">//数组转字符串
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">date2</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date2</span> <span class="o">-</span> <span class="nx">date1</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<ol start="3">
<li>
<p>var child  = document.createElement();</p>
<p>node.appendChild(child);</p>
<p>比2慢，比1快</p>
</li>
</ol>
<h3 id="事件">事件</h3>
<h4 id="鼠标事件">鼠标事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onclick</td>
<td>点击</td>
</tr>
<tr>
<td>onmouseover/onmouseenter</td>
<td>移入</td>
</tr>
<tr>
<td>onmouseout/onmouseleave</td>
<td>移出</td>
</tr>
<tr>
<td>onmousedown</td>
<td>按下</td>
</tr>
<tr>
<td>onmouseup</td>
<td>松开</td>
</tr>
<tr>
<td>onmousemove</td>
<td>移动</td>
</tr>
<tr>
<td>onwheel</td>
<td>鼠标滚轮，e.datail（火狐）或者e.wheelDelta</td>
</tr>
</tbody>
</table>
<p>==注意==：mouseover和mouseenter的区别：mouseenter不会冒泡,简单的说,它不会被它本身的子元素的状态影响到.但是mouseover就会被它的子元素影响到,在触发子元素的时候,mouseover会冒泡触发它的父元素.(想要阻止mouseover的冒泡事件就用mouseenter)</p>
<h4 id="键盘事件">键盘事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onkeyup</td>
<td>松开，不区分大小写</td>
</tr>
<tr>
<td>onkeydown</td>
<td>会在文字还没进入文本框前就添加事件，不区分大小写，一直按着某个按键不松手，事件会连续触发，第一次和第二次之间会间隔稍微长一点，其他会特别快</td>
</tr>
<tr>
<td>onkeypress</td>
<td>不识别功能按键，如ctrl。区分大小写，触发比onkeydown慢</td>
</tr>
</tbody>
</table>
<h4 id="表单事件">表单事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onfocus</td>
<td>获得焦点，无冒泡</td>
</tr>
<tr>
<td>onblur</td>
<td>失去焦点，无冒泡</td>
</tr>
<tr>
<td>onchange</td>
<td>在元素值改变时触发，适用于input，textarea，select元素</td>
</tr>
<tr>
<td>onselect</td>
<td>在文本框内容被选中时触发，适用于单选框，多选框</td>
</tr>
</tbody>
</table>
<h4 id="编辑事件">编辑事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>oncopy</td>
<td>在拷贝时触发</td>
</tr>
<tr>
<td>onselect</td>
<td>在文本框内容选中时触发，return false让用户无法选中</td>
</tr>
<tr>
<td>oncontentmenu</td>
<td>鼠标右击触发，用e.preventDefault()来禁止鼠标右键</td>
</tr>
</tbody>
</table>
<h4 id="页面事件">页面事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onload</td>
<td>等待文档流加载完成后触发</td>
</tr>
<tr>
<td>onbeforeunload</td>
<td>即将离开页面（刷新或关闭）时触发</td>
</tr>
</tbody>
</table>
<h4 id="滚动事件">滚动事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onscroll</td>
<td>滚动条滚动触发该事件，给添加了overflow：auto的元素绑定</td>
</tr>
</tbody>
</table>
<h4 id="传统事件">传统事件</h4>
<h5 id="注册">注册</h5>
<p>element.事件类型 = function(){}</p>
<h5 id="删除">删除</h5>
<p>element.事件类型 = null</p>
<h4 id="事件监听器">事件监听器</h4>
<h5 id="区别传统">区别传统</h5>
<p>相比传统的onclick=function(){}，addEventListener可以让同一元素同一事件可以注册多个监听器，按注册顺序依此执行，而传统的只能写一个，如果写了多个以最后一个为准</p>
<h5 id="注册-1">注册</h5>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.addEventListener(''&quot;,function(e){},[true/false])</td>
<td>第一个参数事件类型，不用加on,第三个参数默认false，冒泡阶段,true，捕获阶段</td>
</tr>
</tbody>
</table>
<h5 id="删除-1">删除</h5>
<table>
<thead>
<tr>
<th>API事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>element.removeEventListener(''&quot;,函数名,[true/false])</td>
<td>第一个参数事件类型，不用加on,第三个参数默认false，冒泡阶段,true，捕获阶段</td>
</tr>
</tbody>
</table>
<h4 id="事件对象">事件对象</h4>
<h5 id="事件对象属性">事件对象属性</h5>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e.type</td>
<td>事件类型</td>
</tr>
<tr>
<td>e.target</td>
<td>真正触发事件的那个元素（事件委托：ul和li利用冒泡只需给ul添加点击事件，用e.target获取点击的li）</td>
</tr>
</tbody>
</table>
<h5 id="事件对象方法">事件对象方法</h5>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e.preventDefault()</td>
<td>阻止默认行为</td>
</tr>
<tr>
<td>e.stopPropagation()</td>
<td>阻止事件冒泡</td>
</tr>
</tbody>
</table>
<h5 id="鼠标事件对象">鼠标事件对象</h5>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e.pageX/Y</td>
<td>相对于文档页面（图片跟随鼠标移动，图片要绝对定位）</td>
</tr>
<tr>
<td>e.clientX/Y</td>
<td>相对于浏览器的可视窗口</td>
</tr>
<tr>
<td>e.screenX/Y</td>
<td>相对于电脑屏幕</td>
</tr>
<tr>
<td>e.offsetX/Y</td>
<td>相对于带有定位的父盒子的xy坐标</td>
</tr>
</tbody>
</table>
<h5 id="键盘事件对象">键盘事件对象</h5>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e.altKey</td>
<td></td>
</tr>
<tr>
<td>e.ctrlKey</td>
<td></td>
</tr>
<tr>
<td>e.shiftKey</td>
<td>是否按下shift</td>
</tr>
<tr>
<td>e.keyCode</td>
<td>键盘输入的ascll码</td>
</tr>
</tbody>
</table>
<h5 id="dom事件流">DOM事件流</h5>
<p>传统和监听器一般都是得到冒泡阶段，把addEventListener第三个参数改为true则能得到捕获阶段</p>
<h6 id="捕获阶段">捕获阶段</h6>
<p>document=&gt;html=&gt;body=&gt;father=&gt;son（如果father有监听事件，先执行father的，再执行son的）</p>
<h6 id="冒泡阶段">冒泡阶段</h6>
<p>于捕获相反，取消冒泡：e.cancelBubble=true，点击了子元素，点击事件冒泡到父元素</p>
<p>==注意==：onblur，onfocus，onmouseenter，onmousemove没有冒泡</p>
<h5 id="事件委托">事件委托</h5>
<p>原理：将事件监听器设置在父节点上，利用冒泡原理影响每个子节点，用e.target获取按下的那个元素</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2342<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2342<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2342<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2342<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>2342<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">);</span>
        <span class="nx">ul</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//排他
</span><span class="c1"></span>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">ul</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//得到你点击的小li
</span><span class="c1"></span>            <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;pink&#39;</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="bom">BOM</h2>
<p>Window对象是浏览器的顶级对象</p>
<ol>
<li>它是JS访问浏览器窗口的一个接口</li>
<li>它是一个全局对象。定义在作用域中的变量，函数会变成window对象的属性和方法</li>
</ol>
<p>==注意==：window下的一个特殊属性：window.name</p>
<h3 id="window对象">window对象</h3>
<p>==浏览器内核常见模块：==</p>
<p>js引擎模块、html，css文档解析模块、DOM\CSS模块、布局和渲染模块、定时器模块、事件响应模块、网络请求模块。</p>
<h4 id="location属性">location属性</h4>
<p>location是一个对象，用于获取或设置窗体的URL，并且可以用于解析，如果直接打印location，返回的是地址栏的信息</p>
<ul>
<li>
<p>属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>window.location.href</td>
<td>返回当前页面的URL</td>
</tr>
<tr>
<td>location.host</td>
<td>返回主机域名</td>
</tr>
<tr>
<td>location.port</td>
<td>返回端口号</td>
</tr>
<tr>
<td>location.pathname</td>
<td>返回路径</td>
</tr>
<tr>
<td>location.hash</td>
<td>返回片段 #后面的内容 常见于链接 锚点</td>
</tr>
<tr>
<td>window.lacation.search</td>
<td>返回参数：？键=值（var arr=substr（1）.split（“=”））</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>assign()</td>
<td>与改变href属性一样可以跳转页面，可以后退，和直接修改location一样</td>
</tr>
<tr>
<td>replace()</td>
<td>替换当前页，不记录历史，无法后退</td>
</tr>
<tr>
<td>reload()</td>
<td>重新加载页面，若参数为true会强制刷新，相当于浏览器上的刷新按钮</td>
</tr>
</tbody>
</table>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">btn</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
        <span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">location</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="s1">&#39;案例/login.html&#39;</span><span class="p">);</span>
            <span class="nx">location</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;案例/login.html&#39;</span><span class="p">);</span>
            <span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="navigator属性">navigator属性</h4>
<p>包含有关浏览器的信息，常用window.navigator.userAgent,返回由客户机发送服务器的user-agent头部的值，用正则进行匹配</p>
<p>==注意==：</p>
<ol>
<li>ie11已经不能用useragent判断浏览器了，但是ie中有ActiveXObject对象属性，通过判断页面一这个属性来知道是不是ie浏览器</li>
</ol>
<h4 id="histroy属性">histroy属性</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>back()</td>
<td>后退，相当于浏览器上的按钮</td>
</tr>
<tr>
<td>forward()</td>
<td>前进</td>
</tr>
<tr>
<td>go(1/-1)</td>
<td>1前进一个页面，-1后退一个页面，-2后退两个页面</td>
</tr>
<tr>
<td>length</td>
<td>当此访问的链接的数量</td>
</tr>
</tbody>
</table>
<h4 id="其他常见属性">其他常见属性</h4>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>window.page（Y/X）offset</td>
<td>获取页面卷去的头部/左侧</td>
</tr>
<tr>
<td>window.scroll(x,y)</td>
<td>x,y不加单位，滚定至文档中的特定位置</td>
</tr>
<tr>
<td>window.innerWidth</td>
<td>返回窗口宽度，无单位</td>
</tr>
</tbody>
</table>
<h3 id="window事件">window事件</h3>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>window.onload=funtion(){}/window.addEventListenter(&lsquo;load&rsquo;,function(){})</td>
<td>在文档内容（css，js，html）全部加载完成后触发</td>
</tr>
<tr>
<td>window.onDOMContentLoaded</td>
<td>在DOM加载完成后就触发</td>
</tr>
<tr>
<td>window.onresize</td>
<td>调整窗口大小时触发</td>
</tr>
</tbody>
</table>
<h3 id="定时器">定时器</h3>
<h4 id="settimeout">setTimeout</h4>
<ul>
<li>
<p>创建</p>
<p>会返回一个定时器ID给变量</p>
<p>var time = window.setTimeout(回调函数，[延迟的毫秒数])//在定时器到期后执行回调函数，==只调用一次==</p>
</li>
<li>
<p>清除</p>
<p>clearTimeout(定时器ID)</p>
</li>
</ul>
<h4 id="setinterval">setInterval</h4>
<ul>
<li>
<p>创建</p>
<p>var time = window.setInterval(回调函数，[延迟的毫秒数])//每隔延迟的时间就调用一次，==会重复调用==</p>
</li>
<li>
<p>清除</p>
<p>clearInterval(定时器ID)，可以接收任何参数，如果参数是undefined或者null则什么也不做</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn1</span><span class="p">,</span><span class="mi">500</span><span class="p">)</span>
        <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn1</span><span class="p">(),</span><span class="mi">500</span><span class="p">)</span><span class="c1">//如果没有返回的函数则只执行一次  1 22222.。。
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">fn1</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="this指向问题">this指向问题</h3>
<ol>
<li>在全局作用域，定时器，普通函数中this指向window，==注意==：箭头函数中的this指向上下文对象</li>
<li>方法中的this指向调用者</li>
<li>构造函数中的this指向实例</li>
</ol>
<h3 id="js执行对列">JS执行对列</h3>
<p>同步任务在主线程执行，形成一个执行栈。当有异步任务时，如ajax，DOM待触发事件，定时器。放入异步进程处理，触发后放入任务队列（异步队列），等待主线程执行完毕后，通过事件循环机制来任务队列中取出任务执行</p>
<p></p>
<h1 id="js高级">JS高级</h1>
<h2 id="类和对象">类和对象</h2>
<ul>
<li>
<p>关键字：class</p>
<p>注意:类中所有函数不需要加function关键字，多个方法间不加逗号分隔.</p>
</li>
<li>
<p>方法中的this指向：方法的调用者</p>
</li>
</ul>
<h3 id="构造器">构造器</h3>
<ul>
<li>
<p>关键字：constructor()</p>
</li>
<li>
<p>作用:用于传递参数，返回实例对象，new生成对象实例时自动调用。</p>
<p>注意：如果未定义会自动创建一个constructor()</p>
</li>
<li>
<p>this指向：实例对象</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"> <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Star</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">sing</span><span class="p">(</span><span class="nx">song</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">song</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">zxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;张学友&#39;</span><span class="p">)</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ldh</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">ldh</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
        <span class="nx">ldh</span><span class="p">.</span><span class="nx">sing</span><span class="p">(</span><span class="s1">&#39;冰雨&#39;</span><span class="p">)</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：</p>
<p>this的指向问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>
        唱歌
    <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">that</span><span class="p">;</span>
        <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
            <span class="c1">//构造器里面的this指向实例对象
</span><span class="c1"></span>            <span class="nx">constructor</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
                <span class="c1">// this.sing();
</span><span class="c1"></span>                <span class="k">this</span><span class="p">.</span><span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sing</span><span class="p">;</span><span class="c1">//因为这个按钮调用了这个函数
</span><span class="c1"></span>            <span class="p">}</span>
            <span class="c1">//这个方法里的this 指向的是btn 这个按钮
</span><span class="c1"></span>            <span class="nx">sing</span><span class="p">()</span> <span class="p">{</span>
                <span class="c1">// console.log(this.uname);
</span><span class="c1"></span>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">uname</span><span class="p">);</span> <span class="c1">//that 里面存储的是constructor里面的this
</span><span class="c1"></span>            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">father</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Father</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">);</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="类的继承">类的继承</h2>
<h3 id="关键字">关键字</h3>
<ul>
<li>
<h3 id="entends">entends</h3>
</li>
<li>
<p>注意：ES6中类没有变量提升，必须先定义类，才能实例化</p>
</li>
</ul>
<h3 id="继承属性">继承属性</h3>
<p>调用父类构造函数：</p>
<ul>
<li>关键字：super(x,y)</li>
</ul>
<p>注意：在constructor中调用，且必须在子元素的this之前调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">money</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">Father</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
                <span class="kr">super</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">son</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
        <span class="nx">son</span><span class="p">.</span><span class="nx">money</span><span class="p">();</span>
        <span class="nx">son</span><span class="p">.</span><span class="nx">sum</span><span class="p">();</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="继承方法">继承方法</h3>
<ul>
<li>
<p>子类实例会自动继承父类的方法</p>
</li>
<li>
<p>在子类中调用父类方法：</p>
<ul>
<li>关键字：super.父类方法名()</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        class Father {
            say() {
                return &#39;我是爸爸&#39;
            }
        }
        class Son extends Father{
            say() {
                console.log(super.say()+&#39;的儿子&#39;); 
            }
        }
        var son = new Son();
        son.say();
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h3 id="扩展子类的方法">扩展子类的方法</h3>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>

            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">Father</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
                <span class="kr">super</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">sub</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">son</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nx">son</span><span class="p">.</span><span class="nx">sum</span><span class="p">();</span>
        <span class="nx">son</span><span class="p">.</span><span class="nx">sub</span><span class="p">();</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="构造函数和对象">构造函数和对象</h2>
<ol>
<li>
<p>利用构造函数创建对象，首字母要大写（之前还有利用new Object(), 字面量的方法创建对象）</p>
</li>
<li>
<p>通过this添加实例成员和实例方法</p>
</li>
<li>
<p>构造函数名.属性名 || 方法名，添加静态成员和静态方法</p>
<p>==注意==：静态成员和方法只能通过构造函数来访问</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">function</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span><span class="c1">//实例成员
</span><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">sing</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;我会唱歌&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
        <span class="nx">Star</span><span class="p">.</span><span class="nx">sex</span> <span class="o">=</span> <span class="s1">&#39;男&#39;</span><span class="p">;</span><span class="c1">//静态成员
</span><span class="c1"></span>        <span class="nx">Star</span><span class="p">.</span><span class="nx">dance</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;dance&#39;</span><span class="p">);</span>
        <span class="p">}</span><span class="c1">//静态方法
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Star</span><span class="p">.</span><span class="nx">sex</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="构造函数原型prototype原型对象">构造函数原型：prototype（原型对象）</h3>
<ul>
<li>
<p>构造函数通过原型分配的函数是所有对象所共享的</p>
</li>
<li>
<p>每一个构造函数都有一个prototype属性，这个属性就是一个对象，它所拥有的所有属性和方法，都会被构造函数所拥有，包函constructor指回构造函数，和proto属性指向父级的prototype</p>
</li>
<li>
<p>每一个实例对象也都有一个_proto_属性，也就是对象原型，指向构造函数的prototype</p>
<p>注意：一般公共的属性定义到构造函数里面，公共的方法放入原型对象中</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">function</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//Star.prototype被对象赋值覆盖了，所以没有了constructor属性
</span><span class="c1"></span>        <span class="nx">Star</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="o">:</span> <span class="nx">Star</span><span class="p">,</span><span class="c1">//重新将构造器指回构造函数
</span><span class="c1"></span>            <span class="nx">sing</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;我会唱歌&#39;</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="nx">movie</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;我演电影&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="对象原型_proto_">对象原型：<em>proto</em></h3>
<ul>
<li>每个实例对象都会有一个属性proto向构造函数的prototype，但最终又通过prototype里的constructor指回构造函数</li>
<li>每一个构造函数的prototype（原型对象）中也有一个proto属性，指向父级构造函数的prototype</li>
</ul>
<h3 id="方法查找规则">方法查找规则</h3>
<ol>
<li>先看实例对象身上有没有a方法</li>
<li>如果没有，通过proto指向去构造函数的prototype里找有没有</li>
<li>如果没有，通过prototype执向父级构造函数的prototype里找有没有，直到找到object为止</li>
</ol>
<p>注意：</p>
<ol>
<li>通过proto到prototype中找到的属性用person.hasOwnProperty()去查找属性返回false，通过in查找返回true</li>
<li>在打印对象时会自动掉用Object中的toString()方法，如果不想用Object中的方法，可以给对象添加toString()方法</li>
</ol>
<h3 id="constructor">constructor</h3>
<ul>
<li>
<p>proto中有一个constructor，最终通过prototype指回构造函数</p>
</li>
<li>
<p>prototype中有一个constructor，指回构造函数</p>
<p>注意：如果prototype被覆盖了，需要重新将constructor：构造函数名（重新指回构造函数）</p>
</li>
</ul>
<h3 id="原型链">原型链</h3>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java">        <span class="n">function</span> <span class="nf">Star</span><span class="o">(</span><span class="n">uname</span><span class="o">,</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">uname</span> <span class="o">=</span> <span class="n">uname</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//Star.prototype被对象赋值覆盖了，所以没有了constructor属性
</span><span class="c1"></span>        <span class="n">Star</span><span class="o">.</span><span class="na">prototype</span> <span class="o">=</span> <span class="o">{</span>
            <span class="n">constructor</span><span class="o">:</span> <span class="n">Star</span><span class="o">,</span>
            <span class="n">sing</span><span class="o">:</span> <span class="n">function</span> <span class="o">()</span> <span class="o">{</span>
                <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">&#39;</span><span class="n">我会唱歌</span><span class="err">&#39;</span><span class="o">);</span>
            <span class="o">},</span>
            <span class="n">movie</span><span class="o">:</span> <span class="n">function</span> <span class="o">()</span> <span class="o">{</span>
                <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="err">&#39;</span><span class="n">我演电影</span><span class="err">&#39;</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">var</span> <span class="n">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Star</span><span class="o">(</span><span class="err">&#39;</span><span class="n">刘德华</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">12</span><span class="o">);</span>
        <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Star</span><span class="o">.</span><span class="na">prototype</span><span class="o">);</span>
        <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Star</span><span class="o">.</span><span class="na">prototype</span><span class="o">.</span><span class="na">__proto__</span> <span class="o">===</span> <span class="n">Object</span><span class="o">.</span><span class="na">prototype</span><span class="o">);</span>
        <span class="n">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Object</span><span class="o">.</span><span class="na">prototype</span><span class="o">.</span><span class="na">__proto__</span><span class="o">);</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>
<p>Object是对象也是函数，Object.proto===Function.prototype，Object是Function的实例</p>
</li>
<li>
<p>function也是==Function(构造函数)==的实例 new Function()，Star.proto-&gt;Function.prototype</p>
</li>
<li>
<p>Function也是Function的实例，Function.proto = Function.prototype</p>
</li>
<li>
<p>Star.prototype.proto-&gt;Object.prototype</p>
</li>
<li>
<p>ldh.proto-&gt;Star.prototype,Star.prototype.proto-&gt;Object.prototype</p>
</li>
</ol>
<h3 id="成员查找机制">成员查找机制</h3>
<ol>
<li>当访问一个对象的属性（包括方法时），首先查找这个对象自身有没有该属性</li>
<li>如果没有就查找它的原型（也就是proto指向的prototype原型对象）</li>
<li>如果还没有就查找原型对象的原型</li>
<li>以此类推直到Object为止（null）</li>
<li>proto对象原型的意义就在于为对象成员查找机制提供一个方向路线</li>
</ol>
<h3 id="instance-of">instance of</h3>
<p></p>
<p>通俗一点来讲，<code>instanceof</code>的判断规则是：<strong><code>instanceof</code>会检查整个原型链，将沿着A的<code>__proto__</code>这条线来一直找，同时沿着B的<code>prototype</code>这条线来一直找，直到能找到同一个引用，即同一个对象，那么就返回<code>true</code>。如果找到终点还未重合，则返回<code>false</code></strong>。即上图中的 <code>f1</code>&ndash;&gt;<code>__proto__</code> 和 <code>Foo</code>&ndash;&gt;<code>prototype</code> 指向同一个对象，<code>console.log(f1 instanceof Foo)</code>为<code>true</code>。</p>
<h3 id="this指向">this指向</h3>
<ol>
<li>在构造函数中，里面的this指向的是实例对象</li>
<li>prototype中的this也指向实例对象，因为实例对象调用原型对象里面的方法</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">that</span><span class="p">;</span>

        <span class="kd">function</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//Star.prototype被对象赋值覆盖了，所以没有了constructor属性
</span><span class="c1"></span>        <span class="nx">Star</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">constructor</span><span class="o">:</span> <span class="nx">Star</span><span class="p">,</span>
            <span class="nx">sing</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;我会唱歌&#39;</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="nx">movie</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;我演电影&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span><span class="s1">&#39;12&#39;</span><span class="p">);</span>
        <span class="nx">ldh</span><span class="p">.</span><span class="nx">sing</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span> <span class="o">===</span> <span class="nx">ldh</span><span class="p">);</span><span class="c1">//true
</span><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Star</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="改变this指向">改变this指向</h2>
<h3 id="this指向的4种形式">this指向的4种形式</h3>
<ol>
<li>一般函数，this指向全局对象window</li>
<li>在严格模式下，为undefined</li>
<li>对象的方法里调用，this指向调用该方法的对象</li>
<li>构造函数里的this，指向创建出来的实例</li>
<li>箭头函数中this指向上下文</li>
</ol>
<h3 id="call">call</h3>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数：实参</li>
<li>使用时候会自动执行函数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//A.call( B,x,y )：就是把A的函数放到B中运行，x 和 y 是A方法的参数。
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{}</span>
<span class="kd">function</span> <span class="nx">fun</span><span class="p">(){}</span>
<span class="nx">fun</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>  
</code></pre></td></tr></table>
</div>
</div><h3 id="apply">apply</h3>
<ul>
<li>第一个参数：改变this指向，在函数运行时才会改变this指向</li>
<li>第二个参数：数组（里面为实参）</li>
<li>使用时候会自动执行函数</li>
<li>主要应用：Math.max.apply(Math,arr)//这里this的指向还是Math不过可以比较数组中的最大值</li>
</ul>
<p>==注意==：</p>
<ol>
<li>call和apply这两个方法都是函数对象的方法，需要通过函数对象来调用</li>
<li>调用call和apply会将一个对象指定为第一个参数，此时这个对象会称为函数执行时的this</li>
<li>call（obj,2,3）方法可以将实参在对象之后依次传递,apply需要将实参封装到数组中统一传递</li>
</ol>
<h3 id="bind">bind</h3>
<ul>
<li>第一个参数：改变this指向</li>
<li>第二个参数之后：实参</li>
<li>返回值为一个新的函数</li>
<li>使用的时候需要手动调用下返回 的新函数（==不会自动执行==）</li>
</ul>
<h2 id="原型继承">原型继承</h2>
<h3 id="继承属性-1">继承属性</h3>
<p>通过构造函数+原型对象模拟实现继承，称为组合继承</p>
<p><strong>原理</strong>：同call()把父类型的this改为子类型的this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//通过借用父构造函数来继承属性
</span><span class="c1"></span>        <span class="c1">//1。父构造函数
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">Father</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//this指向父构造函数的对象实例
</span><span class="c1"></span>            <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//2.子构造函数
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">Son</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//this指向子构造函数的对象实例，在Father执行时指定this值，这个this是子构造函数中的
</span><span class="c1"></span>            <span class="nx">Father</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ldh</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="继承方法-1">继承方法</h3>
<p>直接给构造函数添加的是静态方法，给构造函数的prototype添加的是实例方法</p>
<p><strong>原理</strong>：创建一个父类的实例，让子类的原型对象执向这个实例所在的内存空间，但是子类的prototype里的constructor被覆盖了，需要重新指向子类构造函数，这样就能通过父类实例的中的proto找到父类中的方法，且在子类中添加自己的私有方法也不会影响父类。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//通过借用父构造函数来继承属性
</span><span class="c1"></span>        <span class="c1">//1。父构造函数
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">Father</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//this指向父构造函数的对象实例
</span><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">Father</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">money</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">//2.子构造函数
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">Son</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//this指向子构造函数的对象实例
</span><span class="c1"></span>            <span class="nx">Father</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">//Son.prototype = Father.prototype;
</span><span class="c1"></span>        <span class="nx">Son</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Father</span><span class="p">();</span>
		<span class="nx">Son</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">Son</span>
        <span class="nx">Son</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">exam</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;孩子要考试&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// var zxy = new Father(&#39;张学友&#39;, 12)
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ldh</span><span class="p">);</span>
        <span class="c1">// console.log(zxy);
</span></code></pre></td></tr></table>
</div>
</div><h3 id="扩展内置对象">扩展内置对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">sum</span> <span class="o">+=</span> <span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr1</span><span class="p">.</span><span class="nx">sum</span><span class="p">());</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="web-workers">Web Workers</h2>
<ol>
<li>主线程才能操作dom，web workers可以将大计算量的代码另外开一个线程去计算，从而防止冻结用户界面</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;number&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;btn&#34;</span><span class="p">&gt;</span>计算<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#btn&#39;</span><span class="p">).</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#number&#39;</span><span class="p">).</span><span class="nx">value</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
            <span class="c1">//创建一个Worker对象
</span><span class="c1"></span>            <span class="kd">let</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span><span class="s1">&#39;worker.js&#39;</span><span class="p">)</span>
            <span class="c1">//接收worker传过来的数据函数
</span><span class="c1"></span>            <span class="nx">worker</span><span class="p">.</span><span class="nx">onmessage</span><span class="o">=</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="c1">//向worker发送消息
</span><span class="c1"></span>            <span class="nx">worker</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>

</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">postMessage</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">2</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">f</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="缺点">缺点</h3>
<ol>
<li>慢</li>
<li>不能跨域加载js</li>
<li>worker内代码不能访问DOM</li>
<li>浏览器兼容问题</li>
</ol>
<h2 id="函数">函数</h2>
<ol>
<li>函数也是一个对象</li>
<li>函数不会检查实参类型和数量，少了则为undefined，多了则忽略</li>
<li>return后的语句不会执行，return；后面不跟值相当于返回undefined，不写return也返回undefined。使用return结束整个函数</li>
<li>函数对象也可以return</li>
<li>实参会存到arguments（伪数组）中，函数中不定义形参也能使用，arguments有一个属性callee，是当前正在执行得函数对象</li>
</ol>
<h3 id="定义">定义</h3>
<ol>
<li>
<p>命名函数</p>
<p>function fn(){ }</p>
</li>
<li>
<p>匿名函数</p>
<p>var fun = function() {}</p>
</li>
<li>
<p>new Function(&lsquo;参数1&rsquo;，‘参数2’，‘函数体’)</p>
<p>var f = new Function(“xxxx	”);</p>
</li>
</ol>
<p>==注意==：所有函数都是Function的实例</p>
<p></p>
<h3 id="执行上下文栈">执行上下文栈</h3>
<ol>
<li>在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li>
<li>在全局执行上下文（window）确定后，将其添加到栈中</li>
<li>在函数执行上下文创建后，将其添加到栈中（压栈）</li>
<li>在当前函数执行完后，将栈顶的对象移除（出栈）</li>
<li>当所有的代码执行完后，栈中只剩下window</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//进入全局执行上下文
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
	<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">5</span>
	<span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//进入foo执行行下文
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
	<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">5</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="nx">y</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//进入bar函数执行上下文
</span><span class="c1"></span><span class="nx">bar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="调用方式和this指向">调用方式和this指向</h3>
<ul>
<li>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象，这个对象我们称为函数执行的上下文对象</li>
</ul>
<ol>
<li>
<p>普通函数</p>
<p>fn();//实际上是windows.fn()</p>
<p>this指向windows</p>
</li>
<li>
<p>对象的方法</p>
<p>obj.xxx();</p>
<p>this指向对象</p>
</li>
<li>
<p>构造函数里的方法</p>
<p>function xxx(){}</p>
<p>new xxx();</p>
<p>this指向实例，包括构造函数的prototype原型对象里的this也指向实例</p>
</li>
<li>
<p>事件函数</p>
<p>btn.onclick=function(){}</p>
<p>this执向调用者btn</p>
</li>
<li>
<p>定时器函数</p>
<p>setInterval(function(){},1000)//实际上是windows.setInterval</p>
<p>this指向window，只能用bind(this)改变this指向，因为call和apply是立即执行。</p>
</li>
<li>
<p>立即执行函数</p>
<p>(function(){})()或者(function (){} ())</p>
<p>this 指向windows</p>
</li>
</ol>
<h2 id="高阶函数">高阶函数</h2>
<p>它接收函数作为参数，将函数的返回值作为输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/** 
</span><span class="cm"> * 数值转换
</span><span class="cm"> * @param {Number} val 要被处理的数值
</span><span class="cm"> * @param {Function} fn 处理输入的val
</span><span class="cm"> * @return {Number || String}
</span><span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">toConvert</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">addUnitW</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;W&#39;</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">toConvert</span><span class="p">(</span><span class="mf">123.1</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">);</span> <span class="c1">// 124
</span><span class="c1"></span><span class="nx">toConvert</span><span class="p">(</span><span class="mf">123.1</span><span class="p">,</span> <span class="nx">addUnitW</span><span class="p">);</span> <span class="c1">// &#34;123.1W&#34;
</span></code></pre></td></tr></table>
</div>
</div><p>另外，JS的回调函数同样是以实参形式传入其他函数中，这也是高阶函数（在函数式编程中回调函数被称为 lambda表达式）:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="p">=&gt;</span> <span class="nx">d</span> <span class="o">**</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// [1, 4, 9, 16, 25]
</span><span class="c1"></span>
<span class="c1">// 以上，等同于：
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="nx">d</span> <span class="p">=&gt;</span> <span class="nx">d</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">square</span><span class="p">);</span> <span class="c1">// [1, 4, 9, 16, 25]
</span></code></pre></td></tr></table>
</div>
</div><h2 id="闭包">闭包</h2>
<h3 id="变量作用域">变量作用域</h3>
<ul>
<li>局部变量（函数作用域）
<ol>
<li>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</li>
<li>每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的</li>
<li>在函数作用域中可以访问全局变量，反之不行</li>
<li>当在函数作用域中操作一个变量时，有则直接使用。没有，则去上一级作用域中去寻找</li>
<li>定义形参就相当于var 定义变量</li>
</ol>
</li>
<li>全局变量（全局作用域）
<ol>
<li>在打开页面时创建，关闭页面时销毁</li>
<li>直接编写在script标签中的js代码，都在全局作用域</li>
<li>在函数中不用var定义的变量也在全局作用域中</li>
<li>全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用</li>
<li>创建的变量都变成window对象的属性，创建的函数都变成window对象的方法</li>
</ol>
</li>
<li>当函数执行完毕，本作用域内的局部变量就会自动销毁</li>
</ul>
<h3 id="闭包的产生">闭包的产生</h3>
<ol>
<li>当一个嵌套的内部函数引用了嵌套的外部函数的变量（函数），就产生了闭包</li>
<li>通过chrome的debug调试查看closure就是闭包</li>
</ol>
<h3 id="闭包的定义">闭包的定义</h3>
<p>指有权访问另一个函数作用域中变量的函数</p>
<h3 id="闭包的作用">闭包的作用</h3>
<p>在函数a执行完毕并返回后，闭包使得Js的垃圾回收机不会回收a所占用的资源，因为a的内部函数b需要依赖a中的变量，从而延伸了变量的作用范围(生命周期)。</p>
<h3 id="闭包的生命周期">闭包的生命周期</h3>
<p>产生：在嵌套内部函数定义执行完成时就产生了（不是在调用时）</p>
<p>死亡：在嵌套的内部函数成为垃圾对象时</p>
<h6 id="demo">demo</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="mf">1.</span><span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="k">return</span> <span class="kd">function</span> <span class="nx">fun</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">}</span>
        <span class="c1">//fn外面的作用域访问fn()内部的局部变量
</span><span class="c1"></span>        <span class="nx">fn</span><span class="p">()();</span><span class="c1">//10
</span><span class="c1"></span>

 <span class="mf">2.</span>      <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
            <span class="kd">function</span> <span class="nx">add</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">a</span><span class="o">++</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
            <span class="p">}</span>

            <span class="kd">function</span> <span class="nx">minus</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">a</span><span class="o">--</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="p">{</span><span class="nx">add</span><span class="p">,</span> <span class="nx">minus</span><span class="p">}</span>
        <span class="p">}</span>
<span class="c1">//没有触发闭包
</span><span class="c1"></span>        <span class="nx">fn</span><span class="p">().</span><span class="nx">add</span><span class="p">()</span><span class="c1">//3
</span><span class="c1"></span>        <span class="nx">fn</span><span class="p">().</span><span class="nx">minus</span><span class="p">()</span><span class="c1">//1
</span><span class="c1">//区别
</span><span class="c1"></span>        <span class="kd">let</span> <span class="nx">fn1</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">()</span> <span class="c1">//触发闭包
</span><span class="c1"></span>        <span class="nx">fn1</span><span class="p">.</span><span class="nx">add</span><span class="p">()</span><span class="c1">//3
</span><span class="c1"></span>        <span class="nx">fn1</span><span class="p">.</span><span class="nx">minus</span><span class="p">()</span><span class="c1">//2
</span><span class="c1"></span>    <span class="p">}</span>
     
     <span class="c1">//如果fn()写成var f = fn()
</span><span class="c1"></span>     <span class="c1">//那么再执行完后就不会释放闭包中的a，因为f变量指向fn()，return的函数中有对a的引用
</span><span class="c1"></span>     <span class="c1">//当f=null时，闭包死亡，因为包函闭包的函数对象成为垃圾对象
</span></code></pre></td></tr></table>
</div>
</div><h3 id="闭包的例子">闭包的例子</h3>
<h6 id="获取ul中li的索引号">获取ul中li的索引号</h6>
<ul>
<li>最初的方法</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="c1">//注意：这里lis是一个伪数组，循环中lis.length会计算多次，所以写成for(var i = 0 ,length=lis.length; i &lt; length ;i++)这样能加快运行效率
</span><span class="c1"></span>            <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
            <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">));</span>
            <span class="p">})</span>
        <span class="p">}</span><span class="c1">//在循环的同时给每个li添加自定义属性index，需要时再读取属性值
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>利用闭包</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//创建了4个立即执行函数
</span><span class="c1"></span>            <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">lis</span><span class="p">[</span><span class="nx">num</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
                <span class="p">}</span><span class="nx">func</span>
            <span class="p">})(</span><span class="nx">i</span><span class="p">)</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里面的闭包指的是匿名函数，通过(i)把值保存到了num中。每个点击事件都有一个局部变量num，num保存的是相应的i值。</p>
<ul>
<li>错误写法</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="p">})</span>
        <span class="p">}</span><span class="c1">//无论点击哪个li都输出4
</span></code></pre></td></tr></table>
</div>
</div><p>每个li标签的onclick事件执行时，本身onclick绑定的function的作用域中没有变量i，i为undefined,则解析引擎会寻找父级作用域，发现父级作用域中有i，且for循环绑定事件结束后，i已经赋值为4，所以每个li标签的onclick事件执行时，log的都是父作用域中的i，也就是4。</p>
<h6 id="经典例子">经典例子</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
            <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">n</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">num</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">fn</span><span class="p">()();</span><span class="c1">// 1 4
</span><span class="c1"></span>        <span class="nx">fn</span><span class="p">()();</span><span class="c1">//1 4
</span><span class="c1"></span>        
        <span class="kd">var</span> <span class="nx">f1</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">();</span>
        <span class="nx">f1</span><span class="p">();</span><span class="c1">//1 4
</span><span class="c1"></span>        <span class="nx">f1</span><span class="p">();</span><span class="c1">//1 5
</span><span class="c1"></span>
        
</code></pre></td></tr></table>
</div>
</div><p>直接调用fn函数，此时fn执行完后，就连同它的变量num一同销毁，但是如果将fn的返回值赋给f1，这时候相当于f1=function(){var n = 0};并且匿名函数内部引用这fn里面的变量num，所以变量num无法被销毁，而变量n在调用完后会销毁，在每次调用时新建，于是最后只剩下num，所以再次调用时num是在4的基础上+1。</p>
<h3 id="定时器中的闭包函数">定时器中的闭包函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">		<span class="c1">//3秒后同时打印所有li元素的内容
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lis</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">innerHTML</span><span class="p">);</span>
                <span class="p">},</span> <span class="mi">3000</span><span class="p">)</span>
            <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
        <span class="p">}</span>
        
        <span class="c1">//每隔3秒打印一个li元素的内容
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.nav&#39;</span><span class="p">).</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lis</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">innerHTML</span><span class="p">);</span>
                <span class="p">},</span> <span class="nx">a</span><span class="o">*</span><span class="mi">3000</span><span class="p">)</span>
            <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="闭包的应用定义js模块">闭包的应用：定义js模块</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;myModule.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
   <span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">myModule</span><span class="p">()</span> <span class="c1">//使用第一种必须要先执行函数
</span><span class="c1"></span>    <span class="nx">fn</span><span class="p">.</span><span class="nx">doSomething</span><span class="p">()</span>
    <span class="nx">myModule2</span><span class="p">.</span><span class="nx">doSomething</span><span class="p">()</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">myModule</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;my msg&#39;</span>

    <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">doSomething2</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mag</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">doSomething</span><span class="p">,</span>
        <span class="nx">doSomething2</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//如果是匿名函数的自调用，则暴露在window对象中
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="nx">myModule2</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;my msg&#39;</span>

    <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">doSomething2</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mag</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="nb">window</span><span class="p">.</span><span class="nx">myModule2</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">doSomething</span><span class="p">,</span>
        <span class="nx">doSomething2</span>
    <span class="p">}</span>
<span class="p">})()</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="闭包的缺点">闭包的缺点</h3>
<p>因为闭包会使得Js的垃圾回收机不会回收占用的资源，滥用闭包会造成内存泄露，所以在必要时，我们要及时释放这个闭包函数</p>
<h3 id="内存溢出与内存泄漏">内存溢出与内存泄漏</h3>
<p>内存溢出：栈溢出，堆溢出</p>
<p>内存泄露：内存泄漏积累多了就容易导致内存溢出</p>
<p>常见的内存泄漏：</p>
<ol>
<li>意外的全局变量</li>
<li>没有及时清理的计时器或回调函数</li>
<li>闭包</li>
</ol>
<h3 id="let的出现">Let的出现</h3>
<p>将上面的错误写法中的var改为let，let会产生块级作用域</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="p">})</span>
        <span class="p">}</span><span class="c1">//点击li输出相应的索引
</span></code></pre></td></tr></table>
</div>
</div><h2 id="递归">递归</h2>
<p>函数内部自己调用自己，作用和循环一样</p>
<p>注意：防止发生栈溢出，所以要加退出条件return</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[{</span>
            <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="nx">gname</span><span class="o">:</span> <span class="s1">&#39;家电&#39;</span><span class="p">,</span>
            <span class="nx">goods</span><span class="o">:</span> <span class="p">[{</span>
                <span class="nx">id</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span>
                <span class="nx">gname</span><span class="o">:</span> <span class="s1">&#39;冰箱&#39;</span><span class="p">,</span>
                <span class="nx">niubi</span><span class="o">:</span> <span class="p">[{</span>
                    <span class="nx">id</span><span class="o">:</span> <span class="mi">111</span><span class="p">,</span>
                    <span class="nx">gname</span><span class="o">:</span> <span class="s1">&#39;haha&#39;</span>
                <span class="p">}]</span>
            <span class="p">},</span> <span class="p">{</span>
                <span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span>
                <span class="nx">ganme</span><span class="o">:</span> <span class="s1">&#39;洗衣机&#39;</span>
            <span class="p">}]</span>
        <span class="p">},</span> <span class="p">{</span>
            <span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
            <span class="nx">gname</span><span class="o">:</span> <span class="s1">&#39;服饰&#39;</span>
        <span class="p">}]</span>
        <span class="c1">//输入id号返回数据对象
</span><span class="c1"></span>        <span class="c1">// 1.利用foreach遍历
</span><span class="c1"></span>        <span class="kd">function</span> <span class="nx">getid</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
            <span class="nx">json</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// console.log(value);
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// console.log(value);
</span><span class="c1"></span>                    <span class="nx">o</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
                    <span class="c1">// 2.想要得到里层的数据 11 12
</span><span class="c1"></span>                    <span class="c1">//里面应该有goods数组，且长度不为0
</span><span class="c1"></span>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">goods</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">goods</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">o</span> <span class="o">=</span> <span class="nx">getid</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">goods</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">niubi</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">niubi</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">o</span> <span class="o">=</span> <span class="nx">getid</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">niubi</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
        <span class="p">};</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getid</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getid</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getid</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="mi">12</span><span class="p">));</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getid</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="mi">111</span><span class="p">));</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="浅拷贝和深拷贝">浅拷贝和深拷贝</h2>
<ul>
<li>
<p>浅拷贝只是拷贝一层，更深层次的对象级别的只拷贝引用（修改数据会修改原来的）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span>
       <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zs&#39;</span><span class="p">,</span>
       <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
       <span class="nx">sex</span><span class="o">:</span> <span class="s1">&#39;男&#39;</span><span class="p">,</span>
       <span class="nx">dog</span><span class="o">:</span> <span class="p">{</span>
         <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;金毛&#39;</span><span class="p">,</span>
         <span class="nx">age</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
         <span class="nx">yellow</span><span class="o">:</span> <span class="s1">&#39;黄色&#39;</span>
       <span class="p">}</span>
     <span class="p">}</span>

     <span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{};</span>

<span class="kd">function</span> <span class="nx">copy</span><span class="p">(</span><span class="nx">o1</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">o1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">o2</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">o1</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">copy</span><span class="p">(</span><span class="nx">obj1</span><span class="p">,</span> <span class="nx">obj2</span><span class="p">);</span>

    <span class="c1">// 修改obj1中的成员
</span><span class="c1"></span>    <span class="nx">obj1</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;xxxx&#39;</span><span class="p">;</span>
    <span class="nx">obj1</span><span class="p">.</span><span class="nx">dog</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;大黄&#39;</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span>
<span class="c1">// name 属性深拷贝,不改变;dog对象浅拷贝, dog.name 随之发生改变
</span></code></pre></td></tr></table>
</div>
</div><p>ES6语法糖：Object.assign(new,old)</p>
</li>
<li>
<p>深拷贝拷贝多层，每一级的数据都会拷贝</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 定义一个深拷贝函数  接收目标target参数
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 定义一个变量
</span><span class="c1"></span>    <span class="kd">let</span> <span class="nx">result</span><span class="p">;</span>
    <span class="c1">// 如果当前需要深拷贝的是一个对象的话
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 如果是一个数组的话
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 将result赋值为一个数组，并且执行遍历
</span><span class="c1"></span>            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// 递归克隆数组中的每一项
</span><span class="c1"></span>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deepClone</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
            <span class="p">}</span>
         <span class="c1">// 判断如果当前的值是null的话；直接赋值为null
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">target</span><span class="o">===</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
         <span class="c1">// 判断如果当前的值是一个RegExp对象的话，直接赋值    
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">constructor</span><span class="o">===</span><span class="nb">RegExp</span><span class="p">){</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
         <span class="c1">// 否则是普通对象，直接for in循环，递归赋值对象的所有值
</span><span class="c1"></span>            <span class="nx">result</span> <span class="o">=</span> <span class="p">{};</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">deepClone</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
     <span class="c1">// 如果不是对象的话，就是基本数据类型，那么直接赋值
</span><span class="c1"></span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">result</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
  <span class="p">}</span>
     <span class="c1">// 返回最终结果
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==:先判断数组再判断对象，因为数组也属于对象，如果对象中没有function和RegExp且为json对象可以先用</p>
<p>JSON.stringify转为字符串再用JSON.parse转为新的对象</p>
</li>
</ul>
<h2 id="正则">正则</h2>
<h3 id="创建">创建</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&#34;正则表达式&#34;</span><span class="err">，</span><span class="s2">&#34;匹配模式&#34;</span><span class="p">);</span>
<span class="c1">//正则表达式为字符串，匹配模式包括i（忽略大小写），g（全局匹配模式）
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/ /i</span><span class="p">;</span>
<span class="c1">//字面量创建
</span></code></pre></td></tr></table>
</div>
</div><h3 id="检测">检测</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">regexp</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
<span class="c1">//返回布尔值
</span></code></pre></td></tr></table>
</div>
</div><h3 id="特殊字符">特殊字符</h3>
<h4 id="边界符">边界符</h4>
<ul>
<li>
<p>^：行首文本以谁开始</p>
</li>
<li>
<p>&amp;：行尾文本以谁结束</p>
</li>
<li>
<p>\bxxx\b：表示单词边界</p>
<p>/^abc$/</p>
</li>
</ul>
<h4 id="字符类">字符类</h4>
<ul>
<li>
<p><i class="far fa-square fa-fw"></i> ：中括号里的内容是或的关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sr">/[abc]/</span>
<span class="nx">表示包含有a或b或c的一个或多个</span>
<span class="sr">/^[abc]$/</span>
<span class="nx">表示有且仅有其中一个</span>
<span class="sr">/[^abc]/</span>
<span class="nx">除了中括号里的</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="量词符">量词符</h4>
<p>用于设定每个模式出现的次数</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>重复0次或更多次，相当于{0，}</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次，相当于{1，}</td>
</tr>
<tr>
<td>？</td>
<td>重复0次或一次，相当于{0，1}</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n次到m次（中间无空格）</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sr">/^a*$/</span>
<span class="sr">/^a{3,8}$/</span>
<span class="sr">/^abc{3}$/</span>
<span class="sr">/^[abc]{3}$/</span>     <span class="c1">//[]内的单个内容可以重复三次
</span><span class="c1"></span><span class="sr">/^(abc){3}$/</span>     <span class="c1">//()内的重复三次
</span></code></pre></td></tr></table>
</div>
</div><h3 id="正则中的预定义类">正则中的预定义类</h3>
<table>
<thead>
<tr>
<th>预定义类</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>匹配0-9之间的任一数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配0-9以外的字符，相当于/[^0-9]/</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任意的字母，数字和下划线，相当于/[A-Za-z0-9_]/</td>
</tr>
<tr>
<td>\W</td>
<td>除了所有字母，数字和下划线以外的字符，相当于/[^A-Za-z0-9_]/</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格（包括换行符，制表符，空格符等），相当于[\t\r\n\v\f]，去除开头和结尾空格/^\s*|\s*$/ g</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空格的字符，相当于/[^\t\r\n\v\f]/</td>
</tr>
</tbody>
</table>
<h3 id="正则中的替换">正则中的替换</h3>
<ul>
<li>
<p>replace(//,'')只替换第一个，加上/g全局替换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/激情|gay/g</span><span class="p">,</span> <span class="s1">&#39;**&#39;</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="修饰符">修饰符</h3>
<ul>
<li>/g：全局匹配</li>
<li>/i：忽略大小写</li>
<li>/gi：全局匹配且忽略大小写</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>[ ]</td>
<td>中括号里的内容是或的关系</td>
</tr>
<tr>
<td>[ab]</td>
<td>a|b</td>
</tr>
<tr>
<td>[a-z]</td>
<td>任意小写字母</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>任意大写字母</td>
</tr>
<tr>
<td>[A-z]</td>
<td>任意字母</td>
</tr>
<tr>
<td>/a[bde]c/</td>
<td>检测一个字符串中是否含有abc或adc或aec</td>
</tr>
<tr>
<td>/[^]/</td>
<td>除了中括号里的都行</td>
</tr>
</tbody>
</table>
<h1 id="es5">ES5</h1>
<h2 id="严格模式">严格模式</h2>
<p>为脚本开启‘use strict’写在script标签第一行</p>
<p>为函数开启写在函数体第一行</p>
<h3 id="特点">特点</h3>
<ol>
<li>
<p>变量必须先声名</p>
<p>==区别：==标准模式中</p>
<p>​			a=2||this.a=2是给window对象的一个属性，可以用delete删除</p>
<p>​			var a=2也是给window对象一个属性，但是不能用delete删除</p>
</li>
<li>
<p>全局作用域中this是undefined，而不是windows对象</p>
</li>
<li>
<p>构造函数不加new调用（不创建实例）的话会报错，因为严格模式中this为undefined，要new之后this才有指向的实例对象，标准模式中构造函数没有实例对象，它的this也是指向window对象的</p>
<p>==注意：==定时器的this还是指向window</p>
</li>
<li>
<p>参数不能同名</p>
</li>
</ol>
<h2 id="json对象">JSON对象</h2>
<p>写法：</p>
<ul>
<li>只能用双引号</li>
<li>所有名字都必须用双引号包起来</li>
</ul>
<h4 id="json对象转json字符串">JSON对象转JSON字符串</h4>
<p>JSON.stringify(json)</p>
<h4 id="json字符串转json对象">JSON字符串转JSON对象</h4>
<p>JSON.parse(json)</p>
<h4 id="json的简写">JSON的简写</h4>
<p>名字和值一样时保留一样即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span>
<span class="c1">//相当于
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>json中方法的简写</p>
<p>ES6中可以和面向对象中的方法一样把function删除</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span>
 <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;xqz&#34;</span><span class="p">,</span>
 <span class="nx">show</span><span class="p">(){</span>
     <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
 <span class="p">}</span>
<span class="p">}</span>
<span class="c1">//相当于
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;xqz&#34;</span><span class="p">,</span>
	<span class="nx">show</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="object扩展">Object扩展</h2>
<p>常用的三个静态方法</p>
<h3 id="objectcreateprototypedescriptors">Object.create(prototype,[descriptors])</h3>
<p>作用：</p>
<ol>
<li>
<p>以指定对象为原型创建新的对象（通过__proto__可以找到）</p>
</li>
<li>
<p>为新的对象指定新的属性，并对属性进行描述</p>
<p>value：指定值</p>
<p>writable：标识当前属性值是否可以修改，默认为false</p>
<p>configurable:标识当前属性是否可以被删除，默认为false</p>
<p>enumberable:标识当前属性是否能用for in 枚举 默认为 false</p>
</li>
</ol>
<p></p>
<h3 id="objectdefineproperty">Object.defineProperty()</h3>
<ul>
<li>定义对象中新属性或修改原有的属性</li>
<li>obj：目标对象</li>
<li>prop：要增加或修改的属性名字</li>
<li>descriptor：增加或修改的属性所持有的特性
<ol>
<li>value：设置属性的值，默认为undefined</li>
<li>writable：值是否可以重写，默认为false，遍历时就无法遍历出来</li>
<li>enumerable：目标属性是否可以被枚举，默认为false也遍历不出来</li>
<li>configurable：目标属性是否可以别删除或者再次修改特性，默认false</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;num&#39;</span><span class="p">,</span> <span class="p">{</span>
            <span class="nx">value</span><span class="o">:</span> <span class="mi">20000</span><span class="p">,</span>
            <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="nx">configurable</span><span class="o">:</span> <span class="kc">false</span>
        <span class="p">})</span>
        <span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">num</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="objectdefinepropertiesobjectdescriptors">Object.defineProperties(object,descriptors)</h3>
<p>作用：</p>
<ol>
<li>为指定对象定义扩展多个属性</li>
<li>get：用来获取当前属性值的回调函数</li>
<li>set：用来修改当前属性值的触发回调函数，并且实参即为修改后的值</li>
<li>存取器属性：setter，getter一个用来存，一个用来取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">firstName</span><span class="o">:</span><span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="nx">lastName</span><span class="o">:</span><span class="s1">&#39;qz&#39;</span><span class="p">}</span>
        <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">obj</span><span class="p">,{</span>
            <span class="nx">fullName</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">get</span><span class="o">:</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="c1">//获取属性时自动调用get方法
</span><span class="c1"></span>                <span class="p">},</span>
                <span class="nx">set</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span><span class="c1">//设置属性时自动调用set方法
</span><span class="c1"></span>                    <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="o">=</span><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="o">=</span><span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">fullName</span><span class="p">)</span>
        <span class="nx">obj</span><span class="p">.</span><span class="nx">fullName</span><span class="o">=</span><span class="s1">&#39;w,xx&#39;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">fullName</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>对象本身的两个方法</p>
<p>get propertyName(){}</p>
<p>set propertyName(){}</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">let</span> <span class="nx">obj2</span><span class="o">=</span><span class="p">{</span>
            <span class="nx">firstName</span><span class="o">:</span><span class="s1">&#39;x&#39;</span><span class="p">,</span>
            <span class="nx">lastName</span><span class="o">:</span><span class="s1">&#39;qz&#39;</span><span class="p">,</span>
            <span class="nx">get</span> <span class="nx">fullName</span><span class="p">(){</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span>
            <span class="p">},</span>
            <span class="nx">set</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
                <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">)</span>
        <span class="nx">obj2</span><span class="p">.</span><span class="nx">fullName</span><span class="o">=</span><span class="s1">&#39;w xx&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="array扩展">Array扩展</h2>
<h3 id="indexof">indexOf</h3>
<p>Array.prototype.indexOf(value)          得到值在数组中的第一个下标</p>
<h3 id="lastindexof">lastIndexOf</h3>
<p>Array.prototype.lastIndexOf(value)           得到值在数组中的最后一个下标</p>
<h3 id="foreach">forEach</h3>
<p>Array.prototype.forEach(function(item,index){})          遍历数组</p>
<ol>
<li>array.forEach(function(currentValue,index,arr)) 遍历每个元素，将每个元素的返回值给回调函数</li>
<li>数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以来定义形参来读取这些内容</li>
<li>浏览器会在回调函数中传递三个参数</li>
</ol>
<ul>
<li>currentValue：数组当前项的值</li>
<li>index：数组当前项的索引</li>
<li>arr：数组对象本身</li>
</ul>
<p>==<strong>注意</strong>==：如果return false会阻止函数继续向下执行，但不会结束遍历，会继续遍历下一个元素，无返回值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;pink&#39;</span><span class="p">];</span>
        <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">==</span> <span class="s1">&#39;green&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;找到&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>           
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>Array.prototype.map(function(item,index){})           遍历数组返回一个新数组，返回加工后的值</p>
<h3 id="map">map</h3>
<p>映射，给多少处理完后还多少</p>
<p>map() 方法==返回一个新数组==，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">];</span>
<span class="kr">const</span> <span class="nx">map1</span> <span class="o">=</span> <span class="nx">array1</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">*</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map1</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="filter">filter</h3>
<p>Array.prototype.filter(function(item,index){})           遍历过滤出一个新的子数组，返回条件为true的值</p>
<ol>
<li>array.filter(function(currentValue,index,arr))会==返回一个新的数组==，新数组中是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</li>
<li>通过return true或false来决定保留不保留</li>
</ol>
<p><strong>注意</strong>：直接返回新数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">23</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">545</span><span class="p">,</span> <span class="mi">52</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="p">;</span>
        <span class="p">})</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">);</span><span class="c1">//[23,545,52]
</span></code></pre></td></tr></table>
</div>
</div><h3 id="some">some</h3>
<p>array.some(function(currentValue,index,arr))用于查找数组中是否有满足条件的元素</p>
<p>==<strong>注意</strong>==：</p>
<ul>
<li>返回的是布尔值，找到返回true且找到后不会再继续执行，找不到返回false。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">435</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4524</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">245</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">52</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">value</span> <span class="o">&gt;=</span> <span class="mi">20</span><span class="p">;</span>
        <span class="p">});</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr1</span><span class="p">);</span><span class="c1">//true
</span></code></pre></td></tr></table>
</div>
</div><p><strong>区别</strong>：foreach和filter不会终止迭代，some检测到符合要求的元素后会停止，且返回值三者不同</p>
<h3 id="reduce参数一参数二">reduce（参数一，参数二）</h3>
<p>参数一是回调函数</p>
<p>参数二是tmp的默认值，0</p>
<p>进去一堆，出来一个</p>
<ol>
<li>tmp为中间结果，是函数返回的结果，当遍历到数组最后一个元素是=0时，函数的返回值则为最终结果</li>
<li>item为数组中的每一项</li>
<li>index为数组索引</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">fucntion</span><span class="p">(</span><span class="nx">tmp</span><span class="p">,</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">){</span>
     <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span>
   	 	<span class="k">return</span> <span class="nx">tmp</span><span class="o">*</span><span class="nx">item</span><span class="p">;</span><span class="c1">//求和
</span><span class="c1"></span>	<span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="nx">tmp</span><span class="o">*</span><span class="nx">item</span><span class="o">/</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="c1">//最后一次求平均数
</span><span class="c1"></span>    <span class="p">}</span>	
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="function扩展">Function扩展</h2>
<p>Function.prototype.bind()</p>
<p></p>
<h1 id="es6">ES6</h1>
<h3 id="let">let</h3>
<ol>
<li>
<p>产生块级作用域</p>
</li>
<li>
<p>for循环中防止i变成全局变量</p>
</li>
<li>
<p>let无变量提升（js预解析会把var和function（）{}提到最前面）</p>
</li>
<li>
<p>暂时性死区</p>
</li>
<li>
<p>不能重复声明相同的变量名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">tmp</span> <span class="o">=</span> <span class="s1">&#39;avd&#39;</span><span class="p">;</span>
                <span class="c1">// let tmp;如果在if中需要用一样的变量名，用let声名
</span><span class="c1"></span>            <span class="p">}</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]();</span>
        <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]();</span>
        <span class="c1">//每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己的上一级（循环产生的块级作用域）作用域下的i值
</span><span class="c1"></span>    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="const">const</h3>
<ol>
<li>
<p>用来声名常量，值无法更改</p>
</li>
<li>
<p>也具有块级作用域，不存在变量提升</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
                <span class="kr">const</span> <span class="nx">a</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>必须赋初始值</p>
</li>
<li>
<p>赋值后的内存地址不能修改，但是复杂数据类型内的值可以改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">;</span><span class="c1">//这里没有修改内存地址，所以是可以修改的
</span><span class="c1"></span><span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">100</span><span class="p">];</span><span class="c1">//这里修改了内存地址，所以是无法修改的
</span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="解构赋值">解构赋值</h3>
<p>如果解构后无值则为undefined</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="c1">//数组解构
</span><span class="c1"></span>        <span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;xuqianzhou&#39;</span><span class="p">,</span>
            <span class="nx">age</span><span class="o">:</span> <span class="mi">13</span>
        <span class="p">};</span>

        <span class="kd">let</span> <span class="p">{</span>
            <span class="nx">name</span><span class="p">,</span>
            <span class="nx">age</span>
        <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="箭头函数">箭头函数</h3>
<ul>
<li>
<p>不能使用argunments来获取参数</p>
</li>
<li>
<p>函数体只有一句可以省略大括号</p>
</li>
<li>
<p>只有一个参数可以省略括号</p>
</li>
<li>
<p>箭头函数不绑定this关键字，箭头函数中的this指向的是函数定义位置上下文的this（所处的对象）</p>
<ol>
<li>如果箭头函数外层有函数，箭头函数的this和外层函数的this一摸一样</li>
<li>如果外层没有函数，指向window</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
        <span class="kr">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>

        <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;zhangsan&#39;</span>
        <span class="p">}</span>

        <span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="c1">//这里两个this相同
</span><span class="c1"></span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kr">const</span> <span class="nx">fun</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
        <span class="nx">fun</span><span class="p">();</span>
    <span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>注意：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
            <span class="nx">say</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="c1">//这里的this指向window
</span><span class="c1"></span>                <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">obj</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="形参默认值">形参默认值</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">show</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">10</span><span class="p">){</span>
<span class="c1">//当不传b的值，默认为5
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="三点运算符">三点运算符</h3>
<ul>
<li>
<p>将不定数量的参数表示为一个数组，只能放在最后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">      <span class="kr">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="p">...</span><span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
            <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">item</span> <span class="p">=&gt;</span> <span class="nx">total</span> <span class="o">+=</span> <span class="nx">item</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">total</span><span class="p">;</span><span class="c1">//50
</span><span class="c1"></span>        <span class="p">};</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>可以配合解构使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">obj</span><span class="o">=</span><span class="p">{</span><span class="nx">xxx</span><span class="p">,</span><span class="nx">xxx</span><span class="p">,</span><span class="nx">xxx</span><span class="p">};</span>
<span class="kd">let</span> <span class="p">{</span><span class="nx">s1</span><span class="p">,...</span><span class="nx">s2</span><span class="p">}</span><span class="o">=</span><span class="nx">obj</span><span class="p">;</span><span class="c1">//s1是obj对象中的第一个数据，剩下的在s2数组中
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p></p>
<h3 id="json-1">JSON</h3>
<p>写法：</p>
<ul>
<li>只能用双引号</li>
<li>所有名字都必须用双引号包起来</li>
</ul>
<h4 id="json对象转json字符串-1">JSON对象转JSON字符串</h4>
<p>JSON.stringify(json)</p>
<h4 id="json字符串转json对象-1">JSON字符串转JSON对象</h4>
<p>JSON.parse(json)</p>
<h4 id="json的简写-1">JSON的简写</h4>
<p>名字和值一样时保留一样即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span>
<span class="c1">//相当于
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>json中方法的简写</p>
<p>ES6中可以和面向对象中的方法一样把function删除</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span>
 <span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;xqz&#34;</span><span class="p">,</span>
 <span class="nx">show</span><span class="p">(){</span>
     <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
 <span class="p">}</span>
<span class="p">}</span>
<span class="c1">//相当于
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s2">&#34;name&#34;</span><span class="o">:</span><span class="s2">&#34;xqz&#34;</span><span class="p">,</span>
	<span class="nx">show</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="array的扩展方法">Array的扩展方法</h3>
<h4 id="扩展运算符">扩展运算符</h4>
<p>将数组或对象转为用逗号分隔的参数序列，其实就是和剩余参数一个相反的过程，这里用逗号拆开，剩余参数是合并为一个数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">log</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span><span class="c1">//1 2 3(逗号被log当作参数分隔符)
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>可以用于合并数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">arr2</span><span class="o">=</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">arr3</span><span class="o">=</span><span class="p">[...</span><span class="nx">arr1</span><span class="p">,...</span><span class="nx">arr2</span><span class="p">];</span>
<span class="c1">//或者
</span><span class="c1"></span><span class="nx">arr1</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">arr2</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>可以将伪数组转为真正的数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//方法一：
</span><span class="c1"></span><span class="nx">arr2</span><span class="o">=</span><span class="p">[...</span><span class="nx">arr1</span><span class="p">];</span><span class="c1">//arr1是伪数组；
</span><span class="c1">//方法二：
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">arr2</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">form</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span><span class="nx">item</span><span class="p">=&gt;</span><span class="nx">item</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="c1">//将arr1伪数组转为真正的数组，并且每个数组元素加1
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="arrayform">Array.form()</h4>
<p>将伪数组转为数组且对元素进行加工</p>
<h4 id="arrayfind">Array.find()</h4>
<p>用于找出第一个符合条件的数组成员，返回对象，如果没有找到则返回==undefined==</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span><span class="p">[{</span>
<span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
<span class="nx">name</span><span class="o">:</span><span class="s1">&#39;张三&#39;</span>
<span class="p">},{</span>
<span class="nx">id</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span>
<span class="nx">name</span><span class="o">:</span><span class="s1">&#39;李四&#39;</span>
<span class="p">}]</span><span class="err">；</span>
<span class="kd">let</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">)=&gt;</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="o">==</span><span class="mi">2</span><span class="p">);</span><span class="c1">//函数用于返回查找的条件
</span></code></pre></td></tr></table>
</div>
</div><h4 id="arrayfindindex">Array.findindex()</h4>
<p>用于找出第一个符合条件的数组成员的==位置==，如果没有返回==-1==</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">15</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">index</span><span class="o">=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">findindex</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span><span class="nx">index</span><span class="p">)=&gt;</span><span class="nx">value</span><span class="o">&gt;</span><span class="mi">9</span><span class="p">);</span><span class="c1">//函数用于返回查找的条件
</span><span class="c1"></span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span><span class="c1">//2
</span></code></pre></td></tr></table>
</div>
</div><h3 id="string的扩展方法">String的扩展方法</h3>
<h4 id="模板字符串">模板字符串</h4>
<ul>
<li>
<p>可以解析变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sb">`hello,my name is</span><span class="si">${</span><span class="nx">变量名</span><span class="si">}</span><span class="sb">`</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>可以换行</p>
</li>
<li>
<p>可以调用函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">sayhello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
<span class="k">return</span><span class="p">....;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">agree</span> <span class="o">=</span> <span class="sb">`hello,my name is </span><span class="si">${</span><span class="nx">sayhello</span><span class="p">()</span><span class="si">}</span><span class="sb">`</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="includes">includes()</h4>
<p>判断是否包含指定的字符串</p>
<h4 id="startswith">startsWith()</h4>
<h4 id="startswith-1">startsWith()</h4>
<p>是否以某字符开头，返回布尔值</p>
<p>startsWith(&lsquo;Hello&rsquo;)</p>
<h4 id="endswith">endsWith()</h4>
<p>是否以某字符结尾，返回布尔值</p>
<p>endsWith('!')</p>
<h4 id="repeat">repeat()</h4>
<p>将原字符重复n次，返回一个新的字符串</p>
<p>str.repeat(3);</p>
<h4 id="trim">trim()</h4>
<p>删除字符串两边的空格，不影响原字符串，==返回一个新的字符串==（防止用户输入空格）</p>
<h3 id="number的扩展方法">Number的扩展方法</h3>
<p>二进制与八进制数值表示法：二进制0b，八进制0o</p>
<h4 id="isfinite">isFinite()</h4>
<p>判断是否是有限大的数</p>
<h4 id="isnan">isNaN()</h4>
<p>判断是否是NaN</p>
<h4 id="isinteger">isInteger()</h4>
<p>判断是否是整数</p>
<h4 id="parseint">parseInt()</h4>
<p>判断是否是整数</p>
<h4 id="trunc">trunc()</h4>
<p>将字符串转换为对应的数值</p>
<h3 id="object的扩展方法">Object的扩展方法</h3>
<ol>
<li>
<h4 id="objectisv1v2">Object.is(v1,v2)</h4>
</li>
</ol>
<p>判断2个数据是否相等</p>
<ol>
<li>
<h4 id="objectassigntargetsource1source2">Object.assign(target,source1,source2..)</h4>
<p>将源对象的属性赋值到目标对象上，如果没有则使用原来的默认值</p>
</li>
<li>
<h4 id="直接操作_proto_属性">直接操作_proto_属性</h4>
<p>let obj2 = {}</p>
<p>obj2.<em>proto</em> = obj1</p>
</li>
<li>
<h4 id="objectkeys">Object.keys()</h4>
</li>
</ol>
<ul>
<li>
<p>用于获取对象自身所有的属性</p>
</li>
<li>
<p>返回由属性名组成的数组</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
            <span class="nx">pname</span><span class="o">:</span> <span class="s1">&#39;小米&#39;</span><span class="p">,</span>
            <span class="nx">price</span><span class="o">:</span> <span class="mi">1999</span><span class="p">,</span>
            <span class="nx">num</span><span class="o">:</span> <span class="mi">2000</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="promise">Promise</h3>
<p>作用：将异步操作写成同步代码，避免了回调地狱</p>
<p>promise对象的3个状态</p>
<ol>
<li>pending：初始化状态</li>
<li>fullfilled：成功状态</li>
<li>rejected：失败状态</li>
</ol>
<p>过程：</p>
<ol>
<li>首先new promise对象</li>
<li>在异步代码执行成功时，调用resolve()方法，改变对象状态，传的参数在promise实例的then方法中的第一个函数中获取</li>
<li>异步代码执行失败时，调用reject()方法，改变对象状态，传的参数在promise实例的then方法中的第二个函数中获取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)=&gt;{</span>
    <span class="c1">//初始化promise状态：pending：初始化
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;111&#39;</span><span class="p">)</span>
    <span class="c1">//执行异步操作，通常是发送ajax请求，开启定时器
</span><span class="c1"></span>    <span class="nx">setTimeout</span><span class="p">(()=&gt;{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">333</span><span class="p">)</span>
        <span class="c1">//根据异步任务的返回结果去修改promise的状态
</span><span class="c1"></span>        <span class="c1">//异步任务执行成功
</span><span class="c1"></span>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="c1">//修改promise的状态为 fullfilled：成功的状态
</span><span class="c1"></span>
        <span class="c1">//异步任务执行失败
</span><span class="c1"></span>        <span class="c1">// reject(err)   //修改promise的状态为 rejected：失败的状态
</span><span class="c1"></span>    <span class="p">},</span><span class="mi">2000</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)=&gt;{</span>
    <span class="c1">//成功的回调
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;成功&#39;</span><span class="p">)</span>
<span class="p">},(</span><span class="nx">err</span><span class="p">)=&gt;{</span>
    <span class="c1">//失败的回调
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;失败&#39;</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="symbol">symbol</h3>
<p></p>
<p></p>
<p>==注意==：</p>
<ol>
<li>for in 和for of  不能遍历symbol属性</li>
</ol>
<p>对象的Symbol.iterator属性：指向对象的默认遍历器方法（fenerator）</p>
<p></p>
<p>==注意==：</p>
<ol>
<li>三点运算符和解构赋值实际上就是实现了iterator接口</li>
</ol>
<h3 id="iterator遍历器">iterator遍历器</h3>
<p>概念：是一种接口机制，为各种不同的数据结构提供统一的访问机制</p>
<h4 id="作用">作用：</h4>
<ol>
<li>为各种数据结构，提供一个统一的，简便的访问接口</li>
<li>使得数据结构的成员能够按照某种次序排列</li>
<li>ES6创造了一种新的遍历命令for&hellip;of循环，Iterator接口主要供for&hellip;of消费</li>
</ol>
<h4 id="工作原理">工作原理：</h4>
<p></p>
<h4 id="底层实现">底层实现：</h4>
<p>实际上这里的nextIndex使用了闭包
</p>
<h4 id="实现了iterator接口的数据结构">实现了iterator接口的数据结构</h4>
<p></p>
<p>==注意==：</p>
<ol>
<li>对象没有iterator接口，无法用for of去遍历循环</li>
</ol>
<h3 id="generator">generator</h3>
<p></p>
<p>普通函数：一路到底</p>
<p>generator函数：函数加*，中间能停，next一次走一步，yield处停止</p>
<ol>
<li>yield的值是next中传入的参数，==注意==：执行函数的第一个next不能传参，因为传了也不能赋值给变量，第二个next传的参数是第一个yield的返回值</li>
<li>调用next方法的返回值是函数return的值，或者yield后面的值</li>
<li>==生成遍历器对象==，给对象的Symbol.iterator属性添加一个遍历器对象后，就能用for of遍历</li>
</ol>
<p></p>
<h4 id="yield">yield</h4>
<p>可以传参，返回</p>
<p>看成把一个函数分成多个子函数，show_1,show_2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="c1">//可以传参
</span><span class="c1"></span><span class="kd">function</span><span class="o">*</span> <span class="nx">show</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">yield</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">genObj</span> <span class="o">=</span> <span class="nx">show</span><span class="p">()</span><span class="c1">//yield之前函数传参
</span><span class="c1"></span><span class="nx">genObj</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="c1">//没法给yield传参，执行函数开始到第一个yield，此时yield有值，但是并没有给变量a
</span><span class="c1"></span><span class="nx">genObj</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="c1">//执行yield往后的代码，let a是在yield之后
</span><span class="c1"></span>
<span class="c1">//可以返回
</span><span class="c1"></span><span class="kd">function</span><span class="o">*</span> <span class="nx">show2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
  <span class="k">yield</span> <span class="mi">12</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
  <span class="k">return</span> <span class="mi">55</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">genObj2</span> <span class="o">=</span> <span class="nx">show2</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">res1</span> <span class="o">=</span> <span class="nx">genObj2</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res1</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">res2</span> <span class="o">=</span> <span class="nx">genObj2</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span><span class="c1">//这里的结果是通过函数中的return得到的
</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<p>==注意==：</p>
<ol>
<li>在getNews里面调用next方法并且传参，这样能在generator中得到url的值</li>
</ol>
<h3 id="class类和继承">class类和继承</h3>
<h4 id="类和对象-1">类和对象</h4>
<ul>
<li>
<p>关键字：class</p>
<p>注意:类中所有函数不需要加function关键字，多个方法间不加逗号分隔.</p>
</li>
<li>
<p>方法中的this指向：方法的调用者</p>
</li>
</ul>
<h4 id="构造器-1">构造器</h4>
<ul>
<li>
<p>关键字：constructor()</p>
</li>
<li>
<p>作用:用于传递参数，返回实例对象，new生成对象实例时自动调用。</p>
<p>注意：如果未定义会自动创建一个constructor()</p>
</li>
<li>
<p>this指向：实例对象</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"> <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Star</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">sing</span><span class="p">(</span><span class="nx">song</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">song</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">ldh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">,</span> <span class="mi">18</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">zxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Star</span><span class="p">(</span><span class="s1">&#39;张学友&#39;</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ldh</span><span class="p">.</span><span class="nx">uname</span> <span class="o">+</span> <span class="nx">ldh</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
  <span class="nx">ldh</span><span class="p">.</span><span class="nx">sing</span><span class="p">(</span><span class="s1">&#39;冰雨&#39;</span><span class="p">)</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<p>this的指向问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>
  唱歌
<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kd">var</span> <span class="nx">that</span><span class="p">;</span>
  <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
    <span class="c1">//构造器里面的this指向实例对象
</span><span class="c1"></span>    <span class="nx">constructor</span><span class="p">(</span><span class="nx">uname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">uname</span> <span class="o">=</span> <span class="nx">uname</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
      <span class="c1">// this.sing();
</span><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">btn</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sing</span><span class="p">;</span><span class="c1">//因为这个按钮调用了这个函数
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="c1">//这个方法里的this 指向的是btn 这个按钮
</span><span class="c1"></span>    <span class="nx">sing</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// console.log(this.uname);
</span><span class="c1"></span>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">uname</span><span class="p">);</span> <span class="c1">//that 里面存储的是constructor里面的this
</span><span class="c1"></span>    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">father</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Father</span><span class="p">(</span><span class="s1">&#39;刘德华&#39;</span><span class="p">);</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="类的继承-1">类的继承</h4>
<h5 id="关键字-1">关键字</h5>
<ul>
<li>
<h3 id="entends-1">entends</h3>
</li>
<li>
<p>注意：ES6中类没有变量提升，必须先定义类，才能实例化</p>
</li>
</ul>
<h5 id="继承属性-2">继承属性</h5>
<p>调用父类构造函数：</p>
<ul>
<li>关键字：super(x,y)</li>
</ul>
<p>注意：在constructor中调用，且必须在子元素的this之前调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">money</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">Father</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">son</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
  <span class="nx">son</span><span class="p">.</span><span class="nx">money</span><span class="p">();</span>
  <span class="nx">son</span><span class="p">.</span><span class="nx">sum</span><span class="p">();</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="继承方法-2">继承方法</h5>
<ul>
<li>
<p>子类实例会自动继承父类的方法</p>
</li>
<li>
<p>在子类中调用父类方法：</p>
<ul>
<li>关键字：super.父类方法名()</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  class Father {
    say() {
      return &#39;我是爸爸&#39;
    }
  }
  class Son extends Father{
    say() {
      console.log(super.say()+&#39;的儿子&#39;);
    }
  }
  var son = new Son();
  son.say();
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h5 id="扩展子类的方法-1">扩展子类的方法</h5>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="kr">class</span> <span class="nx">Father</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">sum</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>

    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kr">class</span> <span class="nx">Son</span> <span class="kr">extends</span> <span class="nx">Father</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">super</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">sub</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">son</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Son</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
  <span class="nx">son</span><span class="p">.</span><span class="nx">sum</span><span class="p">();</span>
  <span class="nx">son</span><span class="p">.</span><span class="nx">sub</span><span class="p">();</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="深度克隆">深度克隆</h3>
<ol>
<li>arr.concat()：数组浅拷贝</li>
<li>arr.slice()：数组浅拷贝</li>
<li>JSON.parse(JSON.stringify(arr/obj))：数组或对象深拷贝，拷贝的数据里不能有函数，这里实际上拷贝的是json字符串，是基本数据类型</li>
<li>Object.assign()；浅拷贝</li>
<li>浅拷贝拷贝引用，拷贝以后的数据会影响原数据</li>
<li>深拷贝拷贝值，拷贝以后的数据不会影响原数据</li>
</ol>
<h4 id="封装深拷贝函数">封装深拷贝函数</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="nx">userName</span><span class="o">:</span> <span class="s1">&#39;xqz&#39;</span><span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>

<span class="kd">function</span> <span class="nx">clone</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">clone</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">arr1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">arr1</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">obj</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">clone</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span>
<span class="nx">newArr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">userName</span> <span class="o">=</span> <span class="s1">&#39;hhh&#39;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newArr</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="set容器">set容器</h3>
<ol>
<li>无序的，不可重复的多个value的集合体</li>
</ol>
<ul>
<li>
<p>类似于数组，但是成员不能重复,会自动去重</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span><span class="c1">//可以接收数组初始化，会自动去重4
</span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>数据数量</p>
<p>s.size();</p>
</li>
<li>
<p>可以用于数组去重</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
<span class="kr">const</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">s</span><span class="p">];</span><span class="c1">//这里用扩展运损符将s用逗号分隔开
</span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="实例方法">实例方法</h4>
<ul>
<li>add(value):添加某个值，返回Set结构本身</li>
<li>delete(value):删除某个值，返回布尔值，表示是否和删除成功</li>
<li>has(value):返回布尔值，表示该值是否为set的成员</li>
<li>clear():清除所有成员，没有返回值</li>
</ul>
<h4 id="set遍历">Set遍历</h4>
<p>和数组一样有foreach方法，无返回值</p>
<h5 id="sforeachvaluelogvalue">s.forEach(value=&gt;log(value))</h5>
<h3 id="map容器">map容器</h3>
<ol>
<li>无序的key，不重复的多个key-value的集合体</li>
</ol>
<p>Map()</p>
<p>Map(array)</p>
<p>set(key,value)//添加</p>
<p>get(key)</p>
<p>delete(key)</p>
<p>has(key)</p>
<p>clear()</p>
<p>size</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kd">let</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">([[</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="mi">25</span><span class="p">],[</span><span class="mi">36</span><span class="p">,</span><span class="s1">&#39;age&#39;</span><span class="p">]])</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">)</span>
<span class="nx">map</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">78</span><span class="p">,</span><span class="s1">&#39;haha&#39;</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">)</span>
<span class="nx">map</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="mi">78</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="for-of">for of</h3>
<ol>
<li>遍历数组</li>
<li>遍历set</li>
<li>遍历map</li>
<li>遍历字符串</li>
<li>遍历伪数组</li>
</ol>
<h1 id="es7">ES7</h1>
<h2 id="asyncawait">async/await</h2>
<ul>
<li>ES7的新语法，可以更加方便得进行异步操作</li>
<li>async用于函数上（async函数得返回值时promise对象）</li>
<li>await用于saync函数中（await可以得到当前异步的结果）</li>
</ul>
<p>==注意==：因为async返回的也是个promise对象，在调用时也可以用then获得函数的返回值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">queryData</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;adata&#39;</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">queryData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：await后面必须跟promise实例对象，才能获取异步的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">num</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span><span class="c1">//resolve成功，reject失败
</span><span class="c1"></span>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;nihao&#39;</span><span class="p">)</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
  <span class="p">});</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">num</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>处理多个异步任务</p>
<p>桉顺序写即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">        <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">baseURL</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:3000&#39;</span><span class="p">;</span>
        <span class="kr">async</span> <span class="kd">function</span> <span class="nx">queryData</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;async1&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;async2?info=&#39;</span> <span class="o">+</span> <span class="nx">info</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span><span class="c1">//用info作为参数
</span><span class="c1"></span>            <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">queryData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">ret</span><span class="p">=&gt;{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
        <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="arrayincludes">Array.includes()</h2>
<p>表示某个数组是否包含给定的值，返回布尔值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="c1">//true
</span></code></pre></td></tr></table>
</div>
</div><h2 id="指数运算符">指数运算符</h2>
<p>**</p>
<h1 id="模块化规范">模块化规范</h1>
<h2 id="namespace模式">namespace模式</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span><span class="p">{</span>
  <span class="nx">msg</span><span class="o">:</span><span class="s1">&#39;module&#39;</span><span class="p">,</span>
  <span class="nx">foo</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo()&#39;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;module.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">msg</span><span class="o">=</span><span class="s1">&#39;修改了&#39;</span><span class="c1">//对象中的值仍然可以被修改
</span><span class="c1"></span>  <span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="iife模式">IIFE模式</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//有独立的作用域
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;module&#39;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo()&#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">//给全局的window对象添加属性
</span><span class="c1"></span>  <span class="nb">window</span><span class="p">.</span><span class="nx">module</span><span class="o">=</span><span class="p">{</span><span class="nx">foo</span><span class="p">}</span>
<span class="p">})(</span><span class="nb">window</span><span class="p">)</span><span class="c1">//闭包
</span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;module.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">module</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="iife模式增强">IIFE模式增强</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//有独立的作用域
</span><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;module&#39;</span>

  <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo()&#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nb">window</span><span class="p">.</span><span class="nx">module</span> <span class="o">=</span> <span class="nx">foo</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;background&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">)</span>

<span class="p">})(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">jQuery</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;jquery.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;module.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="nx">module</span><span class="p">()</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="commonjs">CommonJS</h2>
<h3 id="规范">规范</h3>
<p></p>
<p></p>
<h3 id="基于服务器端">基于服务器端</h3>
<p>文件结构</p>
<p></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//1
</span><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">msg</span><span class="o">:</span><span class="s1">&#39;module1&#39;</span><span class="p">,</span>
  <span class="nx">foo</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">//2
</span><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;module2&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//3
</span><span class="c1"></span><span class="nx">exports</span><span class="p">.</span><span class="nx">foo</span><span class="o">=</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo() module3&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bar</span><span class="o">=</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar() module3&#39;</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">arr</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//app.js
</span><span class="c1">//引入第三方库
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">uniq</span> <span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;uniq&#39;</span><span class="p">)</span>
<span class="c1">//将其他的模块汇集到主模块
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">module1</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modules/module1&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">module2</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modules/module2&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">module3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./modules/module3&#39;</span><span class="p">)</span>

<span class="nx">module1</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
<span class="nx">module2</span><span class="p">()</span>
<span class="nx">module3</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
<span class="nx">module3</span><span class="p">.</span><span class="nx">bar</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">uniq</span><span class="p">(</span><span class="nx">module3</span><span class="p">.</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>npm install xxx &ndash;save-dev 标识开发依赖包</li>
</ol>
<h3 id="基于浏览器端">基于浏览器端</h3>
<p>文件结构</p>
<p></p>
<ol>
<li>
<p>首先和服务端一样，用module.epxorts进行暴露，require进行引入</p>
</li>
<li>
<p>其次</p>
<p>全局下载browserify包：npm install browerify</p>
<p>再局部下载开发依赖：npm install browerify &ndash;save-dev</p>
</li>
<li>
<p>其次命令行打包处理：</p>
<p><strong>错误内容：</strong>
<code>'browserify' 不是内部或外部命令，也不是可运行的程序 或批处理文件。</code></p>
<p><strong>已解决：</strong>
命令行前面加上browserify的路径即可，
<code>node_modules\.bin\browserify js/src/app.js -o js/dist/build.js</code></p>
<p>==注意==：</p>
</li>
<li>
<p>前面的是原文件</p>
</li>
<li>
<p>-o表示output</p>
</li>
<li>
<p>后面的是输出文件的目录以及文件名字</p>
</li>
<li>
<p>然后在index.html中引入输出的新文件，即可在浏览器端使用require</p>
</li>
</ol>
<h2 id="amd">AMD</h2>
<h3 id="规范-1">规范</h3>
<p></p>
<p>文件结构</p>
<p></p>
<p>下载requireJS</p>
<p>定义没有依赖的模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//没有依赖的模块
</span><span class="c1"></span><span class="nx">define</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;dataService&#39;</span>

  <span class="kd">function</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">name</span>
  <span class="p">}</span>

  <span class="c1">//暴露模块
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span><span class="nx">getName</span><span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>定义有依赖的模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//定义有依赖的模块
</span><span class="c1"></span><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;dataService&#39;</span><span class="p">],</span><span class="kd">function</span> <span class="p">(</span><span class="nx">dataService</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s1">&#39;alerter.js&#39;</span>
  <span class="kd">function</span> <span class="nx">showMsg</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span><span class="nx">dataService</span><span class="p">.</span><span class="nx">getName</span><span class="p">())</span>
  <span class="p">}</span>
  <span class="c1">//暴露模块
</span><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span><span class="nx">showMsg</span><span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>main.js</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

  <span class="nx">requirejs</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
    <span class="nx">baseUrl</span><span class="o">:</span> <span class="s1">&#39;js/&#39;</span><span class="p">,</span><span class="c1">//基本的路径,出发点在根目录下
</span><span class="c1"></span>    <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span><span class="c1">//配置路径
</span><span class="c1"></span>      <span class="nx">dataService</span><span class="o">:</span> <span class="s1">&#39;./modules/dataService&#39;</span><span class="p">,</span><span class="c1">//属性名和之前定义的模块名一样
</span><span class="c1"></span>      <span class="nx">alerter</span><span class="o">:</span> <span class="s1">&#39;./modules/alerter&#39;</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="nx">requirejs</span><span class="p">([</span><span class="s1">&#39;alerter&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">alerter</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alerter</span><span class="p">.</span><span class="nx">showMsg</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">})()</span>
</code></pre></td></tr></table>
</div>
</div><p>==注意==：</p>
<ol>
<li>引入jquery时要小写</li>
</ol>
<p>index.html</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">data-main</span><span class="o">=</span><span class="s">&#34;./js/main.js&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;./js/libs/require.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>//先通过src找到require第三方库，然后通过data-main找到main.js，再从main中的path找到相应的模块路径
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="cmd">CMD</h2>
<h2 id="es6-1">ES6</h2>
<p></p>
<p>步骤：</p>
<ol>
<li>
<p>定义package.json文件</p>
</li>
<li>
<p>安装babel-cli，babel-preset-es2015和browserify</p>
</li>
</ol>
<ul>
<li>npm install babel-cli browserify -g</li>
<li>npm install babel-preset-es2015 &ndash;save-dev</li>
<li>preset 预设（将es6转为es5的所有插件打包）</li>
</ul>
<ol start="3">
<li>
<p>定义.babelrc文件,</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="s2">&#34;presets&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;es2015&#34;</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>编码</p>
<p>文件结构</p>
</li>
</ol>
<h3 id="httpsrawgithubusercontentcomyzuxqzpic-bedmasternotes-imges6babelpng"></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//暴露模块 分别暴露
</span><span class="c1"></span><span class="kr">export</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo() module1&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar() module1&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="统一暴露">统一暴露</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//统一暴露
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">fun</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fun() module2&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">fun2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fun2() module2&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kr">export</span> <span class="p">{</span><span class="nx">fun</span><span class="p">,</span><span class="nx">fun2</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="默认暴露">默认暴露</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//默认暴露 可以暴露任意数据类型 暴露什么数据接收到的就是什么数据
</span><span class="c1">//只能一次
</span><span class="c1">// export default ()=&gt;{
</span><span class="c1">//     console.log(&#34;默认&#34;)
</span><span class="c1">// }
</span><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nx">msg</span><span class="o">:</span><span class="s1">&#39;默认暴露&#39;</span><span class="p">,</span>
  <span class="nx">foo</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">msg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>main</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//引入其他的模块
</span><span class="c1"></span>
<span class="c1">//语法：import xxx from ‘路径’
</span><span class="c1"></span><span class="kr">import</span> <span class="p">{</span><span class="nx">foo</span><span class="p">,</span><span class="nx">bar</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./module1&#39;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">fun</span><span class="p">,</span><span class="nx">fun2</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./module2&#39;</span>
<span class="kr">import</span> <span class="nx">module3</span> <span class="nx">from</span> <span class="s1">&#39;./module3&#39;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">module3</span><span class="p">.</span><span class="nx">foo</span><span class="p">())</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">(),</span><span class="nx">bar</span><span class="p">(),</span><span class="nx">module2</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">module1</span><span class="p">,</span><span class="nx">module2</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>​	==注意==：</p>
<ol>
<li>要使用解构赋值的方式来引入模块</li>
</ol>
<p>5.编译</p>
<ul>
<li>
<p>使用babel将ES6编译为ES5代码：==babel js/src -d js/lib==</p>
<p>​													源文件目录      编译后的文件目录</p>
<p>改成require那种es5的，但是require仍然需要转换</p>
</li>
<li>
<p>使用Browserify编译js：==browserify js/lib/main.js -o js/lib/bundle.js==</p>
</li>
</ul>
<p>6.引入：index.html中使用bundle文件</p>
<p>​	==注意==：</p>
<ol>
<li>一旦修改了js文件就需要重新编译打包</li>
</ol>
<p>打包完成后文件结构</p>
<p></p>
]]></description>
</item></channel>
</rss>
